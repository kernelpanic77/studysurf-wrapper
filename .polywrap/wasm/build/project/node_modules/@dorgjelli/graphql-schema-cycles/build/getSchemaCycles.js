"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSchemaCycles = void 0;
var graphql_1 = require("graphql");
var graphql_json_transform_1 = require("graphql-json-transform");
var graphify_1 = require("./graphify");
var detectCycles_1 = require("./detectCycles");
var DEFAULT_IGNORED_TYPENAMES = ["Mutation", "Subscription", "Query"];
var removeDirectives = function (schemaString) {
    var schema = graphql_1.parse(schemaString);
    var newSchema = graphql_1.visit(schema, {
        Directive: function () {
            return null;
        },
    });
    return graphql_1.print(newSchema);
};
var removeInvalidFields = function (schemaString) {
    var schema = graphql_1.parse(schemaString);
    var newSchema = graphql_1.visit(schema, {
        FieldDefinition: function (node) {
            // Remove Nullable Fields
            if (node.type.kind === "NamedType") {
                return null;
            }
            // Remove Array Fields
            if (node.type.kind === "ListType" ||
                node.type.type.kind === "ListType") {
                return null;
            }
            return node;
        },
    });
    return graphql_1.print(newSchema);
};
exports.getSchemaCycles = function (schema, options) {
    var parsedSchema = typeof schema !== "string" ? graphql_1.print(schema) : schema;
    var detectOne = options ? !!options.detectOnlyOne : false;
    var typesToIgnore = (options === null || options === void 0 ? void 0 : options.ignoreTypeNames) || DEFAULT_IGNORED_TYPENAMES;
    var schemaWithoutDirectives = removeDirectives(parsedSchema);
    var processedSchema = options && options.allowOnNullableFields
        ? removeInvalidFields(schemaWithoutDirectives)
        : schemaWithoutDirectives;
    var object = graphql_json_transform_1.convert(processedSchema);
    var graph = graphify_1.convertToGraph(object, typesToIgnore).graph;
    var detectedCycles = detectCycles_1.detectCycles(graph, detectOne);
    var cycleStrings = detectedCycles.cycles.map(function (cycle) {
        var cycleString = cycle.reduce(function (accumulator, vertice) {
            accumulator += vertice["vertex"].vertexID;
            if (vertice["refLabel"] === "#interface_ref") {
                accumulator += " <~implements~ ";
            }
            else if (vertice["refLabel"] === "#union_ref") {
                accumulator += " -union-> ";
            }
            else
                accumulator += " -[" + vertice["refLabel"] + "]-> ";
            return accumulator;
        }, "{ ");
        return cycleString.slice(0, -7) + " }";
    });
    return {
        jsObject: object,
        graph: graph,
        cycles: detectedCycles.cycles,
        cycleStrings: cycleStrings,
        foundCycle: detectedCycles.foundCycle,
    };
};
//# sourceMappingURL=getSchemaCycles.js.map