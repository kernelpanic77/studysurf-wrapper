"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToGraph = void 0;
function convertToGraph(data, excludeList) {
    var Graph = [];
    var vertices = 0;
    var edges = 0;
    var total_vertices = 0;
    var graphQLTypes = ["Int", "String", "ID", "Boolean", "Float"];
    function addToGraph(target) {
        var _a;
        for (var objectName in data[target]) {
            var derived_by = [];
            var is_derived = false;
            vertices++;
            if (!excludeList.includes(objectName)) {
                var objectType = data[target][objectName];
                if (objectType["implements"] !== undefined) {
                    is_derived = true;
                    derived_by.push(Object.keys(objectType["implements"])[0]);
                    objectType =
                        objectType["implements"][Object.keys(objectType["implements"])[0]];
                    while (objectType["&"] !== undefined) {
                        derived_by.push(Object.keys(objectType["&"])[0]);
                        objectType = objectType["&"][Object.keys(objectType["&"])[0]];
                    }
                }
                var tmpReferenceList = [];
                for (var fields in objectType) {
                    if (objectType[fields]["type"] === undefined &&
                        objectType[fields]["args"] !== undefined) {
                        objectType[fields]["type"] = objectType[fields]["args"]["type"];
                    }
                    if (!graphQLTypes.includes(objectType[fields].type)) {
                        // if not a standard type
                        if (target === "union") {
                            tmpReferenceList.push({ label: "#union_ref", reference: fields });
                        }
                        else {
                            tmpReferenceList.push({
                                label: fields,
                                reference: objectType[fields].type,
                            });
                        }
                    }
                }
                var tmpVertex = { vertexID: objectName };
                tmpVertex.vertexType = target;
                tmpVertex.referenceList = tmpReferenceList;
                if (Graph[objectName]) {
                    (_a = tmpVertex.referenceList).push.apply(_a, Graph[objectName].referenceList);
                }
                Graph[objectName] = tmpVertex;
                if (is_derived) {
                    for (var der in derived_by) {
                        if (!Graph[derived_by[der]]) {
                            Graph[derived_by[der]] = {
                                vertexID: derived_by[der],
                                referenceList: []
                            };
                        }
                        Graph[derived_by[der]].referenceList.push({
                            label: "#interface_ref",
                            reference: objectName,
                        });
                    }
                }
            }
        }
    }
    function connectVertices() {
        for (var vertex in Graph) {
            for (var ref in Graph[vertex].referenceList) {
                var reference = Graph[vertex].referenceList[ref].reference;
                edges++;
                if (Graph[reference] === undefined) {
                    throw new Error("Field - reference not defined \"" + reference + "\"");
                }
                Graph[vertex].referenceList[ref].reference = Graph[reference];
            }
        }
    }
    for (var _enum in data["enum"]) {
        graphQLTypes.push(_enum);
    }
    for (var _scalar in data["scalar"]) {
        graphQLTypes.push(_scalar);
    }
    var returndata = {};
    addToGraph("interface");
    returndata.nrInterface = vertices;
    total_vertices = vertices;
    addToGraph("union");
    returndata.nrUnion = vertices - total_vertices;
    total_vertices += vertices;
    addToGraph("type");
    returndata.nrType = vertices - total_vertices;
    total_vertices += vertices;
    connectVertices();
    returndata.graph = Graph;
    returndata.edges = edges;
    returndata.vertices = vertices;
    return returndata;
}
exports.convertToGraph = convertToGraph;
//# sourceMappingURL=graphify.js.map