"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsoleExporterObject = void 0;
const utils_1 = require("./utils");
const core_1 = require("@opentelemetry/core");
/* eslint-disable no-console */
class ConsoleExporterObject {
    constructor() {
        this._min = 97;
        this._max = 122;
        this._objectMap = {};
    }
    /**
     * Export spans.
     * @param spans
     * @param resultCallback
     */
    export(spans, resultCallback) {
        return this._sendSpans(spans, resultCallback);
    }
    /**
     * Shutdown the exporter.
     */
    shutdown() {
        return Promise.resolve();
    }
    _formatLetters(index) {
        let label = "";
        let num = index;
        if (num == 0) {
            label = String.fromCodePoint(this._min);
        }
        else {
            let range = 1 + this._max - this._min;
            while (num > 0) {
                let digit = (num % range);
                label = String.fromCodePoint(this._min + digit) + label;
                num = Math.floor(num / range);
            }
            ;
        }
        return label.padEnd(3);
    }
    _formatDuration(span) {
        const duration = (0, core_1.hrTimeToMilliseconds)(span.duration).toString() + "ms";
        const durationPadded = duration.padStart(8);
        return durationPadded;
    }
    _groupSpans(spans) {
        var _a, _b, _c, _d, _e;
        let rootSpans = [];
        for (const span of spans) {
            const spanId = span.spanContext().spanId;
            const obj = (_a = this._objectMap[spanId]) !== null && _a !== void 0 ? _a : {};
            const parentId = span.parentSpanId;
            const duration = this._formatDuration(span);
            const args = (0, utils_1.parseAttributes)(span.attributes);
            if (parentId) {
                const parentSpan = (_b = this._objectMap[parentId]) !== null && _b !== void 0 ? _b : {};
                const index = (_d = (_c = parentSpan.children) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0;
                const letter = this._formatLetters(index);
                const label = `${letter} ${duration} - ${span.name}`;
                obj.name = label;
                obj.args = args;
                const parentChildren = (_e = parentSpan.children) !== null && _e !== void 0 ? _e : [];
                parentChildren.push(obj);
                parentSpan.children = parentChildren;
                this._objectMap[parentId] = parentSpan;
            }
            else {
                const index = rootSpans.length;
                const letter = this._formatLetters(index);
                const label = `${letter} ${duration} - ${span.name}`;
                obj.name = label;
                obj.args = args;
                rootSpans.push(obj);
            }
        }
        return rootSpans;
    }
    _1to2(span) {
        let details = { args: span.args };
        if (span.children) {
            details.children = span.children.map((s) => this._1to2(s));
        }
        let obj = {};
        obj[span.name] = details;
        return obj;
    }
    _sendSpans(spans, done) {
        let spans1 = this._groupSpans(spans);
        let spans2 = spans1.map((s) => this._1to2(s));
        for (const span of spans2) {
            console.debug(span);
        }
        return done({ code: core_1.ExportResultCode.SUCCESS });
    }
}
exports.ConsoleExporterObject = ConsoleExporterObject;
//# sourceMappingURL=exporterObject.js.map