"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsoleExporter = void 0;
const utils_1 = require("./utils");
const core_1 = require("@opentelemetry/core");
/* eslint-disable no-console */
class ConsoleExporter {
    constructor(config) {
        var _a;
        this._min = 127791;
        this._max = 127891;
        this._spanCounter = 0;
        this._indexMap = {};
        this._parentMap = {};
        this._isDetailed = (_a = config.isDetailed) !== null && _a !== void 0 ? _a : false;
        this._numbers = (0, utils_1.randomRange)(this._min, this._max);
    }
    /**
     * Export spans.
     * @param spans
     * @param resultCallback
     */
    export(spans, resultCallback) {
        return this._sendSpans(spans, resultCallback);
    }
    /**
     * Shutdown the exporter.
     */
    shutdown() {
        return Promise.resolve();
    }
    // assign icons
    _indexSpan(id) {
        if (!this._indexMap[id]) {
            this._indexMap[id] = this._spanCounter;
            // if all icons have been used, shuffle and reuse
            if (this._spanCounter == this._max - this._min) {
                this._numbers = (0, utils_1.randomRange)(this._min, this._max);
                this._spanCounter = 0;
            }
            else {
                this._spanCounter = this._spanCounter + 1;
            }
        }
    }
    // assign icons and record child-parent relations
    _cacheSpan(span) {
        const spanId = span.spanContext().spanId;
        this._indexSpan(spanId);
        const parentId = span.parentSpanId;
        if (parentId) {
            this._indexSpan(parentId);
            this._parentMap[spanId] = parentId;
        }
        this._indexSpan(span.spanContext().traceId);
    }
    _formatIcons(span) {
        const spanIcon = String.fromCodePoint(this._numbers[this._indexMap[span.spanContext().spanId]]);
        let path = spanIcon;
        let parentId = span.parentSpanId;
        while (parentId) {
            const parentIcon = String.fromCodePoint(this._numbers[this._indexMap[parentId]]);
            path = parentIcon + "-" + path;
            parentId = this._parentMap[parentId];
        }
        const traceIcon = String.fromCodePoint(this._numbers[this._indexMap[span.spanContext().traceId]]);
        path = traceIcon + ":" + path;
        const pathPadded = path.padEnd(60, "-") + ">";
        return pathPadded;
    }
    _formatDuration(span) {
        const duration = (0, core_1.hrTimeToMilliseconds)(span.duration).toString() + "ms";
        const durationPadded = duration.padStart(8);
        return durationPadded;
    }
    // icons - duration - span name
    _formatSpanDetailed(span) {
        const path = this._formatIcons(span);
        const duration = this._formatDuration(span);
        const label = span.name;
        const message = `${path} ${duration} - ${label}`;
        return message;
    }
    // duration - custom label (or span name)
    _formatSpan(span) {
        const path = this._formatIcons(span);
        const duration = this._formatDuration(span);
        let label;
        if (span.attributes.label) {
            try {
                label = JSON.parse(span.attributes.label);
            }
            catch {
                label = span.attributes.label;
            }
        }
        else {
            label = span.name;
        }
        const message = `${path} ${duration} - ${label}`;
        return message;
    }
    _sendSpans(spans, done) {
        // assign icons and record child-parent relations
        for (const span of spans) {
            this._cacheSpan(span);
        }
        // print logs to console
        if (this._isDetailed) {
            for (const span of spans) {
                console.debug(this._formatSpanDetailed(span), "\n", (0, utils_1.parseAttributes)(span.attributes));
            }
        }
        else {
            for (const span of spans) {
                console.debug(this._formatSpan(span));
            }
        }
        return done({ code: core_1.ExportResultCode.SUCCESS });
    }
}
exports.ConsoleExporter = ConsoleExporter;
//# sourceMappingURL=flat.js.map