"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AsyncWasmInstance = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/no-empty-function */
var utils_1 = require("./utils");
var AsyncifyState;
(function (AsyncifyState) {
    AsyncifyState[AsyncifyState["None"] = 0] = "None";
    AsyncifyState[AsyncifyState["Unwinding"] = 1] = "Unwinding";
    AsyncifyState[AsyncifyState["Rewinding"] = 2] = "Rewinding";
})(AsyncifyState || (AsyncifyState = {}));
var AsyncWasmInstance = /** @class */ (function () {
    function AsyncWasmInstance() {
    }
    AsyncWasmInstance.createMemory = function (config) {
        // extract the initial memory page size, as it will
        // throw an error if the imported page size differs:
        // https://chromium.googlesource.com/v8/v8/+/644556e6ed0e6e4fac2dfabb441439820ec59813/src/wasm/module-instantiate.cc#924
        var envMemoryImportSignature = Uint8Array.from([
            // env ; import module name
            0x65,
            0x6e,
            0x76,
            // string length
            0x06,
            // memory ; import field name
            0x6d,
            0x65,
            0x6d,
            0x6f,
            0x72,
            0x79,
            // import kind
            0x02,
        ]);
        var sigIdx = utils_1.indexOfArray(config.module, envMemoryImportSignature);
        if (sigIdx < 0) {
            throw Error("Unable to find Wasm memory import section. " +
                "Modules must import memory from the \"env\" module's " +
                "\"memory\" field like so:\n" +
                "(import \"env\" \"memory\" (memory (;0;) #))");
        }
        // Extract the initial memory page-range size
        var memoryInitalLimits = config.module[sigIdx + envMemoryImportSignature.length + 1];
        if (memoryInitalLimits === undefined) {
            throw Error("No initial memory number found, this should never happen...");
        }
        return new WebAssembly.Memory({ initial: memoryInitalLimits });
    };
    AsyncWasmInstance.createInstance = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var instance, _a, exportKeys, missingExports, exports, memory;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        instance = new AsyncWasmInstance();
                        // Wrap imports
                        instance._wrappedImports = instance._wrapImports(config.imports);
                        // Create Wasm module instance
                        _a = instance;
                        return [4 /*yield*/, WebAssembly.instantiate(config.module, instance._wrappedImports)];
                    case 1:
                        // Create Wasm module instance
                        _a._instance = (_b.sent()).instance;
                        exportKeys = Object.keys(instance._instance.exports);
                        missingExports = __spread(AsyncWasmInstance.requiredExports, (config.requiredExports || [])).filter(function (name) { return !exportKeys.includes(name); });
                        if (missingExports.length) {
                            throw new Error("Required Wasm exports were not found: " + missingExports.join(", "));
                        }
                        exports = instance._instance.exports;
                        // Wrap exports
                        instance._wrappedExports = instance._wrapExports(exports);
                        memory = (exports.memory ||
                            (config.imports.env && config.imports.env.memory));
                        new Int32Array(memory.buffer, AsyncWasmInstance._dataAddr).set([
                            AsyncWasmInstance._dataStart,
                            AsyncWasmInstance._dataEnd,
                        ]);
                        return [2 /*return*/, instance];
                }
            });
        });
    };
    Object.defineProperty(AsyncWasmInstance.prototype, "exports", {
        get: function () {
            return this._wrappedExports;
        },
        enumerable: false,
        configurable: true
    });
    AsyncWasmInstance.prototype._getAsyncifyState = function () {
        return this._wrappedExports.asyncify_get_state();
    };
    AsyncWasmInstance.prototype._assertNoneState = function () {
        var state = this._getAsyncifyState();
        if (state !== AsyncifyState.None) {
            throw new Error("Invalid asyncify state " + state + ", expected 0.");
        }
    };
    AsyncWasmInstance.prototype._wrapImports = function (imports) {
        var _this = this;
        return utils_1.proxyGet(imports, function (moduleImports, name) {
            if (moduleImports === undefined) {
                throw Error("Unsupported wasm import namespace requested: \"" + name + "\"; " +
                    ("Supported wasm import namespaces: " + Object.keys(imports)
                        .map(function (x) { return "\"" + x + "\""; })
                        .join(", ")));
            }
            return _this._wrapModuleImports(moduleImports);
        });
    };
    AsyncWasmInstance.prototype._wrapModuleImports = function (imports) {
        var _this = this;
        return utils_1.proxyGet(imports, function (importValue, name) {
            if (importValue === undefined) {
                throw Error("Unsupported wasm import requested: \"" + name + "\"; " +
                    ("Supported wasm imports: " + Object.keys(imports)
                        .map(function (x) { return "\"" + x + "\""; })
                        .join(", ")));
            }
            if (typeof importValue === "function") {
                return _this._wrapImportFn(importValue);
            }
            return importValue;
        });
    };
    AsyncWasmInstance.prototype._wrapImportFn = function (importFn) {
        var _this = this;
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (_this._getAsyncifyState() === AsyncifyState.Rewinding) {
                _this._wrappedExports.asyncify_stop_rewind();
                return _this._importFnResult;
            }
            _this._assertNoneState();
            var value = importFn.apply(void 0, __spread(args));
            if (!utils_1.isPromise(value)) {
                return value;
            }
            _this._wrappedExports.asyncify_start_unwind(AsyncWasmInstance._dataAddr);
            _this._importFnResult = value;
        };
    };
    AsyncWasmInstance.prototype._wrapExports = function (exports) {
        var newExports = Object.create(null);
        for (var exportName in exports) {
            var value = exports[exportName];
            if (typeof value === "function" && !exportName.startsWith("asyncify_")) {
                value = this._wrapExportFn(value);
            }
            Object.defineProperty(newExports, exportName, {
                enumerable: true,
                value: value,
            });
        }
        return newExports;
    };
    AsyncWasmInstance.prototype._wrapExportFn = function (exportFn) {
        var _this = this;
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter(_this, void 0, void 0, function () {
                var result, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this._assertNoneState();
                            result = exportFn.apply(void 0, __spread(args));
                            _b.label = 1;
                        case 1:
                            if (!(this._getAsyncifyState() === AsyncifyState.Unwinding)) return [3 /*break*/, 3];
                            this._wrappedExports.asyncify_stop_unwind();
                            _a = this;
                            return [4 /*yield*/, this._importFnResult];
                        case 2:
                            _a._importFnResult = _b.sent();
                            this._assertNoneState();
                            this._wrappedExports.asyncify_start_rewind(AsyncWasmInstance._dataAddr);
                            result = exportFn();
                            return [3 /*break*/, 1];
                        case 3:
                            this._assertNoneState();
                            return [2 /*return*/, result];
                    }
                });
            });
        };
    };
    AsyncWasmInstance.requiredExports = [
        "asyncify_start_unwind",
        "asyncify_stop_unwind",
        "asyncify_start_rewind",
        "asyncify_stop_rewind",
        "asyncify_get_state",
    ];
    AsyncWasmInstance._dataAddr = 16;
    AsyncWasmInstance._dataStart = AsyncWasmInstance._dataAddr + 8;
    AsyncWasmInstance._dataEnd = 1024;
    return AsyncWasmInstance;
}());
exports.AsyncWasmInstance = AsyncWasmInstance;
//# sourceMappingURL=AsyncWasmInstance.js.map