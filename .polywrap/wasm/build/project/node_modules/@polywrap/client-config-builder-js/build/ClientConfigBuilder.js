"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientConfigBuilder = void 0;
var bundles_1 = require("./bundles");
var core_js_1 = require("@polywrap/core-js");
var ClientConfigBuilder = /** @class */ (function () {
    function ClientConfigBuilder() {
        this._config = {
            redirects: [],
            plugins: [],
            interfaces: [],
            envs: [],
        };
    }
    ClientConfigBuilder.prototype.add = function (config) {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
        if (config.envs) {
            try {
                for (var _e = __values(config.envs), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var env = _f.value;
                    this.addEnv(env.uri, env.env);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        if (config.interfaces) {
            try {
                for (var _g = __values(config.interfaces), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var interfaceImpl = _h.value;
                    this.addInterfaceImplementations(interfaceImpl.interface, interfaceImpl.implementations);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (config.plugins) {
            try {
                for (var _j = __values(config.plugins), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var plugin = _k.value;
                    this.addPlugin(plugin.uri, plugin.plugin);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (config.redirects) {
            try {
                for (var _l = __values(config.redirects), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var redirect = _m.value;
                    this.addUriRedirect(redirect.from, redirect.to);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (config.resolver) {
            this.setResolver(config.resolver);
        }
        return this;
    };
    ClientConfigBuilder.prototype.addDefaults = function (wrapperCache) {
        return this.add(bundles_1.getDefaultClientConfig(wrapperCache));
    };
    ClientConfigBuilder.prototype.addPlugin = function (uri, plugin) {
        var pluginUri = core_js_1.Uri.from(uri);
        var existingRegistration = this._config.plugins.find(function (x) {
            return core_js_1.Uri.equals(x.uri, pluginUri);
        });
        if (existingRegistration) {
            existingRegistration.plugin = plugin;
        }
        else {
            this._config.plugins.push({
                uri: pluginUri,
                plugin: plugin,
            });
        }
        return this;
    };
    ClientConfigBuilder.prototype.removePlugin = function (uri) {
        var pluginUri = core_js_1.Uri.from(uri);
        var idx = this._config.plugins.findIndex(function (x) {
            return core_js_1.Uri.equals(x.uri, pluginUri);
        });
        if (idx > -1) {
            this._config.plugins.splice(idx, 1);
        }
        return this;
    };
    ClientConfigBuilder.prototype.addEnv = function (uri, env) {
        var envUri = core_js_1.Uri.from(uri);
        var idx = this._config.envs.findIndex(function (x) { return core_js_1.Uri.equals(x.uri, envUri); });
        if (idx > -1) {
            this._config.envs[idx].env = __assign(__assign({}, this._config.envs[idx].env), env);
        }
        else {
            this._config.envs.push({
                uri: envUri,
                env: env,
            });
        }
        return this;
    };
    ClientConfigBuilder.prototype.removeEnv = function (uri) {
        var envUri = core_js_1.Uri.from(uri);
        var idx = this._config.envs.findIndex(function (x) { return core_js_1.Uri.equals(x.uri, envUri); });
        if (idx > -1) {
            this._config.envs.splice(idx, 1);
        }
        return this;
    };
    ClientConfigBuilder.prototype.setEnv = function (uri, env) {
        var envUri = core_js_1.Uri.from(uri);
        var idx = this._config.envs.findIndex(function (x) { return core_js_1.Uri.equals(x.uri, envUri); });
        if (idx > -1) {
            this._config.envs[idx].env = env;
        }
        else {
            this._config.envs.push({
                uri: envUri,
                env: env,
            });
        }
        return this;
    };
    ClientConfigBuilder.prototype.addInterfaceImplementation = function (interfaceUri, implementationUri) {
        var interfaceUriSanitized = core_js_1.Uri.from(interfaceUri);
        var implementationUriSanitized = core_js_1.Uri.from(implementationUri);
        var existingInterface = this._config.interfaces.find(function (x) {
            return core_js_1.Uri.equals(x.interface, interfaceUriSanitized);
        });
        if (existingInterface) {
            if (!existingInterface.implementations.some(function (x) {
                return core_js_1.Uri.equals(x, implementationUriSanitized);
            })) {
                existingInterface.implementations.push(implementationUriSanitized);
            }
        }
        else {
            this._config.interfaces.push({
                interface: interfaceUriSanitized,
                implementations: [implementationUriSanitized],
            });
        }
        return this;
    };
    ClientConfigBuilder.prototype.addInterfaceImplementations = function (interfaceUri, implementationUris) {
        var e_5, _a;
        var interfaceUriSanitized = core_js_1.Uri.from(interfaceUri);
        var implementationUrisSanitized = implementationUris.map(core_js_1.Uri.from);
        var existingInterface = this._config.interfaces.find(function (x) {
            return core_js_1.Uri.equals(x.interface, interfaceUriSanitized);
        });
        if (existingInterface) {
            var _loop_1 = function (implUri) {
                if (!existingInterface.implementations.some(function (x) { return core_js_1.Uri.equals(x, implUri); })) {
                    existingInterface.implementations.push(implUri);
                }
            };
            try {
                for (var implementationUrisSanitized_1 = __values(implementationUrisSanitized), implementationUrisSanitized_1_1 = implementationUrisSanitized_1.next(); !implementationUrisSanitized_1_1.done; implementationUrisSanitized_1_1 = implementationUrisSanitized_1.next()) {
                    var implUri = implementationUrisSanitized_1_1.value;
                    _loop_1(implUri);
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (implementationUrisSanitized_1_1 && !implementationUrisSanitized_1_1.done && (_a = implementationUrisSanitized_1.return)) _a.call(implementationUrisSanitized_1);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        else {
            this._config.interfaces.push({
                interface: interfaceUriSanitized,
                implementations: implementationUrisSanitized,
            });
        }
        return this;
    };
    ClientConfigBuilder.prototype.removeInterfaceImplementation = function (interfaceUri, implementationUri) {
        var interfaceUriSanitized = core_js_1.Uri.from(interfaceUri);
        var implementationUriSanitized = core_js_1.Uri.from(implementationUri);
        var existingInterface = this._config.interfaces.find(function (x) {
            return core_js_1.Uri.equals(x.interface, interfaceUriSanitized);
        });
        if (existingInterface) {
            var idx = existingInterface.implementations.findIndex(function (x) {
                return core_js_1.Uri.equals(x, implementationUriSanitized);
            });
            if (idx > -1) {
                existingInterface.implementations.splice(idx, 1);
            }
            if (existingInterface.implementations.length === 0) {
                this._config.interfaces.splice(this._config.interfaces.indexOf(existingInterface), 1);
            }
        }
        return this;
    };
    ClientConfigBuilder.prototype.addUriRedirect = function (from, to) {
        var fromSanitized = core_js_1.Uri.from(from);
        var toSanitized = core_js_1.Uri.from(to);
        var existingRedirect = this._config.redirects.find(function (x) {
            return core_js_1.Uri.equals(x.from, fromSanitized);
        });
        if (existingRedirect) {
            existingRedirect.to = toSanitized;
        }
        else {
            this._config.redirects.push({
                from: fromSanitized,
                to: toSanitized,
            });
        }
        return this;
    };
    ClientConfigBuilder.prototype.removeUriRedirect = function (from) {
        var fromSanitized = core_js_1.Uri.from(from);
        var idx = this._config.redirects.findIndex(function (x) {
            return core_js_1.Uri.equals(x.from, fromSanitized);
        });
        if (idx > -1) {
            this._config.redirects.splice(idx, 1);
        }
        return this;
    };
    ClientConfigBuilder.prototype.setResolver = function (resolver) {
        this._config.resolver = resolver;
        return this;
    };
    ClientConfigBuilder.prototype.build = function () {
        if (!this._config.resolver) {
            throw new Error("No URI resolver provided");
        }
        return this._config;
    };
    ClientConfigBuilder.prototype.buildPartial = function () {
        return this._config;
    };
    return ClientConfigBuilder;
}());
exports.ClientConfigBuilder = ClientConfigBuilder;
//# sourceMappingURL=ClientConfigBuilder.js.map