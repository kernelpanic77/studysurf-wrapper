"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolywrapClient = void 0;
var core_js_1 = require("@polywrap/core-js");
var msgpack_js_1 = require("@polywrap/msgpack-js");
var tracing_js_1 = require("@polywrap/tracing-js");
var client_config_builder_js_1 = require("@polywrap/client-config-builder-js");
var result_1 = require("@polywrap/result");
var PolywrapClient = /** @class */ (function () {
    /**
     * Instantiate a PolywrapClient
     *
     * @param config - a whole or partial client configuration
     * @param options - { noDefaults?: boolean }
     */
    function PolywrapClient(config, options) {
        var _a, _b, _c, _d, _e;
        this._config = {
            redirects: [],
            plugins: [],
            interfaces: [],
            envs: [],
            tracerConfig: {},
        };
        try {
            this.setTracingEnabled(config === null || config === void 0 ? void 0 : config.tracerConfig);
            tracing_js_1.Tracer.startSpan("PolywrapClient: constructor");
            var builder = new client_config_builder_js_1.ClientConfigBuilder();
            if (!(options === null || options === void 0 ? void 0 : options.noDefaults)) {
                builder.addDefaults(config === null || config === void 0 ? void 0 : config.wrapperCache);
            }
            if (config) {
                builder.add(config);
            }
            var sanitizedConfig = builder.build();
            this._config = __assign(__assign({}, sanitizedConfig), { tracerConfig: {
                    consoleEnabled: !!((_a = config === null || config === void 0 ? void 0 : config.tracerConfig) === null || _a === void 0 ? void 0 : _a.consoleEnabled),
                    consoleDetailed: (_b = config === null || config === void 0 ? void 0 : config.tracerConfig) === null || _b === void 0 ? void 0 : _b.consoleDetailed,
                    httpEnabled: !!((_c = config === null || config === void 0 ? void 0 : config.tracerConfig) === null || _c === void 0 ? void 0 : _c.httpEnabled),
                    httpUrl: (_d = config === null || config === void 0 ? void 0 : config.tracerConfig) === null || _d === void 0 ? void 0 : _d.httpUrl,
                    tracingLevel: (_e = config === null || config === void 0 ? void 0 : config.tracerConfig) === null || _e === void 0 ? void 0 : _e.tracingLevel,
                } });
            this._validateConfig();
            tracing_js_1.Tracer.setAttribute("config", this._config);
        }
        catch (error) {
            tracing_js_1.Tracer.recordException(error);
            throw error;
        }
        finally {
            tracing_js_1.Tracer.endSpan();
        }
    }
    /**
     * Returns the configuration used to instantiate the client
     *
     * @returns an immutable Polywrap client config
     */
    PolywrapClient.prototype.getConfig = function () {
        return this._config;
    };
    /**
     * Enable tracing for intricate debugging
     *
     * @remarks
     * Tracing uses the @polywrap/tracing-js package
     *
     * @param tracerConfig - configure options such as the tracing level
     * @returns void
     */
    PolywrapClient.prototype.setTracingEnabled = function (tracerConfig) {
        if ((tracerConfig === null || tracerConfig === void 0 ? void 0 : tracerConfig.consoleEnabled) || (tracerConfig === null || tracerConfig === void 0 ? void 0 : tracerConfig.httpEnabled)) {
            tracing_js_1.Tracer.enableTracing("PolywrapClient", tracerConfig);
        }
        else {
            tracing_js_1.Tracer.disableTracing();
        }
        this._config = __assign(__assign({}, this._config), { tracerConfig: tracerConfig !== null && tracerConfig !== void 0 ? tracerConfig : {} });
    };
    /**
     * returns all uri redirects from the configuration used to instantiate the client
     *
     * @returns an array of uri redirects
     */
    PolywrapClient.prototype.getRedirects = function () {
        return this._config.redirects;
    };
    /**
     * returns all plugin registrations from the configuration used to instantiate the client
     *
     * @returns an array of plugin registrations
     */
    PolywrapClient.prototype.getPlugins = function () {
        return this._config.plugins;
    };
    /**
     * returns a plugin package from the configuration used to instantiate the client
     *
     * @param uri - the uri used to register the plugin
     * @returns a plugin package, or undefined if a plugin is not found at the given uri
     */
    PolywrapClient.prototype.getPluginByUri = function (uri) {
        var _a;
        return (_a = this.getPlugins().find(function (x) { return core_js_1.Uri.equals(x.uri, core_js_1.Uri.from(uri)); })) === null || _a === void 0 ? void 0 : _a.plugin;
    };
    /**
     * returns all interfaces from the configuration used to instantiate the client
     *
     * @returns an array of interfaces and their registered implementations
     */
    PolywrapClient.prototype.getInterfaces = function () {
        return this._config.interfaces;
    };
    /**
     * returns all env registrations from the configuration used to instantiate the client
     *
     * @returns an array of env objects containing wrapper environmental variables
     */
    PolywrapClient.prototype.getEnvs = function () {
        return this._config.envs;
    };
    /**
     * returns the URI resolver from the configuration used to instantiate the client
     *
     * @returns an object that implements the IUriResolver interface
     */
    PolywrapClient.prototype.getUriResolver = function () {
        return this._config.resolver;
    };
    /**
     * returns an env (a set of environmental variables) from the configuration used to instantiate the client
     *
     * @param uri - the URI used to register the env
     * @returns an env, or undefined if an env is not found at the given URI
     */
    PolywrapClient.prototype.getEnvByUri = function (uri) {
        var uriUri = core_js_1.Uri.from(uri);
        return this.getEnvs().find(function (environment) {
            return core_js_1.Uri.equals(environment.uri, uriUri);
        });
    };
    /**
     * returns a package's wrap manifest
     *
     * @param uri - a wrap URI
     * @param options - { noValidate?: boolean }
     * @returns a Result containing the WrapManifest if the request was successful
     */
    PolywrapClient.prototype.getManifest = function (uri, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var load, wrapper, manifest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadWrapper(core_js_1.Uri.from(uri), undefined)];
                    case 1:
                        load = _a.sent();
                        if (!load.ok) {
                            return [2 /*return*/, load];
                        }
                        wrapper = load.value;
                        manifest = wrapper.getManifest(options);
                        return [2 /*return*/, result_1.ResultOk(manifest)];
                }
            });
        });
    };
    /**
     * returns a file contained in a wrap package
     *
     * @param uri - a wrap URI
     * @param options - { path: string; encoding?: "utf-8" | string }
     * @returns a Promise of a Result containing a file if the request was successful
     */
    PolywrapClient.prototype.getFile = function (uri, options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var load, wrapper, result, error;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.loadWrapper(core_js_1.Uri.from(uri), undefined)];
                    case 1:
                        load = _b.sent();
                        if (!load.ok) {
                            return [2 /*return*/, load];
                        }
                        wrapper = load.value;
                        return [4 /*yield*/, wrapper.getFile(options)];
                    case 2:
                        result = _b.sent();
                        if (!result.ok) {
                            error = new core_js_1.WrapError((_a = result.error) === null || _a === void 0 ? void 0 : _a.message, {
                                code: core_js_1.WrapErrorCode.CLIENT_GET_FILE_ERROR,
                                uri: uri.toString(),
                            });
                            return [2 /*return*/, result_1.ResultErr(error)];
                        }
                        return [2 /*return*/, result_1.ResultOk(result.value)];
                }
            });
        });
    };
    /**
     * returns the interface implementations associated with an interface URI
     *  from the configuration used to instantiate the client
     *
     * @param uri - a wrap URI
     * @param options - { applyRedirects?: boolean }
     * @returns a Result containing URI array if the request was successful
     */
    PolywrapClient.prototype.getImplementations = function (uri, options) {
        if (options === void 0) { options = {}; }
        var isUriTypeString = typeof uri === "string";
        var applyRedirects = !!options.applyRedirects;
        var getImplResult = core_js_1.getImplementations(core_js_1.Uri.from(uri), this.getInterfaces(), applyRedirects ? this.getRedirects() : undefined);
        if (!getImplResult.ok) {
            return getImplResult;
        }
        var uris = isUriTypeString
            ? getImplResult.value.map(function (x) { return x.uri; })
            : getImplResult.value;
        return result_1.ResultOk(uris);
    };
    /**
     * Invoke a wrapper using GraphQL query syntax
     *
     * @remarks
     * This method behaves similar to the invoke method and allows parallel requests,
     * but the syntax is more verbose. If the query is successful, data will be returned
     * and the `error` value of the returned object will be undefined. If the query fails,
     * the data property will be undefined and the error property will be populated.
     *
     * @param options - {
     *   // The Wrapper's URI
     *   uri: TUri;
     *
     *   // The GraphQL query to parse and execute, leading to one or more Wrapper invocations.
     *   query: string | QueryDocument;
     *
     *   // Variables referenced within the query string via GraphQL's '$variable' syntax.
     *   variables?: TVariables;
     * }
     *
     * @returns A Promise containing an object with either the data or an error
     */
    PolywrapClient.prototype.query = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var result, typedOptions, uri, query, variables, queryDocument, parseResult, error, queryInvocations, parallelInvocations, _loop_1, this_1, _a, _b, invocationName, invocationResults, data, errors, invocationResults_1, invocationResults_1_1, invocation, error_1, unknownQueryErrorToWrapError;
            var e_1, _c, e_2, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _e.trys.push([0, 2, , 3]);
                        typedOptions = __assign(__assign({}, options), { uri: core_js_1.Uri.from(options.uri) });
                        uri = typedOptions.uri, query = typedOptions.query, variables = typedOptions.variables;
                        queryDocument = typeof query === "string" ? core_js_1.createQueryDocument(query) : query;
                        parseResult = core_js_1.parseQuery(uri, queryDocument, variables);
                        if (!parseResult.ok) {
                            error = new core_js_1.WrapError("Failed to parse query: " + parseResult.error, {
                                code: core_js_1.WrapErrorCode.WRAPPER_ARGS_MALFORMED,
                                uri: options.uri.toString(),
                            });
                            return [2 /*return*/, { errors: [error] }];
                        }
                        queryInvocations = parseResult.value;
                        parallelInvocations = [];
                        _loop_1 = function (invocationName) {
                            parallelInvocations.push(this_1.invoke(__assign(__assign({}, queryInvocations[invocationName]), { uri: queryInvocations[invocationName].uri })).then(function (result) { return ({
                                name: invocationName,
                                result: result,
                            }); }));
                        };
                        this_1 = this;
                        try {
                            for (_a = __values(Object.keys(queryInvocations)), _b = _a.next(); !_b.done; _b = _a.next()) {
                                invocationName = _b.value;
                                _loop_1(invocationName);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        return [4 /*yield*/, Promise.all(parallelInvocations)];
                    case 1:
                        invocationResults = _e.sent();
                        tracing_js_1.Tracer.addEvent("invocationResults", invocationResults);
                        data = {};
                        errors = [];
                        try {
                            for (invocationResults_1 = __values(invocationResults), invocationResults_1_1 = invocationResults_1.next(); !invocationResults_1_1.done; invocationResults_1_1 = invocationResults_1.next()) {
                                invocation = invocationResults_1_1.value;
                                if (invocation.result.ok) {
                                    data[invocation.name] = invocation.result.value;
                                }
                                else {
                                    errors.push(invocation.result.error);
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (invocationResults_1_1 && !invocationResults_1_1.done && (_d = invocationResults_1.return)) _d.call(invocationResults_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        result = {
                            data: data,
                            errors: errors.length === 0 ? undefined : errors,
                        };
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _e.sent();
                        unknownQueryErrorToWrapError = function (e) {
                            var _a;
                            return new core_js_1.WrapError((_a = e) === null || _a === void 0 ? void 0 : _a.message, {
                                code: core_js_1.WrapErrorCode.WRAPPER_INVOKE_FAIL,
                                uri: options.uri.toString(),
                                cause: e,
                            });
                        };
                        if (Array.isArray(error_1)) {
                            result = { errors: error_1.map(unknownQueryErrorToWrapError) };
                        }
                        else {
                            result = { errors: [unknownQueryErrorToWrapError(error_1)] };
                        }
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/, result];
                }
            });
        });
    };
    /**
     * Invoke a wrapper using standard syntax and an instance of the wrapper
     *
     * @param options - {
     *   // The Wrapper's URI
     *   uri: TUri;
     *
     *   // Method to be executed.
     *   method: string;
     *
     *   //Arguments for the method, structured as a map, removing the chance of incorrectly ordering arguments.
     *    args?: Record<string, unknown> | Uint8Array;
     *
     *   // Env variables for the wrapper invocation.
     *    env?: Record<string, unknown>;
     *
     *   resolutionContext?: IUriResolutionContext;
     *
     *   // if true, return value is a msgpack-encoded byte array
     *   encodeResult?: boolean;
     * }
     *
     * @returns A Promise with a Result containing the return value or an error
     */
    PolywrapClient.prototype.invokeWrapper = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var typedOptions, wrapper, invocableResult, value, encoded, decoded, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        typedOptions = __assign(__assign({}, options), { uri: core_js_1.Uri.from(options.uri) });
                        wrapper = options.wrapper;
                        return [4 /*yield*/, wrapper.invoke(typedOptions, this)];
                    case 1:
                        invocableResult = _a.sent();
                        if (!invocableResult.ok) {
                            return [2 /*return*/, result_1.ResultErr(invocableResult.error)];
                        }
                        value = invocableResult.value;
                        if (options.encodeResult && !invocableResult.encoded) {
                            encoded = msgpack_js_1.msgpackEncode(value);
                            return [2 /*return*/, result_1.ResultOk(encoded)];
                        }
                        else if (invocableResult.encoded && !options.encodeResult) {
                            decoded = msgpack_js_1.msgpackDecode(value);
                            return [2 /*return*/, result_1.ResultOk(decoded)];
                        }
                        else {
                            return [2 /*return*/, result_1.ResultOk(value)];
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        error_2 = _a.sent();
                        return [2 /*return*/, result_1.ResultErr(error_2)];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Invoke a wrapper using standard syntax.
     * Unlike `invokeWrapper`, this method automatically retrieves and caches the wrapper.
     *
     * @param options - {
     *   // The Wrapper's URI
     *   uri: TUri;
     *
     *   // Method to be executed.
     *   method: string;
     *
     *   //Arguments for the method, structured as a map, removing the chance of incorrectly ordering arguments.
     *    args?: Record<string, unknown> | Uint8Array;
     *
     *   // Env variables for the wrapper invocation.
     *    env?: Record<string, unknown>;
     *
     *   resolutionContext?: IUriResolutionContext;
     *
     *   // if true, return value is a msgpack-encoded byte array
     *   encodeResult?: boolean;
     * }
     *
     * @returns A Promise with a Result containing the return value or an error
     */
    PolywrapClient.prototype.invoke = function (options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var typedOptions, resolutionContext, loadWrapperResult, wrapper, env, invokeResult, error_3;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        typedOptions = __assign(__assign({}, options), { uri: core_js_1.Uri.from(options.uri) });
                        resolutionContext = (_a = options.resolutionContext) !== null && _a !== void 0 ? _a : new core_js_1.UriResolutionContext();
                        return [4 /*yield*/, this.loadWrapper(typedOptions.uri, resolutionContext)];
                    case 1:
                        loadWrapperResult = _b.sent();
                        if (!loadWrapperResult.ok) {
                            return [2 /*return*/, result_1.ResultErr(loadWrapperResult.error)];
                        }
                        wrapper = loadWrapperResult.value;
                        env = core_js_1.getEnvFromUriHistory(resolutionContext.getResolutionPath(), this);
                        return [4 /*yield*/, this.invokeWrapper(__assign(__assign({ env: env === null || env === void 0 ? void 0 : env.env }, typedOptions), { wrapper: wrapper }))];
                    case 2:
                        invokeResult = _b.sent();
                        if (!invokeResult.ok) {
                            return [2 /*return*/, result_1.ResultErr(invokeResult.error)];
                        }
                        return [2 /*return*/, invokeResult];
                    case 3:
                        error_3 = _b.sent();
                        return [2 /*return*/, result_1.ResultErr(error_3)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Invoke a wrapper at a regular frequency (within ~16ms)
     *
     * @param options - {
     *   // The Wrapper's URI
     *   uri: TUri;
     *
     *   // Method to be executed.
     *   method: string;
     *
     *   //Arguments for the method, structured as a map, removing the chance of incorrectly ordering arguments.
     *    args?: Record<string, unknown> | Uint8Array;
     *
     *   // Env variables for the wrapper invocation.
     *    env?: Record<string, unknown>;
     *
     *   resolutionContext?: IUriResolutionContext;
     *
     *   // if true, return value is a msgpack-encoded byte array
     *   encodeResult?: boolean;
     *
     *   // the frequency at which to perform the invocation
     *   frequency?: {
     *     ms?: number;
     *     sec?: number;
     *     min?: number;
     *     hours?: number;
     *   }
     * }
     *
     * @returns A Promise with a Result containing the return value or an error
     */
    PolywrapClient.prototype.subscribe = function (options) {
        var _a;
        var _b, _c, _d, _e;
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var thisClient = this;
        var typedOptions = __assign(__assign({}, options), { uri: core_js_1.Uri.from(options.uri) });
        var uri = typedOptions.uri, method = typedOptions.method, args = typedOptions.args, freq = typedOptions.frequency;
        // calculate interval between invokes, in milliseconds, 1 min default value
        /* eslint-disable prettier/prettier */
        var frequency;
        if (freq && (freq.ms || freq.sec || freq.min || freq.hours)) {
            frequency =
                ((_b = freq.ms) !== null && _b !== void 0 ? _b : 0) +
                    (((_c = freq.hours) !== null && _c !== void 0 ? _c : 0) * 3600 + ((_d = freq.min) !== null && _d !== void 0 ? _d : 0) * 60 + ((_e = freq.sec) !== null && _e !== void 0 ? _e : 0)) *
                        1000;
        }
        else {
            frequency = 60000;
        }
        /* eslint-enable  prettier/prettier */
        var subscription = (_a = {
                frequency: frequency,
                isActive: false,
                stop: function () {
                    subscription.isActive = false;
                }
            },
            _a[Symbol.asyncIterator] = function () {
                return __asyncGenerator(this, arguments, function _a() {
                    var timeout, readyVals_1, sleep_1, result;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                timeout = undefined;
                                subscription.isActive = true;
                                _b.label = 1;
                            case 1:
                                _b.trys.push([1, , 11, 12]);
                                readyVals_1 = 0;
                                timeout = setInterval(function () {
                                    readyVals_1++;
                                    if (sleep_1) {
                                        sleep_1();
                                        sleep_1 = undefined;
                                    }
                                }, frequency);
                                _b.label = 2;
                            case 2:
                                if (!subscription.isActive) return [3 /*break*/, 10];
                                if (!(readyVals_1 === 0)) return [3 /*break*/, 4];
                                return [4 /*yield*/, __await(new Promise(function (r) { return (sleep_1 = r); }))];
                            case 3:
                                _b.sent();
                                _b.label = 4;
                            case 4:
                                if (!(readyVals_1 > 0)) return [3 /*break*/, 9];
                                if (!subscription.isActive) {
                                    return [3 /*break*/, 9];
                                }
                                return [4 /*yield*/, __await(thisClient.invoke({
                                        uri: uri,
                                        method: method,
                                        args: args,
                                    }))];
                            case 5:
                                result = _b.sent();
                                return [4 /*yield*/, __await(result)];
                            case 6: return [4 /*yield*/, _b.sent()];
                            case 7:
                                _b.sent();
                                _b.label = 8;
                            case 8:
                                readyVals_1--;
                                return [3 /*break*/, 4];
                            case 9: return [3 /*break*/, 2];
                            case 10: return [3 /*break*/, 12];
                            case 11:
                                if (timeout) {
                                    clearInterval(timeout);
                                }
                                subscription.isActive = false;
                                return [7 /*endfinally*/];
                            case 12: return [2 /*return*/];
                        }
                    });
                });
            },
            _a);
        return subscription;
    };
    /**
     * Resolve a URI to a wrap package, a wrapper, or a uri
     *
     * @param options - { uri: TUri; resolutionContext?: IUriResolutionContext }
     * @returns A Promise with a Result containing either a wrap package, a wrapper, or a URI if successful
     */
    PolywrapClient.prototype.tryResolveUri = function (options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var uri, uriResolver, resolutionContext, response;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        uri = core_js_1.Uri.from(options.uri);
                        uriResolver = this.getUriResolver();
                        resolutionContext = (_a = options.resolutionContext) !== null && _a !== void 0 ? _a : new core_js_1.UriResolutionContext();
                        return [4 /*yield*/, uriResolver.tryResolveUri(uri, this, resolutionContext)];
                    case 1:
                        response = _b.sent();
                        if (options.resolutionContext) {
                            tracing_js_1.Tracer.setAttribute("label", core_js_1.buildCleanUriHistory(options.resolutionContext.getHistory()), tracing_js_1.TracingLevel.High);
                        }
                        return [2 /*return*/, response];
                }
            });
        });
    };
    /**
     * Resolve a URI to a wrap package or wrapper.
     * If the URI resolves to wrap package, load the wrapper.
     *
     * @remarks
     * Unlike other methods, `loadWrapper` does not accept a string URI.
     * You can create a Uri (from the `@polywrap/core-js` package) using `Uri.from("wrap://...")`
     *
     * @param uri: the Uri to resolve
     * @param resolutionContext? a resolution context
     * @param options - { noValidate?: boolean }
     * @returns A Promise with a Result containing either a wrapper if successful
     */
    PolywrapClient.prototype.loadWrapper = function (uri, resolutionContext, options) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var result, history_1, error, uriPackageOrWrapper, message, history_2, error, result_2, error;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        tracing_js_1.Tracer.setAttribute("label", "Wrapper loaded: " + uri, tracing_js_1.TracingLevel.High);
                        if (!resolutionContext) {
                            resolutionContext = new core_js_1.UriResolutionContext();
                        }
                        return [4 /*yield*/, this.tryResolveUri({
                                uri: uri,
                                resolutionContext: resolutionContext,
                            })];
                    case 1:
                        result = _b.sent();
                        if (!result.ok) {
                            history_1 = core_js_1.buildCleanUriHistory(resolutionContext.getHistory());
                            error = void 0;
                            if (result.error) {
                                error = new core_js_1.WrapError("A URI Resolver returned an error.", {
                                    code: core_js_1.WrapErrorCode.URI_RESOLVER_ERROR,
                                    uri: uri.uri,
                                    resolutionStack: history_1,
                                    cause: result.error,
                                });
                            }
                            else {
                                error = new core_js_1.WrapError("Error resolving URI", {
                                    code: core_js_1.WrapErrorCode.URI_RESOLUTION_ERROR,
                                    uri: uri.uri,
                                    resolutionStack: history_1,
                                });
                            }
                            return [2 /*return*/, result_1.ResultErr(error)];
                        }
                        uriPackageOrWrapper = result.value;
                        if (uriPackageOrWrapper.type === "uri") {
                            message = "Unable to find URI " + uriPackageOrWrapper.uri.uri + ".";
                            history_2 = core_js_1.buildCleanUriHistory(resolutionContext.getHistory());
                            error = new core_js_1.WrapError(message, {
                                code: core_js_1.WrapErrorCode.URI_NOT_FOUND,
                                uri: uri.uri,
                                resolutionStack: history_2,
                            });
                            return [2 /*return*/, result_1.ResultErr(error)];
                        }
                        if (!(uriPackageOrWrapper.type === "package")) return [3 /*break*/, 3];
                        return [4 /*yield*/, uriPackageOrWrapper.package.createWrapper(options)];
                    case 2:
                        result_2 = _b.sent();
                        if (!result_2.ok) {
                            error = new core_js_1.WrapError((_a = result_2.error) === null || _a === void 0 ? void 0 : _a.message, {
                                code: core_js_1.WrapErrorCode.CLIENT_LOAD_WRAPPER_ERROR,
                                uri: uri.uri,
                                cause: result_2.error,
                            });
                            return [2 /*return*/, result_1.ResultErr(error)];
                        }
                        return [2 /*return*/, result_1.ResultOk(result_2.value)];
                    case 3: return [2 /*return*/, result_1.ResultOk(uriPackageOrWrapper.wrapper)];
                }
            });
        });
    };
    PolywrapClient.prototype._validateConfig = function () {
        // Require plugins to use non-interface URIs
        var pluginUris = this.getPlugins().map(function (x) { return x.uri.uri; });
        var interfaceUris = this.getInterfaces().map(function (x) { return x.interface.uri; });
        var pluginsWithInterfaceUris = pluginUris.filter(function (plugin) {
            return interfaceUris.includes(plugin);
        });
        if (pluginsWithInterfaceUris.length) {
            throw Error("Plugins can't use interfaces for their URI. Invalid plugins: " + pluginsWithInterfaceUris);
        }
    };
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getRedirects")
    ], PolywrapClient.prototype, "getRedirects", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getPlugins")
    ], PolywrapClient.prototype, "getPlugins", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getPlugin")
    ], PolywrapClient.prototype, "getPluginByUri", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getInterfaces")
    ], PolywrapClient.prototype, "getInterfaces", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getEnvs")
    ], PolywrapClient.prototype, "getEnvs", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getUriResolver")
    ], PolywrapClient.prototype, "getUriResolver", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getEnvByUri")
    ], PolywrapClient.prototype, "getEnvByUri", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getManifest")
    ], PolywrapClient.prototype, "getManifest", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getFile")
    ], PolywrapClient.prototype, "getFile", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: getImplementations")
    ], PolywrapClient.prototype, "getImplementations", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: query", tracing_js_1.TracingLevel.High)
    ], PolywrapClient.prototype, "query", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: invokeWrapper")
    ], PolywrapClient.prototype, "invokeWrapper", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: invoke")
    ], PolywrapClient.prototype, "invoke", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: subscribe")
    ], PolywrapClient.prototype, "subscribe", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: tryResolveUri", tracing_js_1.TracingLevel.High)
    ], PolywrapClient.prototype, "tryResolveUri", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: loadWrapper", tracing_js_1.TracingLevel.High)
    ], PolywrapClient.prototype, "loadWrapper", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PolywrapClient: validateConfig")
    ], PolywrapClient.prototype, "_validateConfig", null);
    return PolywrapClient;
}());
exports.PolywrapClient = PolywrapClient;
//# sourceMappingURL=PolywrapClient.js.map