"use strict";
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable prefer-const */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPolywrapClient = void 0;
var PolywrapClient_1 = require("./PolywrapClient");
var pluginConfigs_1 = require("./pluginConfigs");
var tracing_js_1 = require("@polywrap/tracing-js");
var client_config_builder_js_1 = require("@polywrap/client-config-builder-js");
exports.createPolywrapClient = tracing_js_1.Tracer.traceFunc("createPolywrapClient", function (pluginConfigs, config) { return __awaiter(void 0, void 0, void 0, function () {
    var plugins, _a, _b, plugin, pluginModule, err_1, pluginFactory, pluginPackage, e_1_1, builder, plugins_1, plugins_1_1, plugin, sanitizedConfig;
    var e_1, _c, e_2, _d;
    return __generator(this, function (_e) {
        switch (_e.label) {
            case 0:
                plugins = [];
                _e.label = 1;
            case 1:
                _e.trys.push([1, 9, 10, 11]);
                _a = __values(Object.keys(pluginConfigs)), _b = _a.next();
                _e.label = 2;
            case 2:
                if (!!_b.done) return [3 /*break*/, 8];
                plugin = _b.value;
                pluginModule = void 0;
                if (!pluginConfigs_1.modules[plugin]) {
                    throw Error("Requested plugin \"" + plugin + "\" is not a supported createPolywrapClient plugin.");
                }
                _e.label = 3;
            case 3:
                _e.trys.push([3, 5, , 6]);
                return [4 /*yield*/, Promise.resolve().then(function () { return __importStar(require(pluginConfigs_1.modules[plugin])); })];
            case 4:
                pluginModule = _e.sent();
                return [3 /*break*/, 6];
            case 5:
                err_1 = _e.sent();
                throw Error("Failed to import plugin module. Please install the package \"" + pluginConfigs_1.modules[plugin] + "\".\n" +
                    ("Error: " + err_1.message));
            case 6:
                pluginFactory = pluginModule["plugin"];
                if (!pluginFactory) {
                    throw Error("Plugin module \"" + pluginConfigs_1.modules[plugin] + "\" is missing the \"plugin: PluginFactory\" export.");
                }
                if (typeof pluginFactory !== "function") {
                    throw Error("The \"plugin: PluginFactory\" export must be a function. Found in module \"" + pluginConfigs_1.modules[plugin] + "\".");
                }
                pluginPackage = pluginFactory(pluginConfigs[plugin]);
                if (!pluginPackage ||
                    typeof pluginPackage !== "object" ||
                    !pluginPackage.factory ||
                    !pluginPackage.manifest) {
                    throw Error("Plugin package is malformed. Expected object with keys \"factory\" and \"manifest\". Got: " + pluginPackage);
                }
                plugins.push({
                    uri: pluginConfigs_1.uris[plugin],
                    plugin: pluginPackage,
                });
                _e.label = 7;
            case 7:
                _b = _a.next();
                return [3 /*break*/, 2];
            case 8: return [3 /*break*/, 11];
            case 9:
                e_1_1 = _e.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 11];
            case 10:
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 11:
                if (config) {
                    builder = new client_config_builder_js_1.ClientConfigBuilder().add(config);
                    try {
                        for (plugins_1 = __values(plugins), plugins_1_1 = plugins_1.next(); !plugins_1_1.done; plugins_1_1 = plugins_1.next()) {
                            plugin = plugins_1_1.value;
                            builder.addPlugin(plugin.uri, plugin.plugin);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (plugins_1_1 && !plugins_1_1.done && (_d = plugins_1.return)) _d.call(plugins_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    sanitizedConfig = builder.buildPartial();
                    return [2 /*return*/, new PolywrapClient_1.PolywrapClient(sanitizedConfig)];
                }
                else {
                    return [2 /*return*/, new PolywrapClient_1.PolywrapClient({ plugins: plugins })];
                }
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=createPolywrapClient.js.map