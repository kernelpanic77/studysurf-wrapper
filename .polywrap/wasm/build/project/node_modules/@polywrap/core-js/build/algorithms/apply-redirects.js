"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyRedirects = void 0;
var tracing_js_1 = require("@polywrap/tracing-js");
var result_1 = require("@polywrap/result");
exports.applyRedirects = tracing_js_1.Tracer.traceFunc("core: applyRedirects", function (uri, redirects) {
    var e_1, _a;
    // Keep track of past redirects (from -> to) to find the final uri
    var redirectFromToMap = {};
    var createError = function (message) {
        var error = Error(message + "\nResolution Stack: " + JSON.stringify(redirectFromToMap, null, 2));
        return result_1.ResultErr(error);
    };
    try {
        for (var redirects_1 = __values(redirects), redirects_1_1 = redirects_1.next(); !redirects_1_1.done; redirects_1_1 = redirects_1.next()) {
            var redirect = redirects_1_1.value;
            if (!redirect.from) {
                return createError("Redirect missing the from property.\nEncountered while resolving " + uri.uri);
            }
            if (redirectFromToMap[redirect.from.uri]) {
                continue;
            }
            redirectFromToMap[redirect.from.uri] = redirect.to;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (redirects_1_1 && !redirects_1_1.done && (_a = redirects_1.return)) _a.call(redirects_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    var finalUri = uri;
    var visitedUris = {};
    while (redirectFromToMap[finalUri.uri]) {
        visitedUris[finalUri.uri] = true;
        finalUri = redirectFromToMap[finalUri.uri];
        if (visitedUris[finalUri.uri]) {
            return createError("Infinite loop while resolving URI \"" + uri + "\".");
        }
    }
    return result_1.ResultOk(finalUri);
});
//# sourceMappingURL=apply-redirects.js.map