"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildCleanUriHistory = void 0;
var buildCleanUriHistory = function (history, depth) {
    var e_1, _a;
    var cleanHistory = [];
    if (depth != null) {
        depth--;
    }
    if (!history) {
        return cleanHistory;
    }
    try {
        for (var history_1 = __values(history), history_1_1 = history_1.next(); !history_1_1.done; history_1_1 = history_1.next()) {
            var step = history_1_1.value;
            if (step.result.ok) {
                var uriPackageOrWrapper = step.result.value;
                switch (uriPackageOrWrapper.type) {
                    case "uri":
                        if (step.sourceUri.uri === uriPackageOrWrapper.uri.uri) {
                            cleanHistory.push(step.description
                                ? step.sourceUri.uri + " => " + step.description
                                : "" + step.sourceUri.uri);
                        }
                        else {
                            cleanHistory.push(step.description
                                ? step.sourceUri.uri + " => " + step.description + " => uri (" + uriPackageOrWrapper.uri.uri + ")"
                                : step.sourceUri.uri + " => uri (" + uriPackageOrWrapper.uri.uri + ")");
                        }
                        break;
                    case "package":
                        cleanHistory.push(step.description
                            ? step.sourceUri.uri + " => " + step.description + " => package (" + uriPackageOrWrapper.uri.uri + ")"
                            : step.sourceUri.uri + " => package (" + uriPackageOrWrapper.uri.uri + ")");
                        break;
                    case "wrapper":
                        cleanHistory.push(step.description
                            ? step.sourceUri.uri + " => " + step.description + " => wrapper (" + uriPackageOrWrapper.uri.uri + ")"
                            : step.sourceUri.uri + " => wrapper (" + uriPackageOrWrapper.uri.uri + ")");
                        break;
                }
            }
            else {
                if (typeof step.result.error === "string") {
                    cleanHistory.push(step.description
                        ? step.sourceUri.uri + " => " + step.description + " => error " + step.result.error
                        : step.sourceUri.uri + " => error (" + step.result.error + ")");
                }
                else {
                    cleanHistory.push(step.description
                        ? step.sourceUri.uri + " => " + step.description + " => error"
                        : step.sourceUri.uri + " => error");
                }
            }
            if (!step.subHistory ||
                step.subHistory.length === 0 ||
                (depth != null && depth < 0)) {
                continue;
            }
            var subHistory = exports.buildCleanUriHistory(step.subHistory, depth);
            if (subHistory.length > 0) {
                cleanHistory.push(subHistory);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (history_1_1 && !history_1_1.done && (_a = history_1.return)) _a.call(history_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return cleanHistory;
};
exports.buildCleanUriHistory = buildCleanUriHistory;
//# sourceMappingURL=buildCleanUriHistory.js.map