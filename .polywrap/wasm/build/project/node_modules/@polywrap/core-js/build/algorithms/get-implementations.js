"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getImplementations = void 0;
var types_1 = require("../types");
var apply_redirects_1 = require("./apply-redirects");
var tracing_js_1 = require("@polywrap/tracing-js");
var result_1 = require("@polywrap/result");
exports.getImplementations = tracing_js_1.Tracer.traceFunc("core: getImplementations", function (wrapperInterfaceUri, interfaces, redirects) {
    var result = [];
    var addUniqueResult = function (uri) {
        // If the URI hasn't been added already
        if (result.findIndex(function (i) { return types_1.Uri.equals(i, uri); }) === -1) {
            result.push(uri);
        }
    };
    var addAllImplementationsFromImplementationsArray = function (implementationsArray, wrapperInterfaceUri) {
        var e_1, _a, e_2, _b;
        try {
            for (var implementationsArray_1 = __values(implementationsArray), implementationsArray_1_1 = implementationsArray_1.next(); !implementationsArray_1_1.done; implementationsArray_1_1 = implementationsArray_1.next()) {
                var interfaceImplementations = implementationsArray_1_1.value;
                var fullyResolvedUri = void 0;
                if (redirects) {
                    var redirectsResult = apply_redirects_1.applyRedirects(interfaceImplementations.interface, redirects);
                    if (!redirectsResult.ok) {
                        var error = new types_1.WrapError("Failed to resolve redirects", {
                            uri: interfaceImplementations.interface.uri,
                            code: types_1.WrapErrorCode.CLIENT_GET_IMPLEMENTATIONS_ERROR,
                            cause: redirectsResult.error,
                        });
                        return result_1.ResultErr(error);
                    }
                    fullyResolvedUri = redirectsResult.value;
                }
                else {
                    fullyResolvedUri = interfaceImplementations.interface;
                }
                if (types_1.Uri.equals(fullyResolvedUri, wrapperInterfaceUri)) {
                    try {
                        for (var _c = (e_2 = void 0, __values(interfaceImplementations.implementations)), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var implementation = _d.value;
                            addUniqueResult(implementation);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (implementationsArray_1_1 && !implementationsArray_1_1.done && (_a = implementationsArray_1.return)) _a.call(implementationsArray_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result_1.ResultOk(undefined);
    };
    var finalUri = wrapperInterfaceUri;
    if (redirects) {
        var redirectsResult = apply_redirects_1.applyRedirects(wrapperInterfaceUri, redirects);
        if (!redirectsResult.ok) {
            var error = new types_1.WrapError("Failed to resolve redirects", {
                uri: wrapperInterfaceUri.uri,
                code: types_1.WrapErrorCode.CLIENT_GET_IMPLEMENTATIONS_ERROR,
                cause: redirectsResult.error,
            });
            return result_1.ResultErr(error);
        }
        finalUri = redirectsResult.value;
    }
    var addAllImp = addAllImplementationsFromImplementationsArray(interfaces, finalUri);
    return addAllImp.ok ? result_1.ResultOk(result) : addAllImp;
});
//# sourceMappingURL=get-implementations.js.map