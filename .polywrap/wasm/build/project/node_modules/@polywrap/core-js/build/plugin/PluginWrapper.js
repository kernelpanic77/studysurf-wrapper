"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginWrapper = void 0;
var _1 = require("../.");
var getErrorSource_1 = require("./getErrorSource");
var msgpack_js_1 = require("@polywrap/msgpack-js");
var tracing_js_1 = require("@polywrap/tracing-js");
var result_1 = require("@polywrap/result");
var PluginWrapper = /** @class */ (function () {
    function PluginWrapper(_plugin) {
        this._plugin = _plugin;
        tracing_js_1.Tracer.startSpan("PluginWrapper: constructor");
        tracing_js_1.Tracer.setAttribute("args", {
            plugin: this._plugin,
        });
        tracing_js_1.Tracer.endSpan();
    }
    PluginWrapper.prototype.getFile = function (_) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, result_1.ResultErr(Error("client.getFile(...) is not implemented for Plugins."))];
            });
        });
    };
    PluginWrapper.prototype.getManifest = function (_) {
        return this._plugin.manifest;
    };
    PluginWrapper.prototype.invoke = function (options, client) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function () {
            var method, args, module, error, error, jsArgs, result_2, error, result, data, code, reason, error;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        tracing_js_1.Tracer.setAttribute("label", "Plugin Wrapper invoked: " + options.uri.uri + ", with method " + options.method, tracing_js_1.TracingLevel.High);
                        method = options.method;
                        args = options.args || {};
                        module = this._getInstance();
                        if (!module) {
                            error = new _1.WrapError("PluginWrapper: module not found.", {
                                code: _1.WrapErrorCode.WRAPPER_READ_FAIL,
                                uri: options.uri.uri,
                                method: method,
                            });
                            return [2 /*return*/, result_1.ResultErr(error)];
                        }
                        if (!module.getMethod(method)) {
                            error = new _1.WrapError("Plugin missing method \"" + method + "\"", {
                                code: _1.WrapErrorCode.WRAPPER_METHOD_NOT_FOUND,
                                uri: options.uri.uri,
                                method: method,
                            });
                            return [2 /*return*/, result_1.ResultErr(error)];
                        }
                        // Set the module's environment
                        return [4 /*yield*/, module.setEnv(options.env || {})];
                    case 1:
                        // Set the module's environment
                        _e.sent();
                        // If the args are a msgpack buffer, deserialize it
                        if (_1.isBuffer(args)) {
                            result_2 = msgpack_js_1.msgpackDecode(args);
                            tracing_js_1.Tracer.addEvent("msgpack-decoded", result_2);
                            if (typeof result_2 !== "object") {
                                error = new _1.WrapError("Decoded MsgPack args did not result in an object.\nResult: " + result_2, {
                                    code: _1.WrapErrorCode.WRAPPER_ARGS_MALFORMED,
                                    uri: options.uri.uri,
                                    method: method,
                                    args: JSON.stringify(args),
                                });
                                return [2 /*return*/, result_1.ResultErr(error)];
                            }
                            jsArgs = result_2;
                        }
                        else {
                            jsArgs = args;
                        }
                        return [4 /*yield*/, module._wrap_invoke(method, jsArgs, client)];
                    case 2:
                        result = _e.sent();
                        if (result.ok) {
                            data = result.value;
                            tracing_js_1.Tracer.addEvent("Result", data);
                            return [2 /*return*/, __assign(__assign({}, result_1.ResultOk(data)), { encoded: false })];
                        }
                        else {
                            code = (_b = (_a = result.error) === null || _a === void 0 ? void 0 : _a.code) !== null && _b !== void 0 ? _b : _1.WrapErrorCode.WRAPPER_INVOKE_FAIL;
                            reason = (_d = (_c = result.error) === null || _c === void 0 ? void 0 : _c.message) !== null && _d !== void 0 ? _d : "Failed to invoke method \"" + method + "\"";
                            error = new _1.WrapError(reason, {
                                code: code,
                                uri: options.uri.toString(),
                                method: method,
                                args: JSON.stringify(jsArgs, null, 2),
                                source: getErrorSource_1.getErrorSource(result.error),
                            });
                            return [2 /*return*/, result_1.ResultErr(error)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    PluginWrapper.prototype._getInstance = function () {
        this._instance || (this._instance = this._plugin.factory());
        return this._instance;
    };
    __decorate([
        tracing_js_1.Tracer.traceMethod("PluginWrapper: getManifest")
    ], PluginWrapper.prototype, "getManifest", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("PluginWrapper: invoke", tracing_js_1.TracingLevel.High)
    ], PluginWrapper.prototype, "invoke", null);
    return PluginWrapper;
}());
exports.PluginWrapper = PluginWrapper;
//# sourceMappingURL=PluginWrapper.js.map