import { Client, MaybeAsync } from ".";
import { WrapManifest } from "@polywrap/wrap-manifest-types-js";
import { Result } from "@polywrap/result";
/**
 * Invocable plugin method.
 *
 * @param args Arguments for the method, structured as
 * a map, removing the chance of incorrectly ordering arguments.
 * @param client The client instance requesting this invocation.
 * This client will be used for any sub-invokes that occur.
 */
export declare type PluginMethod<TArgs extends Record<string, unknown> = Record<string, unknown>, TResult = unknown> = (args: TArgs, client: Client) => MaybeAsync<TResult>;
export declare abstract class PluginModule<TConfig, TEnv extends Record<string, unknown> = Record<string, unknown>> {
    private _env;
    private _config;
    constructor(config: TConfig);
    get env(): TEnv;
    get config(): TConfig;
    setEnv(env: TEnv): void;
    _wrap_invoke<TArgs extends Record<string, unknown> = Record<string, unknown>, TResult = unknown>(method: string, args: TArgs, client: Client): Promise<Result<TResult, Error>>;
    getMethod<TArgs extends Record<string, unknown> = Record<string, unknown>, TResult = unknown>(method: string): PluginMethod<TArgs, TResult> | undefined;
}
export declare type PluginPackage<TConfig> = {
    factory: () => PluginModule<TConfig>;
    manifest: WrapManifest;
};
export declare type PluginFactory<TConfig> = (config: TConfig) => PluginPackage<TConfig>;
