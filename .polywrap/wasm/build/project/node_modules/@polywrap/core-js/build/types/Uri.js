"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Uri = void 0;
var tracing_js_1 = require("@polywrap/tracing-js");
var result_1 = require("@polywrap/result");
/**
 * A Polywrap URI. Some examples of valid URIs are:
 * wrap://ipfs/QmHASH
 * wrap://ens/sub.dimain.eth
 * wrap://fs/directory/file.txt
 * wrap://uns/domain.crypto
 *
 * Breaking down the various parts of the URI, as it applies
 * to [the URI standard](https://tools.ietf.org/html/rfc3986#section-3):
 * **wrap://** - URI Scheme: differentiates Polywrap URIs.
 * **ipfs/** - URI Authority: allows the Polywrap URI resolution algorithm to determine an authoritative URI resolver.
 * **sub.domain.eth** - URI Path: tells the Authority where the Wrapper resides.
 */
var Uri = /** @class */ (function () {
    function Uri(uri) {
        var result = Uri.parseUri(uri);
        if (!result.ok) {
            throw result.error;
        }
        this._config = result.value;
    }
    Object.defineProperty(Uri.prototype, "authority", {
        get: function () {
            return this._config.authority;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Uri.prototype, "path", {
        get: function () {
            return this._config.path;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Uri.prototype, "uri", {
        get: function () {
            return this._config.uri;
        },
        enumerable: false,
        configurable: true
    });
    Uri.equals = function (a, b) {
        return a.uri === b.uri;
    };
    Uri.isUri = function (value) {
        return typeof value === "object" && value.uri !== undefined;
    };
    Uri.isValidUri = function (uri, parsed) {
        var result = Uri.parseUri(uri);
        if (parsed && result.ok) {
            Object.assign(parsed, result.value);
        }
        return result.ok;
    };
    Uri.prototype.toString = function () {
        return this._config.uri;
    };
    Uri.prototype.toJSON = function () {
        return this._config.uri;
    };
    Uri.parseUri = function (uri) {
        if (!uri) {
            return result_1.ResultErr(Error("The provided URI is empty"));
        }
        var processed = uri;
        // Trim preceding '/' characters
        while (processed[0] === "/") {
            processed = processed.substring(1);
        }
        // Check for the wrap:// scheme, add if it isn't there
        var wrapSchemeIdx = processed.indexOf("wrap://");
        // If it's missing the wrap:// scheme, add it
        if (wrapSchemeIdx === -1) {
            processed = "wrap://" + processed;
        }
        // If the wrap:// is not in the beginning, return an error
        if (wrapSchemeIdx > -1 && wrapSchemeIdx !== 0) {
            return result_1.ResultErr(Error("The wrap:// scheme must be at the beginning of the URI string"));
        }
        // Extract the authoriy & path
        var result = processed.match(/wrap:\/\/([a-z][a-z0-9-_]+)\/(.*)/);
        // Remove all empty strings
        if (result) {
            result = result.filter(function (str) { return !!str; });
        }
        if (!result || result.length !== 3) {
            return result_1.ResultErr(Error("URI is malformed, here are some examples of valid URIs:\n" +
                "wrap://ipfs/QmHASH\n" +
                "wrap://ens/domain.eth\n" +
                "ens/domain.eth\n\n" +
                ("Invalid URI Received: " + uri)));
        }
        return result_1.ResultOk({
            uri: processed,
            authority: result[1],
            path: result[2],
        });
    };
    Uri.from = function (uri) {
        if (typeof uri === "string") {
            return new Uri(uri);
        }
        else if (Uri.isUri(uri)) {
            return uri;
        }
        else {
            throw Error("Unknown uri type, cannot convert. " + JSON.stringify(uri));
        }
    };
    __decorate([
        tracing_js_1.Tracer.traceMethod("Uri: parseUri")
    ], Uri, "parseUri", null);
    __decorate([
        tracing_js_1.Tracer.traceMethod("Uri: from")
    ], Uri, "from", null);
    return Uri;
}());
exports.Uri = Uri;
//# sourceMappingURL=Uri.js.map