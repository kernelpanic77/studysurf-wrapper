"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UriResolutionContext = void 0;
var types_1 = require("../types");
var UriResolutionContext = /** @class */ (function () {
    function UriResolutionContext(resolvingUriMap, resolutionPathOrHistory) {
        this.resolvingUriMap = resolvingUriMap !== null && resolvingUriMap !== void 0 ? resolvingUriMap : new Map();
        if (Array.isArray(resolutionPathOrHistory)) {
            this.resolutionPath = new Set();
            this.history = resolutionPathOrHistory;
        }
        else if (resolutionPathOrHistory instanceof Set) {
            this.resolutionPath = resolutionPathOrHistory;
            this.history = [];
        }
        else {
            this.resolutionPath = new Set();
            this.history = [];
        }
    }
    UriResolutionContext.prototype.isResolving = function (uri) {
        return !!this.resolvingUriMap.get(uri.toString());
    };
    UriResolutionContext.prototype.startResolving = function (uri) {
        this.resolvingUriMap.set(uri.toString(), true);
        this.resolutionPath.add(uri.toString());
    };
    UriResolutionContext.prototype.stopResolving = function (uri) {
        this.resolvingUriMap.delete(uri.toString());
    };
    UriResolutionContext.prototype.trackStep = function (step) {
        this.history.push(step);
    };
    UriResolutionContext.prototype.getHistory = function () {
        return this.history;
    };
    UriResolutionContext.prototype.getResolutionPath = function () {
        return __spread(this.resolutionPath).map(function (x) { return new types_1.Uri(x); });
    };
    UriResolutionContext.prototype.createSubHistoryContext = function () {
        return new UriResolutionContext(this.resolvingUriMap, this.resolutionPath);
    };
    UriResolutionContext.prototype.createSubContext = function () {
        return new UriResolutionContext(this.resolvingUriMap, this.history);
    };
    return UriResolutionContext;
}());
exports.UriResolutionContext = UriResolutionContext;
//# sourceMappingURL=UriResolutionContext.js.map