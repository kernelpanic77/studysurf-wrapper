"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.plugin = exports.ensResolverPlugin = exports.EnsResolverPlugin = void 0;
var wrap_1 = require("./wrap");
var ethers_1 = require("ethers");
var basex_1 = require("@ethersproject/basex");
var address_1 = require("@ethersproject/address");
var EnsResolverPlugin = /** @class */ (function (_super) {
    __extends(EnsResolverPlugin, _super);
    function EnsResolverPlugin(config) {
        var _this = _super.call(this, config) || this;
        // Sanitize address
        if (_this.config.addresses) {
            _this._setAddresses(_this.config.addresses);
        }
        return _this;
    }
    EnsResolverPlugin.prototype.tryResolveUri = function (args, client) {
        return __awaiter(this, void 0, void 0, function () {
            var cid, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (args.authority !== "ens") {
                            return [2 /*return*/, null];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.ensToCID(args.path, client)];
                    case 2:
                        cid = _a.sent();
                        if (!cid) {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/, {
                                uri: "ipfs/" + cid,
                                manifest: null,
                            }];
                    case 3:
                        e_1 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4: 
                    // Nothing found
                    return [2 /*return*/, { uri: null, manifest: null }];
                }
            });
        });
    };
    EnsResolverPlugin.prototype.getFile = function (_args, _client) {
        return null;
    };
    EnsResolverPlugin.prototype.ensToCID = function (domain, client) {
        return __awaiter(this, void 0, void 0, function () {
            var ensAbi, resolverAbi, ensAddress, network, hasNetwork, domainNode, callContractView, resolverAddress, hash, e_2, err_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ensAbi = {
                            resolver: "function resolver(bytes32 node) external view returns (address)",
                        };
                        resolverAbi = {
                            contenthash: "function contenthash(bytes32 nodehash) view returns (bytes)",
                            content: "function content(bytes32 nodehash) view returns (bytes32)",
                        };
                        ensAddress = EnsResolverPlugin.defaultAddress;
                        // Remove the ENS URI scheme & authority
                        domain = domain.replace("wrap://", "");
                        domain = domain.replace("ens/", "");
                        network = "mainnet";
                        hasNetwork = /^[A-Za-z0-9]+\//i.exec(domain);
                        if (hasNetwork) {
                            network = domain.substring(0, domain.indexOf("/"));
                            // Remove the network from the domain URI's path
                            domain = domain.replace(network + "/", "");
                            // Lowercase only
                            network = network.toLowerCase();
                            // Check if we have a custom address configured
                            // for this network
                            if (this.config.addresses && this.config.addresses[network]) {
                                ensAddress = this.config.addresses[network];
                            }
                        }
                        domainNode = ethers_1.ethers.utils.namehash(domain);
                        callContractView = function (address, method, args, networkNameOrChainId) { return __awaiter(_this, void 0, void 0, function () {
                            var result;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, wrap_1.Ethereum_Module.callContractView({
                                            address: address,
                                            method: method,
                                            args: args,
                                            connection: networkNameOrChainId
                                                ? {
                                                    networkNameOrChainId: networkNameOrChainId,
                                                }
                                                : undefined,
                                        }, client)];
                                    case 1:
                                        result = _a.sent();
                                        if (!result.ok) {
                                            throw result.error;
                                        }
                                        if (result.value) {
                                            if (typeof result.value !== "string") {
                                                throw Error("Malformed data returned from Ethereum.callContractView: " + result.value);
                                            }
                                            return [2 /*return*/, result.value];
                                        }
                                        throw Error("Ethereum.callContractView returned nothing.\nData: \nError: ");
                                }
                            });
                        }); };
                        return [4 /*yield*/, callContractView(ensAddress, ensAbi.resolver, [domainNode], network)];
                    case 1:
                        resolverAddress = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 9]);
                        return [4 /*yield*/, callContractView(resolverAddress, resolverAbi.contenthash, [domainNode], network)];
                    case 3:
                        hash = _a.sent();
                        return [3 /*break*/, 9];
                    case 4:
                        e_2 = _a.sent();
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, callContractView(resolverAddress, resolverAbi.content, [domainNode], network)];
                    case 6:
                        // Fallback, contenthash doesn't exist, try content
                        hash = _a.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        err_1 = _a.sent();
                        // The resolver contract is unknown...
                        throw Error("Incompatible resolver ABI at address " + resolverAddress);
                    case 8: return [3 /*break*/, 9];
                    case 9:
                        if (hash === "0x") {
                            return [2 /*return*/, ""];
                        }
                        if (hash.substring(0, 10) === "0xe3010170" &&
                            ethers_1.ethers.utils.isHexString(hash, 38)) {
                            return [2 /*return*/, basex_1.Base58.encode(ethers_1.ethers.utils.hexDataSlice(hash, 4))];
                        }
                        else {
                            throw Error("Unknown CID format, CID hash: " + hash);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    EnsResolverPlugin.prototype._setAddresses = function (addresses) {
        var e_3, _a;
        this.config.addresses = {};
        try {
            for (var _b = __values(Object.keys(addresses)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var network = _c.value;
                this.config.addresses[network] = address_1.getAddress(addresses[network]);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    EnsResolverPlugin.defaultAddress = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
    return EnsResolverPlugin;
}(wrap_1.Module));
exports.EnsResolverPlugin = EnsResolverPlugin;
var ensResolverPlugin = function (config) {
    return {
        factory: function () { return new EnsResolverPlugin(config); },
        manifest: wrap_1.manifest,
    };
};
exports.ensResolverPlugin = ensResolverPlugin;
exports.plugin = exports.ensResolverPlugin;
//# sourceMappingURL=index.js.map