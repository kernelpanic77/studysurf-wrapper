import * as Types from "./types";
import { Client, PluginModule, MaybeAsync } from "@polywrap/core-js";
export interface Args_readFile {
    path: Types.String;
}
export interface Args_readFileAsString {
    path: Types.String;
    encoding?: Types.FileSystem_Encoding | null;
}
export interface Args_exists {
    path: Types.String;
}
export interface Args_writeFile {
    path: Types.String;
    data: Types.Bytes;
}
export interface Args_mkdir {
    path: Types.String;
    recursive?: Types.Boolean | null;
}
export interface Args_rm {
    path: Types.String;
    recursive?: Types.Boolean | null;
    force?: Types.Boolean | null;
}
export interface Args_rmdir {
    path: Types.String;
}
export declare abstract class Module<TConfig> extends PluginModule<TConfig> {
    abstract readFile(args: Args_readFile, client: Client): MaybeAsync<Types.Bytes>;
    abstract readFileAsString(args: Args_readFileAsString, client: Client): MaybeAsync<Types.String>;
    abstract exists(args: Args_exists, client: Client): MaybeAsync<Types.Boolean>;
    abstract writeFile(args: Args_writeFile, client: Client): MaybeAsync<Types.Boolean | null>;
    abstract mkdir(args: Args_mkdir, client: Client): MaybeAsync<Types.Boolean | null>;
    abstract rm(args: Args_rm, client: Client): MaybeAsync<Types.Boolean | null>;
    abstract rmdir(args: Args_rmdir, client: Client): MaybeAsync<Types.Boolean | null>;
}
