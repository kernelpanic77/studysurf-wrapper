"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execAbortable = void 0;
var abort_controller_1 = __importDefault(require("abort-controller"));
var abortErrorMessage = "The user aborted a request.";
// Returns a promise, provider and callback that can be used to cancel the request
var execAbortable = function (operation, ipfs, provider, timeout, func) {
    var controller = new abort_controller_1.default();
    var error = undefined;
    // If timer is not 0 then set a timeout to abort the execution
    var timer = timeout
        ? setTimeout(function () {
            error = buildExecError(operation, provider, timeout, new Error("Timeout has been reached"));
            controller.abort();
        }, timeout)
        : undefined;
    var promise = new Promise(function (resolve) {
        func(ipfs, provider, {
            signal: controller.signal,
        }).then(function (result) {
            // Clear timeout if exists
            timer && clearTimeout(timer);
            if (result === undefined && !error) {
                error = buildExecError(operation, provider, timeout, new Error("The provider returned an empty response"));
            }
            resolve([error, result]);
        }, function (e) {
            // Clear timeout if exists
            timer && clearTimeout(timer);
            if (!e.message || e.message !== abortErrorMessage) {
                error = buildExecError(operation, provider, timeout, e);
            }
            resolve([error, undefined]);
        });
    });
    return {
        promise: promise,
        provider: provider,
        abort: function () {
            controller.abort();
            timer && clearTimeout(timer);
        },
    };
};
exports.execAbortable = execAbortable;
var buildExecError = function (operation, provider, timeout, error) {
    return new Error("An error occurred\nOperation: " + operation + "\nProvider: " + provider + "\nTimeout: " + timeout + "\nError: " + JSON.stringify(error, Object.getOwnPropertyNames(error)));
};
//# sourceMappingURL=abortable.js.map