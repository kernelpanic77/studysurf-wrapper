"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execFallbacks = void 0;
var abortable_1 = require("./abortable");
var ipfs_http_client_lite_1 = __importDefault(require("@polywrap/ipfs-http-client-lite"));
var execFallbacks = function (operation, defaultIpfs, defaultProvider, providers, timeout, func, options) { return __awaiter(void 0, void 0, void 0, function () {
    var parallel, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                parallel = !!(options === null || options === void 0 ? void 0 : options.parallel);
                if (!parallel) return [3 /*break*/, 2];
                return [4 /*yield*/, execParallel(operation, defaultIpfs, defaultProvider, providers, timeout, func)];
            case 1:
                _a = _b.sent();
                return [3 /*break*/, 4];
            case 2: return [4 /*yield*/, execSerial(operation, defaultIpfs, defaultProvider, providers, timeout, func)];
            case 3:
                _a = _b.sent();
                _b.label = 4;
            case 4: return [2 /*return*/, _a];
        }
    });
}); };
exports.execFallbacks = execFallbacks;
var execSerial = function (operation, defaultIpfs, defaultProvider, providers, timeout, func) { return __awaiter(void 0, void 0, void 0, function () {
    var errors, providers_1, providers_1_1, provider, ipfs, promise, _a, error, result, e_1_1;
    var e_1, _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                errors = [];
                _c.label = 1;
            case 1:
                _c.trys.push([1, 6, 7, 8]);
                providers_1 = __values(providers), providers_1_1 = providers_1.next();
                _c.label = 2;
            case 2:
                if (!!providers_1_1.done) return [3 /*break*/, 5];
                provider = providers_1_1.value;
                ipfs = void 0;
                if (provider === defaultProvider) {
                    // If the provider is the default, we use the existing ipfs client
                    ipfs = defaultIpfs;
                }
                else {
                    // Otherwise we create a new ipfs client from the provider
                    ipfs = ipfs_http_client_lite_1.default(provider);
                }
                promise = abortable_1.execAbortable(operation, ipfs, provider, timeout, func).promise;
                return [4 /*yield*/, promise];
            case 3:
                _a = __read.apply(void 0, [_c.sent(), 2]), error = _a[0], result = _a[1];
                if (error) {
                    errors.push(error);
                }
                else {
                    return [2 /*return*/, result];
                }
                _c.label = 4;
            case 4:
                providers_1_1 = providers_1.next();
                return [3 /*break*/, 2];
            case 5: return [3 /*break*/, 8];
            case 6:
                e_1_1 = _c.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 8];
            case 7:
                try {
                    if (providers_1_1 && !providers_1_1.done && (_b = providers_1.return)) _b.call(providers_1);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 8: 
            // Throw all aggregated errors
            throw new Error(errors.map(function (x) { return x.message; }).join("\n"));
        }
    });
}); };
var execParallel = function (operation, defaultIpfs, defaultProvider, providers, timeout, func) { return __awaiter(void 0, void 0, void 0, function () {
    var errors, requests, providers_2, providers_2_1, provider, ipfs, request, successPromise, allPromises, response;
    var e_2, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                errors = [];
                requests = [];
                try {
                    // Gather all requests from all providers
                    for (providers_2 = __values(providers), providers_2_1 = providers_2.next(); !providers_2_1.done; providers_2_1 = providers_2.next()) {
                        provider = providers_2_1.value;
                        ipfs = void 0;
                        if (provider === defaultProvider) {
                            // If the provider is the default, we use the existing ipfs client
                            ipfs = defaultIpfs;
                        }
                        else {
                            // Otherwise we create a new ipfs client from the provider
                            ipfs = ipfs_http_client_lite_1.default(provider);
                        }
                        request = abortable_1.execAbortable(operation, ipfs, provider, timeout, func);
                        requests.push(request);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (providers_2_1 && !providers_2_1.done && (_a = providers_2.return)) _a.call(providers_2);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                successPromise = gatherSuccessPromises(requests);
                allPromises = gatherAllPromisesAndTrackErrors(requests, errors);
                return [4 /*yield*/, Promise.race([successPromise, allPromises])];
            case 1:
                response = _b.sent();
                if (response.success) {
                    abortAllRequests(requests);
                }
                else {
                    // Throw all aggregated errors
                    throw new Error(errors.map(function (x) { return x.message; }).join("\n"));
                }
                return [2 /*return*/, response.result];
        }
    });
}); };
var gatherSuccessPromises = function (requests) { return __awaiter(void 0, void 0, void 0, function () {
    var successPromises, _loop_1, requests_1, requests_1_1, request;
    var e_3, _a;
    return __generator(this, function (_b) {
        successPromises = [];
        _loop_1 = function (request) {
            successPromises.push(new Promise(function (resolve, reject) {
                request.promise.then(function (response) {
                    var _a = __read(response, 2), error = _a[0], result = _a[1];
                    if (!error && result !== undefined) {
                        resolve({
                            success: true,
                            result: result,
                            provider: request.provider,
                        });
                    }
                }, reject);
            }));
        };
        try {
            for (requests_1 = __values(requests), requests_1_1 = requests_1.next(); !requests_1_1.done; requests_1_1 = requests_1.next()) {
                request = requests_1_1.value;
                _loop_1(request);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (requests_1_1 && !requests_1_1.done && (_a = requests_1.return)) _a.call(requests_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return [2 /*return*/, Promise.race(successPromises)];
    });
}); };
var gatherAllPromisesAndTrackErrors = function (requests, errors) {
    return new Promise(function (resolve, reject) {
        Promise.all(requests.map(function (request) { return __awaiter(void 0, void 0, void 0, function () {
            var _a, error;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, request.promise];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 1]), error = _a[0];
                        if (error) {
                            errors.push(error);
                        }
                        return [2 /*return*/];
                }
            });
        }); })).then(function () {
            resolve({
                success: false,
                result: undefined,
                provider: undefined,
            });
        }, reject);
    });
};
var abortAllRequests = function (requests) {
    var e_4, _a;
    try {
        for (var requests_2 = __values(requests), requests_2_1 = requests_2.next(); !requests_2_1.done; requests_2_1 = requests_2.next()) {
            var request = requests_2_1.value;
            request.abort();
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (requests_2_1 && !requests_2_1.done && (_a = requests_2.return)) _a.call(requests_2);
        }
        finally { if (e_4) throw e_4.error; }
    }
};
//# sourceMappingURL=fallbacks.js.map