import * as Types from "./";
import { Client, InvokeResult } from "@polywrap/core-js";
export declare type UInt = number;
export declare type UInt8 = number;
export declare type UInt16 = number;
export declare type UInt32 = number;
export declare type Int = number;
export declare type Int8 = number;
export declare type Int16 = number;
export declare type Int32 = number;
export declare type Bytes = Uint8Array;
export declare type BigInt = string;
export declare type BigNumber = string;
export declare type Json = string;
export declare type String = string;
export declare type Boolean = boolean;
export interface Env extends Record<string, unknown> {
    auth?: Types.String | null;
    disableParallelRequests?: Types.Boolean | null;
    timeout?: Types.UInt32 | null;
    provider: Types.String;
    fallbackProviders?: Array<Types.String> | null;
}
export interface Ipfs_Options {
    timeout?: Types.UInt32 | null;
    provider?: Types.String | null;
    fallbackProviders?: Array<Types.String> | null;
    disableParallelRequests?: Types.Boolean | null;
}
export interface Ipfs_ResolveResult {
    cid: Types.String;
    provider: Types.String;
}
interface Ipfs_Module_Args_cat {
    cid: Types.String;
    options?: Types.Ipfs_Options | null;
}
interface Ipfs_Module_Args_resolve {
    cid: Types.String;
    options?: Types.Ipfs_Options | null;
}
interface Ipfs_Module_Args_addFile {
    data: Types.Bytes;
}
export declare const Ipfs_Module: {
    cat: (args: Ipfs_Module_Args_cat, client: Client) => Promise<InvokeResult<Types.Bytes>>;
    resolve: (args: Ipfs_Module_Args_resolve, client: Client) => Promise<InvokeResult<Types.Ipfs_ResolveResult | null>>;
    addFile: (args: Ipfs_Module_Args_addFile, client: Client) => Promise<InvokeResult<Types.String>>;
};
export {};
