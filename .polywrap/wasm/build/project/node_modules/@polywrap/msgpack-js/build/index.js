"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.msgpackDecode = exports.msgpackEncode = void 0;
var msgpack_1 = require("@msgpack/msgpack");
var ExtensionTypes;
(function (ExtensionTypes) {
    // must be in range 0-127
    ExtensionTypes[ExtensionTypes["GENERIC_MAP"] = 1] = "GENERIC_MAP";
})(ExtensionTypes || (ExtensionTypes = {}));
var extensionCodec = new msgpack_1.ExtensionCodec();
// Generic Map: Map<K, V>
extensionCodec.register({
    type: ExtensionTypes.GENERIC_MAP,
    encode: function (object) {
        var e_1, _a;
        if (object instanceof Map) {
            var optimized = {};
            try {
                for (var object_1 = __values(object), object_1_1 = object_1.next(); !object_1_1.done; object_1_1 = object_1.next()) {
                    var _b = __read(object_1_1.value, 2), key = _b[0], value = _b[1];
                    optimized[key] = value;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (object_1_1 && !object_1_1.done && (_a = object_1.return)) _a.call(object_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return msgpackEncode(optimized);
        }
        else {
            return null;
        }
    },
    decode: function (data) {
        var e_2, _a;
        var obj = msgpackDecode(data);
        var map = new Map();
        try {
            for (var _b = __values(Object.entries(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                map.set(key, value);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return map;
    },
});
var shouldIgnore = function (obj) {
    return obj instanceof ArrayBuffer || ArrayBuffer.isView(obj) || obj instanceof Map;
};
function sanitize(obj) {
    var e_3, _a;
    if (shouldIgnore(obj)) {
        return obj;
    }
    try {
        for (var _b = __values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            if (typeof obj[key] === "function") {
                delete obj[key];
            }
            else if (obj[key] === null || obj[key] === undefined) {
                delete obj[key];
            }
            else if (typeof obj[key] === "object") {
                var sanitized = sanitize(obj[key]);
                if (Array.isArray(obj[key])) {
                    obj[key] = Object.values(sanitized);
                }
                else {
                    obj[key] = sanitized;
                }
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return obj;
}
function msgpackEncode(object, sanitizeObj) {
    if (sanitizeObj === void 0) { sanitizeObj = false; }
    var encoder = new msgpack_1.Encoder(extensionCodec, undefined, // context
    undefined, // maxDepth
    undefined, // initialBufferSize
    undefined, // sortKeys
    undefined, // forceFloat32
    true, // ignoreUndefined
    undefined // forceIntegerToFloat
    );
    if (sanitizeObj && typeof object === "object" && !shouldIgnore(object)) {
        var deepClone = JSON.parse(JSON.stringify(object));
        object = sanitize(deepClone);
    }
    return encoder.encode(object);
}
exports.msgpackEncode = msgpackEncode;
function msgpackDecode(buffer, sanitizeResult) {
    if (sanitizeResult === void 0) { sanitizeResult = false; }
    var decoder = new msgpack_1.Decoder(extensionCodec);
    var result = decoder.decode(buffer);
    if (sanitizeResult && typeof result === "object" && !shouldIgnore(result)) {
        return sanitize(result);
    }
    else {
        return result;
    }
}
exports.msgpackDecode = msgpackDecode;
//# sourceMappingURL=index.js.map