"use strict";
/* eslint-disable @typescript-eslint/naming-convention */
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrate = void 0;
function migrate(old) {
    var steps = {};
    var jobs = {};
    var stageEntries = Object.entries(old.stages);
    stageEntries.forEach(function (_a) {
        var _b;
        var _c = __read(_a, 2), stageName = _c[0], stageValue = _c[1];
        steps[stageName] = {
            name: stageName,
            package: stageValue.package,
            uri: (_b = stageValue.uri) !== null && _b !== void 0 ? _b : "$$" + stageValue.depends_on,
        };
        if (stageValue.config) {
            steps[stageName].config = stageValue.config;
        }
    });
    stageEntries.forEach(function (_a) {
        var _b;
        var _c = __read(_a, 2), stageName = _c[0], stageValue = _c[1];
        if (!stageValue.depends_on) {
            jobs[stageName] = {
                name: stageName,
                steps: (_b = {},
                    _b[stageName] = steps[stageName],
                    _b),
            };
            delete steps[stageName];
        }
    });
    var _loop_1 = function () {
        var jobValues = Object.values(jobs);
        stageEntries
            .filter(function (_a) {
            var _b = __read(_a, 2), _ = _b[0], stageValue = _b[1];
            return !!stageValue.depends_on;
        })
            .forEach(function (_a) {
            var _b = __read(_a, 2), stageName = _b[0], stageValue = _b[1];
            if (jobs[stageValue.depends_on]) {
                jobs[stageValue.depends_on].steps[stageName] =
                    steps[stageName];
                delete steps[stageName];
            }
            else {
                jobValues.forEach(function (jobValue) {
                    if (jobValue.steps[stageValue.depends_on]) {
                        jobValue.steps[stageName] = steps[stageName];
                        delete steps[stageName];
                    }
                });
            }
        });
    };
    while (Object.keys(steps).length > 0) {
        _loop_1();
    }
    return {
        __type: "DeployManifest",
        format: "0.2.0",
        jobs: Object.fromEntries(Object.values(jobs).map(function (job) { return [
            job.name,
            {
                config: job.config,
                steps: Object.values(job.steps),
            },
        ]; })),
    };
}
exports.migrate = migrate;
//# sourceMappingURL=0.1.0_to_0.2.0.js.map