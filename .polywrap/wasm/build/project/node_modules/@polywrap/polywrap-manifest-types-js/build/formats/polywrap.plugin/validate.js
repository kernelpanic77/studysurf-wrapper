"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePluginManifest = void 0;
var _0_1_0_json_1 = __importDefault(require("@polywrap/polywrap-manifest-schemas/formats/polywrap.plugin/0.1.0.json"));
var _0_2_0_json_1 = __importDefault(require("@polywrap/polywrap-manifest-schemas/formats/polywrap.plugin/0.2.0.json"));
var jsonschema_1 = require("jsonschema");
var schemas = {
    // NOTE: Patch fix for backwards compatability
    "0.1": _0_1_0_json_1.default,
    "0.1.0": _0_1_0_json_1.default,
    "0.2.0": _0_2_0_json_1.default,
};
var validator = new jsonschema_1.Validator();
function validatePluginManifest(manifest, extSchema) {
    if (extSchema === void 0) { extSchema = undefined; }
    var schema = schemas[manifest.format];
    if (!schema) {
        throw Error("Unrecognized PluginManifest schema format \"" + manifest.format + "\"\nmanifest: " + JSON.stringify(manifest, null, 2));
    }
    var throwIfErrors = function (result) {
        if (result.errors.length) {
            throw new Error(__spread([
                "Validation errors encountered while sanitizing PluginManifest format " + manifest.format
            ], result.errors.map(function (error) { return error.toString(); })).join("\n"));
        }
    };
    throwIfErrors(validator.validate(manifest, schema));
    if (extSchema) {
        throwIfErrors(validator.validate(manifest, extSchema));
    }
}
exports.validatePluginManifest = validatePluginManifest;
//# sourceMappingURL=validate.js.map