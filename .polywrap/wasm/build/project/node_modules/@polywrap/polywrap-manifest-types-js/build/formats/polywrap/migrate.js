"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.migratePolywrapManifest = void 0;
/* eslint-disable */
/**
 * This file was automatically generated by scripts/manifest/migrate-ts.mustache.
 * DO NOT MODIFY IT BY HAND. Instead, modify scripts/manifest/migrate-ts.mustache,
 * and run node ./scripts/manifest/generateFormatTypes.js to regenerate this file.
 */
var _1 = require(".");
var migrations_1 = require("../../migrations");
var migrators_1 = require("./migrators");
function migratePolywrapManifest(manifest, to, logger) {
    var e_1, _a;
    var from = manifest.format;
    if (!(Object.values(_1.PolywrapManifestFormats).some(function (x) { return x === from; }))) {
        throw new Error("Unrecognized PolywrapManifestFormat \"" + manifest.format + "\"");
    }
    if (!(Object.values(_1.PolywrapManifestFormats).some(function (x) { return x === to; }))) {
        throw new Error("Unrecognized PolywrapManifestFormat \"" + to + "\"");
    }
    var migrationPath = migrations_1.findShortestMigrationPath(migrators_1.migrators, from, to);
    if (!migrationPath) {
        throw new Error("Migration path from PolywrapManifestFormat \"" + from + "\" to \"" + to + "\" is not available");
    }
    var newManifest = manifest;
    try {
        for (var migrationPath_1 = __values(migrationPath), migrationPath_1_1 = migrationPath_1.next(); !migrationPath_1_1.done; migrationPath_1_1 = migrationPath_1.next()) {
            var migrator = migrationPath_1_1.value;
            newManifest = migrator.migrate(newManifest, logger);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (migrationPath_1_1 && !migrationPath_1_1.done && (_a = migrationPath_1.return)) _a.call(migrationPath_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return newManifest;
}
exports.migratePolywrapManifest = migratePolywrapManifest;
//# sourceMappingURL=migrate.js.map