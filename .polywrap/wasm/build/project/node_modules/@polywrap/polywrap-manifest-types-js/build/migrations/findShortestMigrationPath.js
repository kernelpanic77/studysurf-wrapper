"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findShortestMigrationPath = void 0;
// A simple BFS intended to find the shortest migration path from one version to another
// Returns an array of migrations in the order they need to be performed to migrate from one version to another
function findShortestMigrationPath(nodes, from, to) {
    if (from === to) {
        return [];
    }
    var possibleStarts = nodes.filter(function (x) { return x.from === from; });
    if (!possibleStarts.length) {
        return undefined;
    }
    var visited = __spread(possibleStarts);
    var queue = possibleStarts.map(function (start) { return [
        start,
        [start],
    ]; });
    var _loop_1 = function () {
        var e_1, _a;
        var _b = __read(queue.shift(), 2), node = _b[0], path = _b[1];
        if (node.to === to) {
            return { value: path };
        }
        var neighbours = nodes.filter(function (x) { return !visited.includes(x) && x.from === node.to; });
        try {
            for (var neighbours_1 = (e_1 = void 0, __values(neighbours)), neighbours_1_1 = neighbours_1.next(); !neighbours_1_1.done; neighbours_1_1 = neighbours_1.next()) {
                var neighbour = neighbours_1_1.value;
                visited.push(neighbour);
                if (neighbour.to === to) {
                    return { value: __spread(path, [neighbour]) };
                }
                queue.push([neighbour, __spread(path, [neighbour])]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (neighbours_1_1 && !neighbours_1_1.done && (_a = neighbours_1.return)) _a.call(neighbours_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    while (queue.length) {
        var state_1 = _loop_1();
        if (typeof state_1 === "object")
            return state_1.value;
    }
    return undefined;
}
exports.findShortestMigrationPath = findShortestMigrationPath;
//# sourceMappingURL=findShortestMigrationPath.js.map