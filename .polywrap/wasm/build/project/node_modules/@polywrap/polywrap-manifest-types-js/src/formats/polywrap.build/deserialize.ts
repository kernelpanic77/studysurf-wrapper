/* eslint-disable */
/**
 * This file was automatically generated by scripts/manifest/deserialize-ts.mustache.
 * DO NOT MODIFY IT BY HAND. Instead, modify scripts/manifest/deserialize-ts.mustache,
 * and run node ./scripts/manifest/generateFormatTypes.js to regenerate this file.
 */

import {
  BuildManifest,
  AnyBuildManifest,
  migrateBuildManifest,
  validateBuildManifest,
  latestBuildManifestFormat,
} from ".";
import { DeserializeManifestOptions } from "../../";

import * as Semver from "semver";
import YAML from "yaml";

export function deserializeBuildManifest(
  manifest: string,
  options?: DeserializeManifestOptions
): BuildManifest {
  let anyBuildManifest: AnyBuildManifest | undefined;
  try {
    anyBuildManifest = JSON.parse(manifest) as AnyBuildManifest;
  } catch (_) {
    try {
      anyBuildManifest = YAML.parse(manifest) as AnyBuildManifest;
    } catch (_) { }
  }

  if (!anyBuildManifest) {
    throw Error(`Unable to parse BuildManifest: ${manifest}`);
  }

  if (!options || !options.noValidate) {
    validateBuildManifest(anyBuildManifest, options?.extSchema);
  }

  anyBuildManifest.__type = "BuildManifest";

  const versionCompare = Semver.compare(
    Semver.coerce(anyBuildManifest.format) || anyBuildManifest.format,
    Semver.coerce(latestBuildManifestFormat) || latestBuildManifestFormat
  );

  if (versionCompare === -1) {
    // Warn user to migrate their manifest
    options?.logger?.warn(`BuildManifest is using an older version of the manifest format (${anyBuildManifest.format}). Please update your manifest to the latest version (${latestBuildManifestFormat}) by using the "polywrap manifest migrate <type>" command.`);

    // Upgrade
    return migrateBuildManifest(anyBuildManifest, latestBuildManifestFormat, options?.logger);
  } else if (versionCompare === 1) {
    // Downgrade
    throw Error(
      `Cannot downgrade Polywrap version ${anyBuildManifest.format}, please upgrade your PolywrapClient package.`
    );
  } else {
    // Latest
    return anyBuildManifest as BuildManifest;
  }
}
