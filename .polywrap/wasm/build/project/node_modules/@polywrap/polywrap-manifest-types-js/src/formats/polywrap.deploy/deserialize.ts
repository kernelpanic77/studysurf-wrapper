/* eslint-disable */
/**
 * This file was automatically generated by scripts/manifest/deserialize-ts.mustache.
 * DO NOT MODIFY IT BY HAND. Instead, modify scripts/manifest/deserialize-ts.mustache,
 * and run node ./scripts/manifest/generateFormatTypes.js to regenerate this file.
 */

import {
  DeployManifest,
  AnyDeployManifest,
  migrateDeployManifest,
  validateDeployManifest,
  latestDeployManifestFormat,
} from ".";
import { DeserializeManifestOptions } from "../../";

import * as Semver from "semver";
import YAML from "yaml";

export function deserializeDeployManifest(
  manifest: string,
  options?: DeserializeManifestOptions
): DeployManifest {
  let anyDeployManifest: AnyDeployManifest | undefined;
  try {
    anyDeployManifest = JSON.parse(manifest) as AnyDeployManifest;
  } catch (_) {
    try {
      anyDeployManifest = YAML.parse(manifest) as AnyDeployManifest;
    } catch (_) { }
  }

  if (!anyDeployManifest) {
    throw Error(`Unable to parse DeployManifest: ${manifest}`);
  }

  if (!options || !options.noValidate) {
    validateDeployManifest(anyDeployManifest, options?.extSchema);
  }

  anyDeployManifest.__type = "DeployManifest";

  const versionCompare = Semver.compare(
    Semver.coerce(anyDeployManifest.format) || anyDeployManifest.format,
    Semver.coerce(latestDeployManifestFormat) || latestDeployManifestFormat
  );

  if (versionCompare === -1) {
    // Warn user to migrate their manifest
    options?.logger?.warn(`DeployManifest is using an older version of the manifest format (${anyDeployManifest.format}). Please update your manifest to the latest version (${latestDeployManifestFormat}) by using the "polywrap manifest migrate <type>" command.`);

    // Upgrade
    return migrateDeployManifest(anyDeployManifest, latestDeployManifestFormat, options?.logger);
  } else if (versionCompare === 1) {
    // Downgrade
    throw Error(
      `Cannot downgrade Polywrap version ${anyDeployManifest.format}, please upgrade your PolywrapClient package.`
    );
  } else {
    // Latest
    return anyDeployManifest as DeployManifest;
  }
}
