/* eslint-disable */
/**
 * This file was automatically generated by scripts/manifest/deserialize-ts.mustache.
 * DO NOT MODIFY IT BY HAND. Instead, modify scripts/manifest/deserialize-ts.mustache,
 * and run node ./scripts/manifest/generateFormatTypes.js to regenerate this file.
 */

import {
  MetaManifest,
  AnyMetaManifest,
  migrateMetaManifest,
  validateMetaManifest,
  latestMetaManifestFormat,
} from ".";
import { DeserializeManifestOptions } from "../../";

import * as Semver from "semver";
import YAML from "yaml";

export function deserializeMetaManifest(
  manifest: string,
  options?: DeserializeManifestOptions
): MetaManifest {
  let anyMetaManifest: AnyMetaManifest | undefined;
  try {
    anyMetaManifest = JSON.parse(manifest) as AnyMetaManifest;
  } catch (_) {
    try {
      anyMetaManifest = YAML.parse(manifest) as AnyMetaManifest;
    } catch (_) { }
  }

  if (!anyMetaManifest) {
    throw Error(`Unable to parse MetaManifest: ${manifest}`);
  }

  if (!options || !options.noValidate) {
    validateMetaManifest(anyMetaManifest, options?.extSchema);
  }

  anyMetaManifest.__type = "MetaManifest";

  const versionCompare = Semver.compare(
    Semver.coerce(anyMetaManifest.format) || anyMetaManifest.format,
    Semver.coerce(latestMetaManifestFormat) || latestMetaManifestFormat
  );

  if (versionCompare === -1) {
    // Warn user to migrate their manifest
    options?.logger?.warn(`MetaManifest is using an older version of the manifest format (${anyMetaManifest.format}). Please update your manifest to the latest version (${latestMetaManifestFormat}) by using the "polywrap manifest migrate <type>" command.`);

    // Upgrade
    return migrateMetaManifest(anyMetaManifest, latestMetaManifestFormat, options?.logger);
  } else if (versionCompare === 1) {
    // Downgrade
    throw Error(
      `Cannot downgrade Polywrap version ${anyMetaManifest.format}, please upgrade your PolywrapClient package.`
    );
  } else {
    // Latest
    return anyMetaManifest as MetaManifest;
  }
}
