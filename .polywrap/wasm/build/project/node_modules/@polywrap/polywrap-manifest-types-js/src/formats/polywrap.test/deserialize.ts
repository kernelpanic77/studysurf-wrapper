/* eslint-disable */
/**
 * This file was automatically generated by scripts/manifest/deserialize-ts.mustache.
 * DO NOT MODIFY IT BY HAND. Instead, modify scripts/manifest/deserialize-ts.mustache,
 * and run node ./scripts/manifest/generateFormatTypes.js to regenerate this file.
 */

import {
  PolywrapWorkflow,
  AnyPolywrapWorkflow,
  migratePolywrapWorkflow,
  validatePolywrapWorkflow,
  latestPolywrapWorkflowFormat,
} from ".";
import { DeserializeManifestOptions } from "../../";

import * as Semver from "semver";
import YAML from "yaml";

export function deserializePolywrapWorkflow(
  manifest: string,
  options?: DeserializeManifestOptions
): PolywrapWorkflow {
  let anyPolywrapWorkflow: AnyPolywrapWorkflow | undefined;
  try {
    anyPolywrapWorkflow = JSON.parse(manifest) as AnyPolywrapWorkflow;
  } catch (_) {
    try {
      anyPolywrapWorkflow = YAML.parse(manifest) as AnyPolywrapWorkflow;
    } catch (_) { }
  }

  if (!anyPolywrapWorkflow) {
    throw Error(`Unable to parse PolywrapWorkflow: ${manifest}`);
  }

  if (!options || !options.noValidate) {
    validatePolywrapWorkflow(anyPolywrapWorkflow, options?.extSchema);
  }

  anyPolywrapWorkflow.__type = "PolywrapWorkflow";

  const versionCompare = Semver.compare(
    Semver.coerce(anyPolywrapWorkflow.format) || anyPolywrapWorkflow.format,
    Semver.coerce(latestPolywrapWorkflowFormat) || latestPolywrapWorkflowFormat
  );

  if (versionCompare === -1) {
    // Warn user to migrate their manifest
    options?.logger?.warn(`PolywrapWorkflow is using an older version of the manifest format (${anyPolywrapWorkflow.format}). Please update your manifest to the latest version (${latestPolywrapWorkflowFormat}) by using the "polywrap manifest migrate <type>" command.`);

    // Upgrade
    return migratePolywrapWorkflow(anyPolywrapWorkflow, latestPolywrapWorkflowFormat, options?.logger);
  } else if (versionCompare === 1) {
    // Downgrade
    throw Error(
      `Cannot downgrade Polywrap version ${anyPolywrapWorkflow.format}, please upgrade your PolywrapClient package.`
    );
  } else {
    // Latest
    return anyPolywrapWorkflow as PolywrapWorkflow;
  }
}
