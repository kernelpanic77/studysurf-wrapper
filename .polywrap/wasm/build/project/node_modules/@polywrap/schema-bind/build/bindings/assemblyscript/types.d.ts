declare const baseTypes: {
    u8: string;
    u16: string;
    u32: string;
    i8: string;
    i16: string;
    i32: string;
    string: string;
    bool: string;
};
export declare type BaseTypes = typeof baseTypes;
export declare type BaseType = keyof BaseTypes;
export declare function isBaseType(type: string): type is BaseType;
declare const keywords: {
    async: string;
    await: string;
    arguments: string;
    abstract: string;
    as: string;
    break: string;
    const: string;
    class: string;
    catch: string;
    case: string;
    continue: string;
    constructor: string;
    default: string;
    declare: string;
    do: string;
    delete: string;
    debugger: string;
    else: string;
    enum: string;
    export: string;
    extends: string;
    for: string;
    from: string;
    function: string;
    finally: string;
    if: string;
    in: string;
    is: string;
    implements: string;
    import: string;
    instanceof: string;
    interface: string;
    keyof: string;
    let: string;
    module: string;
    new: string;
    namespace: string;
    of: string;
    private: string;
    package: string;
    public: string;
    protected: string;
    return: string;
    readonly: string;
    switch: string;
    static: string;
    super: string;
    this: string;
    type: string;
    try: string;
    throw: string;
    typeof: string;
    var: string;
    while: string;
    with: string;
    yield: string;
    i8: string;
    i16: string;
    i32: string;
    i64: string;
    isize: string;
    u8: string;
    u16: string;
    u32: string;
    u64: string;
    usize: string;
    bool: string;
    f32: string;
    f64: string;
    v128: string;
    funcref: string;
    externref: string;
    anyref: string;
    eqref: string;
    i31ref: string;
    dataref: string;
    i8x16: string;
    u8x16: string;
    i16x8: string;
    u16x8: string;
    i32x4: string;
    u32x4: string;
    i64x2: string;
    u64x2: string;
    f32x4: string;
    f64x2: string;
    void: string;
    number: string;
    boolean: string;
    string: string;
    native: string;
    indexof: string;
    valueof: string;
    returnof: string;
    nonnull: string;
    null: string;
    true: string;
    false: string;
    ASC_TARGET: string;
    ASC_RUNTIME: string;
    ASC_NO_ASSERT: string;
    ASC_MEMORY_BASE: string;
    ASC_TABLE_BASE: string;
    ASC_OPTIMIZE_LEVEL: string;
    ASC_SHRINK_LEVEL: string;
    ASC_LOW_MEMORY_LIMIT: string;
    ASC_EXPORT_RUNTIME: string;
    ASC_WASI: string;
    ASC_FEATURE_SIGN_EXTENSION: string;
    ASC_FEATURE_MUTABLE_GLOBALS: string;
    ASC_FEATURE_NONTRAPPING_F2I: string;
    ASC_FEATURE_BULK_MEMORY: string;
    ASC_FEATURE_SIMD: string;
    ASC_FEATURE_THREADS: string;
    ASC_FEATURE_EXCEPTION_HANDLING: string;
    ASC_FEATURE_TAIL_CALLS: string;
    ASC_FEATURE_REFERENCE_TYPES: string;
    ASC_FEATURE_MULTI_VALUE: string;
    ASC_FEATURE_GC: string;
    ASC_FEATURE_MEMORY64: string;
    ASC_VERSION_MAJOR: string;
    ASC_VERSION_MINOR: string;
    ASC_VERSION_PATCH: string;
    I8: string;
    I16: string;
    I32: string;
    I64: string;
    Isize: string;
    U8: string;
    U16: string;
    U32: string;
    U64: string;
    Usize: string;
    Bool: string;
    F32: string;
    F64: string;
    V128: string;
    Funcref: string;
    Externref: string;
    Anyref: string;
    Eqref: string;
    I31ref: string;
    Dataref: string;
    String: string;
    Object: string;
    Array: string;
    StaticArray: string;
    Set: string;
    Map: string;
    Function: string;
    ArrayBufferView: string;
    ArrayBuffer: string;
    Math: string;
    Mathf: string;
    NativeMath: string;
    NativeMathf: string;
    Int8Array: string;
    Int16Array: string;
    Int32Array: string;
    Int64Array: string;
    Uint8Array: string;
    Uint8ClampedArray: string;
    Uint16Array: string;
    Uint32Array: string;
    Uint64Array: string;
    Float32Array: string;
    Float64Array: string;
    TemplateStringsArray: string;
    Error: string;
    Result: string;
    Box: string;
    JSON: string;
    abort: string;
    trace: string;
    seed: string;
    pow: string;
    ipow32: string;
    ipow64: string;
    mod: string;
    __alloc: string;
    __realloc: string;
    __free: string;
    __new: string;
    __renew: string;
    __link: string;
    __collect: string;
    __typeinfo: string;
    __instanceof: string;
    __visit: string;
    __newBuffer: string;
    __newArray: string;
};
export declare type Keywords = typeof keywords;
export declare type Keyword = keyof Keywords;
export declare function isKeyword(keyword: string): keyword is Keyword;
export {};
