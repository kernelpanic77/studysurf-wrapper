"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateBinding = void 0;
var __1 = require("../");
var __2 = require("../..");
var utils_1 = require("../../utils");
var schema_parse_1 = require("@polywrap/schema-parse");
var os_js_1 = require("@polywrap/os-js");
var path_1 = __importDefault(require("path"));
var templatesDir = os_js_1.readDirectorySync(path_1.default.join(__dirname, "./templates"));
var subTemplates = utils_1.loadSubTemplates(templatesDir.entries);
var templatePath = function (subpath) {
    return path_1.default.join(__dirname, "./templates", subpath);
};
var generateBinding = function (options) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e, e_6, _f, e_7, _g, _h;
    var result = {
        output: {
            entries: [],
        },
        outputDirAbs: options.outputDirAbs,
    };
    var output = result.output;
    var abi = applyTransforms(options.abi);
    // Generate object type folders
    if (abi.objectTypes) {
        try {
            for (var _j = __values(abi.objectTypes), _k = _j.next(); !_k.done; _k = _j.next()) {
                var objectType = _k.value;
                output.entries.push({
                    type: "Directory",
                    name: objectType.type,
                    data: __2.renderTemplates(templatePath("object-type"), objectType, subTemplates),
                });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_k && !_k.done && (_a = _j.return)) _a.call(_j);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    // Generate imported folder
    var importEntries = [];
    // Generate imported module type folders
    if (abi.importedModuleTypes) {
        try {
            for (var _l = __values(abi.importedModuleTypes), _m = _l.next(); !_m.done; _m = _l.next()) {
                var importedModuleType = _m.value;
                importEntries.push({
                    type: "Directory",
                    name: importedModuleType.type,
                    data: __2.renderTemplates(templatePath("imported/module-type"), importedModuleType, subTemplates),
                });
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_m && !_m.done && (_b = _l.return)) _b.call(_l);
            }
            finally { if (e_2) throw e_2.error; }
        }
    }
    // Generate imported env type folders
    if (abi.importedEnvTypes) {
        try {
            for (var _o = __values(abi.importedEnvTypes), _p = _o.next(); !_p.done; _p = _o.next()) {
                var importedEnvType = _p.value;
                importEntries.push({
                    type: "Directory",
                    name: importedEnvType.type,
                    data: __2.renderTemplates(templatePath("imported/env-type"), importedEnvType, subTemplates),
                });
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_p && !_p.done && (_c = _o.return)) _c.call(_o);
            }
            finally { if (e_3) throw e_3.error; }
        }
    }
    // Generate imported enum type folders
    if (abi.importedEnumTypes) {
        try {
            for (var _q = __values(abi.importedEnumTypes), _r = _q.next(); !_r.done; _r = _q.next()) {
                var importedEnumType = _r.value;
                importEntries.push({
                    type: "Directory",
                    name: importedEnumType.type,
                    data: __2.renderTemplates(templatePath("imported/enum-type"), importedEnumType, subTemplates),
                });
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_r && !_r.done && (_d = _q.return)) _d.call(_q);
            }
            finally { if (e_4) throw e_4.error; }
        }
    }
    // Generate imported object type folders
    if (abi.importedObjectTypes) {
        try {
            for (var _s = __values(abi.importedObjectTypes), _t = _s.next(); !_t.done; _t = _s.next()) {
                var importedObectType = _t.value;
                importEntries.push({
                    type: "Directory",
                    name: importedObectType.type,
                    data: __2.renderTemplates(templatePath("imported/object-type"), importedObectType, subTemplates),
                });
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_t && !_t.done && (_e = _s.return)) _e.call(_s);
            }
            finally { if (e_5) throw e_5.error; }
        }
    }
    if (importEntries.length) {
        output.entries.push({
            type: "Directory",
            name: "imported",
            data: __spread(importEntries, __2.renderTemplates(templatePath("imported"), abi, subTemplates)),
        });
    }
    // Generate interface type folders
    if (abi.interfaceTypes) {
        try {
            for (var _u = __values(abi.interfaceTypes), _v = _u.next(); !_v.done; _v = _u.next()) {
                var interfaceType = _v.value;
                output.entries.push({
                    type: "Directory",
                    name: interfaceType.type,
                    data: __2.renderTemplates(templatePath("interface-type"), interfaceType, subTemplates),
                });
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_v && !_v.done && (_f = _u.return)) _f.call(_u);
            }
            finally { if (e_6) throw e_6.error; }
        }
    }
    // Generate module type folders
    if (abi.moduleType) {
        output.entries.push({
            type: "Directory",
            name: abi.moduleType.type,
            data: __2.renderTemplates(templatePath("module-type"), abi.moduleType, subTemplates),
        });
    }
    // Generate enum type folders
    if (abi.enumTypes) {
        try {
            for (var _w = __values(abi.enumTypes), _x = _w.next(); !_x.done; _x = _w.next()) {
                var enumType = _x.value;
                output.entries.push({
                    type: "Directory",
                    name: enumType.type,
                    data: __2.renderTemplates(templatePath("enum-type"), enumType, subTemplates),
                });
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_x && !_x.done && (_g = _w.return)) _g.call(_w);
            }
            finally { if (e_7) throw e_7.error; }
        }
    }
    // Generate env type folders
    if (abi.envType) {
        output.entries.push({
            type: "Directory",
            name: abi.envType.type,
            data: __2.renderTemplates(templatePath("env-type"), abi.envType, subTemplates),
        });
    }
    // Generate root entry file
    (_h = output.entries).push.apply(_h, __spread(__2.renderTemplates(templatePath(""), abi, subTemplates)));
    return result;
};
exports.generateBinding = generateBinding;
function applyTransforms(abi) {
    var e_8, _a;
    var transforms = [
        schema_parse_1.extendType(__1.Functions),
        schema_parse_1.addFirstLast,
        schema_parse_1.toPrefixedGraphQLType,
    ];
    try {
        for (var transforms_1 = __values(transforms), transforms_1_1 = transforms_1.next(); !transforms_1_1.done; transforms_1_1 = transforms_1.next()) {
            var transform = transforms_1_1.value;
            abi = schema_parse_1.transformAbi(abi, transform);
        }
    }
    catch (e_8_1) { e_8 = { error: e_8_1 }; }
    finally {
        try {
            if (transforms_1_1 && !transforms_1_1.done && (_a = transforms_1.return)) _a.call(transforms_1);
        }
        finally { if (e_8) throw e_8.error; }
    }
    return abi;
}
//# sourceMappingURL=index.js.map