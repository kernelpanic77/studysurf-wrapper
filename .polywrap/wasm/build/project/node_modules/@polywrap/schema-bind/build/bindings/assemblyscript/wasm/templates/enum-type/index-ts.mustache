export enum {{#detectKeyword}}{{type}}{{/detectKeyword}} {
  {{#constants}}
  {{#detectKeyword}}{{.}}{{/detectKeyword}},
  {{/constants}}
  _MAX_
}

export function sanitize{{type}}Value(value: i32): void {
  const valid = value >= 0 && value < {{#detectKeyword}}{{type}}{{/detectKeyword}}._MAX_;
  if (!valid) {
    throw new Error("Invalid value for enum '{{#detectKeyword}}{{type}}{{/detectKeyword}}': " + value.toString());
  }
}

export function get{{type}}Value(key: string): {{#detectKeyword}}{{type}}{{/detectKeyword}} {
  {{#constants}}
  if (key == "{{#detectKeyword}}{{.}}{{/detectKeyword}}") {
    return {{#detectKeyword}}{{type}}{{/detectKeyword}}.{{#detectKeyword}}{{.}}{{/detectKeyword}};
  }
  {{/constants}}

  throw new Error("Invalid key for enum '{{#detectKeyword}}{{type}}{{/detectKeyword}}': " + key);
}

export function get{{type}}Key(value: {{#detectKeyword}}{{type}}{{/detectKeyword}}): string {
  sanitize{{type}}Value(value);

  switch (value) {
    {{#constants}}
    case {{#detectKeyword}}{{type}}{{/detectKeyword}}.{{#detectKeyword}}{{.}}{{/detectKeyword}}: return "{{#detectKeyword}}{{.}}{{/detectKeyword}}";
    {{/constants}}
    default:
      throw new Error("Invalid value for enum '{{#detectKeyword}}{{type}}{{/detectKeyword}}': " + value.toString());
  }
}
