declare const baseTypes: {
    UInt: string;
    UInt8: string;
    UInt16: string;
    UInt32: string;
    UInt64: string;
    Int: string;
    Int8: string;
    Int16: string;
    Int32: string;
    Int64: string;
    String: string;
    Boolean: string;
    Bytes: string;
};
export declare type BaseTypes = typeof baseTypes;
export declare type BaseType = keyof BaseTypes;
export declare function isBaseType(type: string): type is BaseType;
declare const builtInTypes: {
    BigInt: string;
    BigNumber: string;
    JSON: string;
};
export declare type BuiltInTypes = typeof builtInTypes;
export declare type BuiltInType = keyof BuiltInTypes;
export declare function isBuiltInType(type: string): type is BuiltInType;
declare const keywords: {
    as: string;
    break: string;
    const: string;
    continue: string;
    crate: string;
    else: string;
    enum: string;
    extern: string;
    false: string;
    fn: string;
    for: string;
    if: string;
    impl: string;
    in: string;
    let: string;
    loop: string;
    match: string;
    mod: string;
    move: string;
    mut: string;
    pub: string;
    ref: string;
    return: string;
    self: string;
    Self: string;
    static: string;
    struct: string;
    super: string;
    trait: string;
    true: string;
    type: string;
    unsafe: string;
    use: string;
    where: string;
    while: string;
    async: string;
    await: string;
    dyn: string;
    abstract: string;
    become: string;
    box: string;
    Box: string;
    do: string;
    final: string;
    macro: string;
    override: string;
    priv: string;
    typeof: string;
    unsized: string;
    virtual: string;
    yield: string;
    try: string;
    macro_rules: string;
    union: string;
};
export declare type Keywords = typeof keywords;
export declare type Keyword = keyof Keywords;
export declare function isKeyword(keyword: string): keyword is Keyword;
export {};
