"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toTypescript = exports.toFuncName = exports.toClassName = exports.toLowerCase = exports.detectKeyword = void 0;
var types_1 = require("./types");
// check if any of the keywords match the property name;
// if there's a match, insert `_` at the beginning of the property name.
var detectKeyword = function () {
    return function (value, render) {
        var type = render(value);
        if (types_1.isKeyword(type)) {
            return "_" + type;
        }
        return type;
    };
};
exports.detectKeyword = detectKeyword;
var firstUpper = function (str) {
    return str ? str[0].toUpperCase() + str.slice(1) : "";
};
var firstLower = function (str) {
    return str ? str[0].toLowerCase() + str.slice(1) : "";
};
var toLowerCase = function () {
    return function (value, render) {
        var rendered = render(value);
        return rendered.toLowerCase();
    };
};
exports.toLowerCase = toLowerCase;
var toClassName = function () {
    return function (value, render) {
        var rendered = render(value);
        rendered.replace(/([^A-Za-z0-9])+/g, ",");
        return rendered
            .split(",")
            .map(function (x) { return (x ? firstUpper(x.replace(",", "")) : ""); })
            .join();
    };
};
exports.toClassName = toClassName;
var toFuncName = function () {
    return function (value, render) {
        var rendered = render(value);
        rendered = rendered.replace(/([^A-Za-z0-9])+/g, ",");
        return rendered
            .split(",")
            .map(function (x, index) {
            x = x.replace(",", "");
            return index === 0 ? firstLower(x) : firstUpper(x);
        })
            .join();
    };
};
exports.toFuncName = toFuncName;
var toTypescript = function () {
    return _toTypescript;
};
exports.toTypescript = toTypescript;
var _toTypescript = function (value, render, undefinable) {
    if (undefinable === void 0) { undefinable = false; }
    var type = render(value);
    var optional = false;
    if (type[type.length - 1] === "!") {
        type = type.substring(0, type.length - 1);
    }
    else {
        optional = true;
    }
    if (type[0] === "[") {
        return toTypescriptArray(type, optional);
    }
    if (type.startsWith("Map<")) {
        return toTypescriptMap(type, optional);
    }
    switch (type) {
        case "JSON":
            type = "Types.Json";
            break;
        default:
            if (type.includes("Enum_")) {
                type = type.replace("Enum_", "");
            }
            type = exports.detectKeyword()(type, function (str) { return str; });
            type = "Types." + type;
    }
    return undefinable
        ? applyUndefinable(type, optional)
        : applyOptional(type, optional);
};
var toTypescriptArray = function (type, optional) {
    var result = type.match(/(\[)([[\]A-Za-z0-9_.!]+)(\])/);
    if (!result || result.length !== 4) {
        throw Error("Invalid Array: " + type);
    }
    var tsType = _toTypescript(result[2], function (str) { return str; });
    return applyOptional("Array<" + tsType + ">", optional);
};
var toTypescriptMap = function (type, optional) {
    var openAngleBracketIdx = type.indexOf("<");
    var closeAngleBracketIdx = type.lastIndexOf(">");
    var keyValTypes = type.substring(openAngleBracketIdx + 1, closeAngleBracketIdx);
    var firstCommaIdx = keyValTypes.indexOf(",");
    var keyType = keyValTypes.substring(0, firstCommaIdx).trim();
    var valType = keyValTypes.substring(firstCommaIdx + 1).trim();
    var tsKeyType = _toTypescript(keyType, function (str) { return str; });
    var tsValType = _toTypescript(valType, function (str) { return str; }, true);
    return applyOptional("Map<" + tsKeyType + ", " + tsValType + ">", optional);
};
var applyOptional = function (type, optional) {
    if (optional) {
        return type + " | null";
    }
    else {
        return type;
    }
};
var applyUndefinable = function (type, undefinable) {
    if (undefinable) {
        return type + " | undefined";
    }
    else {
        return type;
    }
};
//# sourceMappingURL=functions.js.map