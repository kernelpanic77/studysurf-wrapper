"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderSchema = void 0;
/* eslint-disable @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any */
var schema_mustache_1 = require("./templates/schema.mustache");
var header_mustache_1 = require("./templates/header.mustache");
var mustache_1 = __importDefault(require("mustache"));
var schema_parse_1 = require("@polywrap/schema-parse");
// Remove mustache's built-in HTML escaping
mustache_1.default.escape = function (value) { return value; };
function renderSchema(abi, header) {
    // Prepare the Abi for the renderer
    abi = schema_parse_1.transformAbi(abi, schema_parse_1.addFirstLast);
    abi = schema_parse_1.transformAbi(abi, schema_parse_1.toGraphQLType);
    abi = schema_parse_1.transformAbi(abi, schema_parse_1.moduleCapabilities());
    abi = schema_parse_1.transformAbi(abi, schema_parse_1.addAnnotations);
    abi = schema_parse_1.transformAbi(abi, {
        enter: {
            GenericDefinition: function (def) {
                var comment = def.comment || null;
                return __assign(__assign({}, def), { comment: comment });
            },
        },
    });
    var schema = mustache_1.default.render(schema_mustache_1.template, {
        abi: abi,
    });
    if (header) {
        schema = header_mustache_1.addHeader(schema);
    }
    // Remove needless whitespace
    return schema.replace(/[\n]{2,}/gm, "\n\n");
}
exports.renderSchema = renderSchema;
//# sourceMappingURL=render.js.map