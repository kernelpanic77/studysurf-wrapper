"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractEnvDirective = exports.extractInputValueDefinition = exports.extractListType = exports.extractNamedType = void 0;
var __1 = require("../..");
var property_utils_1 = require("./property-utils");
var object_types_utils_1 = require("./object-types-utils");
function extractNamedType(node, state) {
    var argument = state.currentArgument;
    var method = state.currentMethod;
    if (method && argument) {
        if (!argument.name) {
            throw Error("extractNamedType: Invalid state. Uninitialized currentArgument, name not found.\n" +
                ("Argument: " + JSON.stringify(argument, null, 2) + "\nState: " + JSON.stringify(state, null, 2)));
        }
        // Argument value
        property_utils_1.setPropertyType(argument, argument.name, {
            type: node.name.value,
            required: state.nonNullType,
        });
        state.nonNullType = undefined;
    }
    else if (method) {
        // Return value
        if (!state.currentReturn) {
            state.currentReturn = method.return;
        }
        if (!method.name) {
            throw Error("extractNamedType: Invalid state. Uninitialized currentMethod, name not found.\n" +
                ("Method: " + JSON.stringify(method, null, 2) + "\nState: " + JSON.stringify(state, null, 2)));
        }
        if (state.currentReturn) {
            property_utils_1.setPropertyType(state.currentReturn, method.name, {
                type: node.name.value,
                required: state.nonNullType,
            });
        }
        state.nonNullType = undefined;
    }
}
exports.extractNamedType = extractNamedType;
function extractListType(state) {
    var argument = state.currentArgument;
    var method = state.currentMethod;
    if (method && argument) {
        // Argument value
        argument.array = __1.createArrayDefinition({
            name: argument.name,
            type: "N/A",
            required: state.nonNullType,
        });
        state.currentArgument = argument.array;
        state.nonNullType = undefined;
    }
    else if (method) {
        // Return value
        if (!method.return) {
            method.return = __1.createPropertyDefinition({
                type: "N/A",
                name: method.name,
            });
            state.currentReturn = method.return;
        }
        else if (!state.currentReturn) {
            state.currentReturn = method.return;
        }
        state.currentReturn.array = __1.createArrayDefinition({
            type: "N/A",
            name: method.name,
            required: state.nonNullType,
        });
        state.currentReturn = state.currentReturn.array;
        state.nonNullType = undefined;
    }
}
exports.extractListType = extractListType;
function extractInputValueDefinition(node, state) {
    var _a;
    var method = state.currentMethod;
    if (!method) {
        return;
    }
    var name = node.name.value;
    var _b = object_types_utils_1.extractAnnotateDirective(node, name), type = _b.type, def = _b.def;
    var argument = __1.createPropertyDefinition({
        type: type ? type : "N/A",
        name: name,
        map: def ? def : undefined,
        comment: (_a = node.description) === null || _a === void 0 ? void 0 : _a.value,
        required: def && def.required ? true : undefined,
    });
    if (!method.arguments) {
        method.arguments = [];
    }
    method.arguments.push(argument);
    state.currentArgument = argument;
}
exports.extractInputValueDefinition = extractInputValueDefinition;
function extractEnvDirective(node) {
    var e_1, _a;
    var _b, _c;
    if (node.directives) {
        try {
            for (var _d = __values(node.directives), _e = _d.next(); !_e.done; _e = _d.next()) {
                var dir = _e.value;
                if (dir.name.value === "env") {
                    var required = ((_c = (_b = dir.arguments) === null || _b === void 0 ? void 0 : _b.find(function (arg) { return arg.name.value === "required"; })) === null || _c === void 0 ? void 0 : _c.value).value;
                    if (required === undefined) {
                        throw new Error("Env directive: " + node.name.value + " has invalid arguments");
                    }
                    return {
                        required: required,
                    };
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return undefined;
}
exports.extractEnvDirective = extractEnvDirective;
//# sourceMappingURL=module-types-utils.js.map