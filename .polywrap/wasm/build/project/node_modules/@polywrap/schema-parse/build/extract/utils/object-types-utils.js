"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractListType = exports.extractNamedType = exports.extractFieldDefinition = exports.extractAnnotateDirective = void 0;
var __1 = require("../..");
var map_utils_1 = require("./map-utils");
var property_utils_1 = require("./property-utils");
function extractAnnotateDirective(node, name) {
    var e_1, _a;
    var _b, _c;
    var type;
    var def;
    if (node.directives) {
        try {
            for (var _d = __values(node.directives), _e = _d.next(); !_e.done; _e = _d.next()) {
                var dir = _e.value;
                if (dir.name.value === "annotate") {
                    type = ((_c = (_b = dir.arguments) === null || _b === void 0 ? void 0 : _b.find(function (arg) { return arg.name.value === "type"; })) === null || _c === void 0 ? void 0 : _c.value).value;
                    if (!type) {
                        throw new Error("Annotate directive: " + node.name.value + " has invalid arguments");
                    }
                    def = map_utils_1.parseMapType(type, name);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return { type: type, def: def };
}
exports.extractAnnotateDirective = extractAnnotateDirective;
function extractFieldDefinition(node, state) {
    var _a;
    var importDef = state.currentType;
    if (!importDef) {
        return;
    }
    if (node.arguments && node.arguments.length > 0) {
        throw Error("Imported types cannot have methods. See type \"" + importDef.name + "\"");
    }
    var name = node.name.value;
    var _b = extractAnnotateDirective(node, name), type = _b.type, def = _b.def;
    var property = __1.createPropertyDefinition({
        type: type ? type : "N/A",
        name: name,
        map: def ? def : undefined,
        comment: (_a = node.description) === null || _a === void 0 ? void 0 : _a.value,
        required: def && def.required,
    });
    state.currentProperty = property;
    if (!importDef.properties) {
        importDef.properties = [];
    }
    importDef.properties.push(property);
}
exports.extractFieldDefinition = extractFieldDefinition;
function extractNamedType(node, state) {
    var property = state.currentProperty;
    if (!property) {
        return;
    }
    if (property.scalar) {
        return;
    }
    if (!property.name) {
        throw Error("extractNamedType: Invalid state. Uninitialized currentProperty, name not found.\n" +
            ("Method: " + JSON.stringify(property, null, 2) + "\nState: " + JSON.stringify(state, null, 2)));
    }
    property_utils_1.setPropertyType(property, property.name, {
        type: node.name.value,
        required: state.nonNullType,
    });
    state.nonNullType = undefined;
}
exports.extractNamedType = extractNamedType;
function extractListType(state) {
    var property = state.currentProperty;
    if (!property) {
        return;
    }
    if (property.scalar) {
        return;
    }
    property.array = __1.createArrayDefinition({
        name: property.name,
        type: "N/A",
        required: state.nonNullType,
    });
    state.currentProperty = property.array;
    state.nonNullType = undefined;
}
exports.extractListType = extractListType;
//# sourceMappingURL=object-types-utils.js.map