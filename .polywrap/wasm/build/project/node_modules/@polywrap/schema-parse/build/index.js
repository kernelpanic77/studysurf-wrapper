"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseSchema = void 0;
var abi_1 = require("./abi");
var extract_1 = require("./extract");
var transform_1 = require("./transform");
var validate_1 = require("./validate");
var graphql_1 = require("graphql");
__exportStar(require("./abi"), exports);
__exportStar(require("./extract"), exports);
__exportStar(require("./transform"), exports);
__exportStar(require("./validate"), exports);
__exportStar(require("./header"), exports);
function parseSchema(schema, options) {
    var e_1, _a;
    var _b, _c, _d, _e, _f, _g, _h;
    if (options === void 0) { options = {}; }
    var astNode = graphql_1.parse(schema);
    // Validate GraphQL Schema
    if (!options.noValidate) {
        var validates = options.validators || validate_1.validators;
        validate(astNode, validates);
    }
    // Extract & Build Abi
    var info = abi_1.createAbi();
    var extracts = options.extractors || extract_1.extractors;
    extract(astNode, info, extracts);
    // Finalize & Transform Abi
    info = transform_1.transformAbi(info, transform_1.finalizePropertyDef(info));
    if (options && options.transforms) {
        try {
            for (var _j = __values(options.transforms), _k = _j.next(); !_k.done; _k = _j.next()) {
                var transform = _k.value;
                info = transform_1.transformAbi(info, transform);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_k && !_k.done && (_a = _j.return)) _a.call(_j);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return {
        version: "0.1",
        objectTypes: ((_b = info.objectTypes) === null || _b === void 0 ? void 0 : _b.length) ? info.objectTypes : undefined,
        moduleType: info.moduleType ? info.moduleType : undefined,
        enumTypes: ((_c = info.enumTypes) === null || _c === void 0 ? void 0 : _c.length) ? info.enumTypes : undefined,
        interfaceTypes: ((_d = info.interfaceTypes) === null || _d === void 0 ? void 0 : _d.length) ? info.interfaceTypes
            : undefined,
        importedObjectTypes: ((_e = info.importedObjectTypes) === null || _e === void 0 ? void 0 : _e.length) ? info.importedObjectTypes
            : undefined,
        importedModuleTypes: ((_f = info.importedModuleTypes) === null || _f === void 0 ? void 0 : _f.length) ? info.importedModuleTypes
            : undefined,
        importedEnumTypes: ((_g = info.importedEnumTypes) === null || _g === void 0 ? void 0 : _g.length) ? info.importedEnumTypes
            : undefined,
        importedEnvTypes: ((_h = info.importedEnvTypes) === null || _h === void 0 ? void 0 : _h.length) ? info.importedEnvTypes
            : undefined,
        envType: info.envType ? info.envType : undefined,
    };
}
exports.parseSchema = parseSchema;
var validate = function (astNode, validators) {
    var e_2, _a;
    var allValidators = validators.map(function (getValidator) { return getValidator(); });
    var allVisitors = allValidators.map(function (x) { return x.visitor; });
    var allCleanup = allValidators.map(function (x) { return x.cleanup; });
    graphql_1.visit(astNode, graphql_1.visitInParallel(allVisitors));
    try {
        for (var allCleanup_1 = __values(allCleanup), allCleanup_1_1 = allCleanup_1.next(); !allCleanup_1_1.done; allCleanup_1_1 = allCleanup_1.next()) {
            var cleanup = allCleanup_1_1.value;
            if (cleanup) {
                cleanup(astNode);
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (allCleanup_1_1 && !allCleanup_1_1.done && (_a = allCleanup_1.return)) _a.call(allCleanup_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
};
var extract = function (astNode, abi, extractors) {
    var allVisitors = extractors.map(function (getVisitor) { return getVisitor(abi); });
    graphql_1.visit(astNode, graphql_1.visitInParallel(allVisitors));
};
//# sourceMappingURL=index.js.map