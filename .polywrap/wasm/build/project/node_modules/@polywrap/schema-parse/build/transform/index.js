"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformType = exports.visitMapDefinition = exports.visitEnvDefinition = exports.visitImportedEnvDefinition = exports.visitImportedEnumDefinition = exports.visitImportedObjectDefinition = exports.visitImportedModuleDefinition = exports.visitInterfaceDefinition = exports.visitModuleDefinition = exports.visitMethodDefinition = exports.visitPropertyDefinition = exports.visitArrayDefinition = exports.visitEnumRef = exports.visitEnumDefinition = exports.visitScalarDefinition = exports.visitAnyDefinition = exports.visitInterfaceImplementedDefinition = exports.visitObjectRef = exports.visitObjectDefinition = exports.transformAbi = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/naming-convention */
var abi_1 = require("../abi");
__exportStar(require("./finalizePropertyDef"), exports);
__exportStar(require("./extendType"), exports);
__exportStar(require("./addFirstLast"), exports);
__exportStar(require("./interfaceUris"), exports);
__exportStar(require("./methodParentPointers"), exports);
__exportStar(require("./toGraphQLType"), exports);
__exportStar(require("./moduleCapabilities"), exports);
__exportStar(require("./hasImports"), exports);
__exportStar(require("./addAnnotations"), exports);
function transformAbi(abi, transforms) {
    var result = Object.assign({}, abi);
    if (transforms.enter && transforms.enter.Abi) {
        result = transforms.enter.Abi(result);
    }
    if (result.interfaceTypes) {
        for (var i = 0; i < result.interfaceTypes.length; ++i) {
            result.interfaceTypes[i] = visitInterfaceDefinition(result.interfaceTypes[i], transforms);
        }
    }
    if (result.enumTypes) {
        for (var i = 0; i < result.enumTypes.length; ++i) {
            result.enumTypes[i] = visitEnumDefinition(result.enumTypes[i], transforms);
        }
    }
    if (result.objectTypes) {
        for (var i = 0; i < result.objectTypes.length; ++i) {
            result.objectTypes[i] = visitObjectDefinition(result.objectTypes[i], transforms);
        }
    }
    if (result.moduleType) {
        result.moduleType = visitModuleDefinition(result.moduleType, transforms);
    }
    if (result.envType) {
        result.envType = visitEnvDefinition(result.envType, transforms);
    }
    if (result.importedObjectTypes) {
        for (var i = 0; i < result.importedObjectTypes.length; ++i) {
            result.importedObjectTypes[i] = visitImportedObjectDefinition(result.importedObjectTypes[i], transforms);
        }
    }
    if (result.importedModuleTypes) {
        for (var i = 0; i < result.importedModuleTypes.length; ++i) {
            result.importedModuleTypes[i] = visitImportedModuleDefinition(result.importedModuleTypes[i], transforms);
        }
    }
    if (result.importedEnumTypes) {
        for (var i = 0; i < result.importedEnumTypes.length; ++i) {
            result.importedEnumTypes[i] = visitImportedEnumDefinition(result.importedEnumTypes[i], transforms);
        }
    }
    if (result.importedEnvTypes) {
        for (var i = 0; i < result.importedEnvTypes.length; ++i) {
            result.importedEnvTypes[i] = visitImportedEnvDefinition(result.importedEnvTypes[i], transforms);
        }
    }
    if (transforms.leave && transforms.leave.Abi) {
        result = transforms.leave.Abi(result);
    }
    return result;
}
exports.transformAbi = transformAbi;
function visitObjectDefinition(def, transforms) {
    var result = Object.assign({}, def);
    result = transformType(result, transforms.enter);
    if (result.properties) {
        for (var i = 0; i < result.properties.length; ++i) {
            result.properties[i] = visitPropertyDefinition(result.properties[i], transforms);
        }
    }
    if (result.interfaces) {
        for (var i = 0; i < result.interfaces.length; ++i) {
            result.interfaces[i] = visitInterfaceImplementedDefinition(result.interfaces[i], transforms);
        }
    }
    return transformType(result, transforms.leave);
}
exports.visitObjectDefinition = visitObjectDefinition;
function visitObjectRef(def, transforms) {
    var result = Object.assign({}, def);
    result = transformType(result, transforms.enter);
    return transformType(result, transforms.leave);
}
exports.visitObjectRef = visitObjectRef;
function visitInterfaceImplementedDefinition(def, transforms) {
    var result = Object.assign({}, def);
    result = transformType(result, transforms.enter);
    return transformType(result, transforms.leave);
}
exports.visitInterfaceImplementedDefinition = visitInterfaceImplementedDefinition;
function visitAnyDefinition(def, transforms) {
    var result = Object.assign({}, def);
    result = transformType(result, transforms.enter);
    if (result.array) {
        result.array = visitArrayDefinition(result.array, transforms);
    }
    if (result.map) {
        result.map = visitMapDefinition(result.map, transforms);
    }
    if (result.scalar) {
        result.scalar = visitScalarDefinition(result.scalar, transforms);
    }
    if (result.object) {
        result.object = visitObjectRef(result.object, transforms);
    }
    if (result.enum) {
        result.enum = visitEnumRef(result.enum, transforms);
    }
    return result;
}
exports.visitAnyDefinition = visitAnyDefinition;
function visitScalarDefinition(def, transforms) {
    var result = Object.assign({}, def);
    result = transformType(result, transforms.enter);
    return transformType(result, transforms.leave);
}
exports.visitScalarDefinition = visitScalarDefinition;
function visitEnumDefinition(def, transforms) {
    var result = Object.assign({}, def);
    result = transformType(result, transforms.enter);
    return transformType(result, transforms.leave);
}
exports.visitEnumDefinition = visitEnumDefinition;
function visitEnumRef(def, transforms) {
    var result = Object.assign({}, def);
    result = transformType(result, transforms.enter);
    return transformType(result, transforms.leave);
}
exports.visitEnumRef = visitEnumRef;
function visitArrayDefinition(def, transforms) {
    var result = Object.assign({}, def);
    result = transformType(result, transforms.enter);
    result = visitAnyDefinition(result, transforms);
    if (result.item) {
        result.item = transformType(result.item, transforms.enter);
        result.item = transformType(result.item, transforms.leave);
    }
    return transformType(result, transforms.leave);
}
exports.visitArrayDefinition = visitArrayDefinition;
function visitPropertyDefinition(def, transforms) {
    var result = Object.assign({}, def);
    result = transformType(result, transforms.enter);
    result = visitAnyDefinition(result, transforms);
    return transformType(result, transforms.leave);
}
exports.visitPropertyDefinition = visitPropertyDefinition;
function visitMethodDefinition(def, transforms) {
    var result = Object.assign({}, def);
    result = transformType(result, transforms.enter);
    if (result.arguments) {
        for (var i = 0; i < result.arguments.length; ++i) {
            result.arguments[i] = visitPropertyDefinition(result.arguments[i], transforms);
        }
    }
    if (result.return) {
        result.return = visitPropertyDefinition(result.return, transforms);
    }
    return transformType(result, transforms.leave);
}
exports.visitMethodDefinition = visitMethodDefinition;
function visitModuleDefinition(def, transforms) {
    var result = Object.assign({}, def);
    result = transformType(result, transforms.enter);
    if (result.methods) {
        for (var i = 0; i < result.methods.length; ++i) {
            result.methods[i] = visitMethodDefinition(result.methods[i], transforms);
        }
    }
    return transformType(result, transforms.leave);
}
exports.visitModuleDefinition = visitModuleDefinition;
function visitInterfaceDefinition(def, transforms) {
    var result = Object.assign({}, def);
    result = transformType(result, transforms.enter);
    return transformType(result, transforms.leave);
}
exports.visitInterfaceDefinition = visitInterfaceDefinition;
function visitImportedModuleDefinition(def, transforms) {
    var result = Object.assign({}, def);
    result = transformType(result, transforms.enter);
    if (result.methods) {
        for (var i = 0; i < result.methods.length; ++i) {
            result.methods[i] = visitMethodDefinition(result.methods[i], transforms);
        }
    }
    return transformType(result, transforms.leave);
}
exports.visitImportedModuleDefinition = visitImportedModuleDefinition;
function visitImportedObjectDefinition(def, transforms) {
    return visitObjectDefinition(def, transforms);
}
exports.visitImportedObjectDefinition = visitImportedObjectDefinition;
function visitImportedEnumDefinition(def, transforms) {
    return visitEnumDefinition(def, transforms);
}
exports.visitImportedEnumDefinition = visitImportedEnumDefinition;
function visitImportedEnvDefinition(def, transforms) {
    return visitEnvDefinition(def, transforms);
}
exports.visitImportedEnvDefinition = visitImportedEnvDefinition;
function visitEnvDefinition(def, transforms) {
    return visitObjectDefinition(def, transforms);
}
exports.visitEnvDefinition = visitEnvDefinition;
function visitMapDefinition(def, transforms) {
    var result = Object.assign({}, def);
    result = transformType(result, transforms.enter);
    result = visitAnyDefinition(result, transforms);
    if (result.key) {
        result.key = transformType(result.key, transforms.enter);
        result.key = transformType(result.key, transforms.leave);
    }
    if (result.value) {
        result.value = transformType(result.value, transforms.enter);
        result.value = transformType(result.value, transforms.leave);
    }
    return transformType(result, transforms.leave);
}
exports.visitMapDefinition = visitMapDefinition;
function transformType(type, transform) {
    if (!transform) {
        return type;
    }
    var result = Object.assign({}, type);
    var GenericDefinition = transform.GenericDefinition, ObjectDefinition = transform.ObjectDefinition, ObjectRef = transform.ObjectRef, AnyDefinition = transform.AnyDefinition, ScalarDefinition = transform.ScalarDefinition, EnumDefinition = transform.EnumDefinition, EnumRef = transform.EnumRef, ArrayDefinition = transform.ArrayDefinition, PropertyDefinition = transform.PropertyDefinition, MethodDefinition = transform.MethodDefinition, ModuleDefinition = transform.ModuleDefinition, InterfaceDefinition = transform.InterfaceDefinition, ImportedEnumDefinition = transform.ImportedEnumDefinition, ImportedModuleDefinition = transform.ImportedModuleDefinition, ImportedObjectDefinition = transform.ImportedObjectDefinition, InterfaceImplementedDefinition = transform.InterfaceImplementedDefinition, EnvDefinition = transform.EnvDefinition, MapDefinition = transform.MapDefinition, ImportedEnvDefinition = transform.ImportedEnvDefinition;
    if (GenericDefinition && abi_1.isKind(result, abi_1.DefinitionKind.Generic)) {
        result = Object.assign(result, GenericDefinition(result));
    }
    if (ObjectDefinition && abi_1.isKind(result, abi_1.DefinitionKind.Object)) {
        result = Object.assign(result, ObjectDefinition(result));
    }
    if (ObjectRef && abi_1.isKind(result, abi_1.DefinitionKind.ObjectRef)) {
        result = Object.assign(result, ObjectRef(result));
    }
    if (AnyDefinition && abi_1.isKind(result, abi_1.DefinitionKind.Any)) {
        result = Object.assign(result, AnyDefinition(result));
    }
    if (ScalarDefinition && abi_1.isKind(result, abi_1.DefinitionKind.Scalar)) {
        result = Object.assign(result, ScalarDefinition(result));
    }
    if (EnumDefinition && abi_1.isKind(result, abi_1.DefinitionKind.Enum)) {
        result = Object.assign(result, EnumDefinition(result));
    }
    if (EnumRef && abi_1.isKind(result, abi_1.DefinitionKind.EnumRef)) {
        result = Object.assign(result, EnumRef(result));
    }
    if (ArrayDefinition && abi_1.isKind(result, abi_1.DefinitionKind.Array)) {
        result = Object.assign(result, ArrayDefinition(result));
    }
    if (PropertyDefinition && abi_1.isKind(result, abi_1.DefinitionKind.Property)) {
        result = Object.assign(result, PropertyDefinition(result));
    }
    if (MethodDefinition && abi_1.isKind(result, abi_1.DefinitionKind.Method)) {
        result = Object.assign(result, MethodDefinition(result));
    }
    if (ModuleDefinition && abi_1.isKind(result, abi_1.DefinitionKind.Module)) {
        result = Object.assign(result, ModuleDefinition(result));
    }
    if (InterfaceDefinition && abi_1.isKind(result, abi_1.DefinitionKind.Interface)) {
        result = Object.assign(result, InterfaceDefinition(result));
    }
    if (ImportedModuleDefinition &&
        abi_1.isKind(result, abi_1.DefinitionKind.ImportedModule)) {
        result = Object.assign(result, ImportedModuleDefinition(result));
    }
    if (ImportedEnumDefinition && abi_1.isKind(result, abi_1.DefinitionKind.ImportedEnum)) {
        result = Object.assign(result, ImportedEnumDefinition(result));
    }
    if (ImportedObjectDefinition &&
        abi_1.isKind(result, abi_1.DefinitionKind.ImportedObject)) {
        result = Object.assign(result, ImportedObjectDefinition(result));
    }
    if (InterfaceImplementedDefinition &&
        abi_1.isKind(result, abi_1.DefinitionKind.InterfaceImplemented)) {
        result = Object.assign(result, InterfaceImplementedDefinition(result));
    }
    if (EnvDefinition && abi_1.isKind(result, abi_1.DefinitionKind.Env)) {
        result = Object.assign(result, EnvDefinition(result));
    }
    if (ImportedEnvDefinition && abi_1.isKind(result, abi_1.DefinitionKind.ImportedEnv)) {
        result = Object.assign(result, ImportedEnvDefinition(result));
    }
    if (MapDefinition && abi_1.isKind(result, abi_1.DefinitionKind.Map)) {
        result = Object.assign(result, MapDefinition(result));
    }
    return result;
}
exports.transformType = transformType;
//# sourceMappingURL=index.js.map