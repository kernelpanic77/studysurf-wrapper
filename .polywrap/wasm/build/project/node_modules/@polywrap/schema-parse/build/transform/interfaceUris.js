"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.interfaceUris = void 0;
function interfaceUris() {
    var uniqueInterfaceUris = {};
    var uniqueModuleInterfaceTypes = {};
    var uniqueObjectInterfaceTypes = {};
    return {
        enter: {
            ModuleDefinition: function (def) {
                var e_1, _a;
                if (def.interfaces) {
                    try {
                        for (var _b = __values(def.interfaces), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var interfaceDef = _c.value;
                            uniqueModuleInterfaceTypes[interfaceDef.type] = true;
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                return def;
            },
            ObjectDefinition: function (def) {
                var e_2, _a;
                if (def.interfaces) {
                    try {
                        for (var _b = __values(def.interfaces), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var interfaceDef = _c.value;
                            uniqueObjectInterfaceTypes[interfaceDef.type] = true;
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                return def;
            },
        },
        leave: {
            Abi: function (abi) {
                var e_3, _a, e_4, _b;
                var _loop_1 = function (interfaceType) {
                    var importedInterface = abi.importedModuleTypes &&
                        abi.importedModuleTypes.find(function (importedModule) { return importedModule.type === interfaceType; });
                    if (importedInterface) {
                        uniqueInterfaceUris[importedInterface.uri] = true;
                    }
                };
                try {
                    for (var _c = __values(Object.keys(uniqueModuleInterfaceTypes)), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var interfaceType = _d.value;
                        _loop_1(interfaceType);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                var _loop_2 = function (interfaceType) {
                    var importedInterface = abi.importedObjectTypes &&
                        abi.importedObjectTypes.find(function (importedObject) { return importedObject.type === interfaceType; });
                    if (importedInterface) {
                        uniqueInterfaceUris[importedInterface.uri] = true;
                    }
                };
                try {
                    for (var _e = __values(Object.keys(uniqueObjectInterfaceTypes)), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var interfaceType = _f.value;
                        _loop_2(interfaceType);
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                return __assign(__assign({}, abi), { interfaceUris: Object.keys(uniqueInterfaceUris) });
            },
        },
    };
}
exports.interfaceUris = interfaceUris;
//# sourceMappingURL=interfaceUris.js.map