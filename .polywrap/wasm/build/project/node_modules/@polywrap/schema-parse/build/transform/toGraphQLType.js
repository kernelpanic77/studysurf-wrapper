"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toGraphQLType = exports.toPrefixedGraphQLType = exports.toPrefixedGraphQL = exports.toGraphQL = void 0;
var __1 = require("..");
function applyRequired(type, required) {
    return "" + type + (required ? "!" : "");
}
function anyToGraphQL(any, prefixed) {
    if (any.object) {
        return toGraphQL(any.object, prefixed);
    }
    else if (any.array) {
        return toGraphQL(any.array, prefixed);
    }
    else if (any.scalar) {
        return toGraphQL(any.scalar, prefixed);
    }
    else if (any.enum) {
        return toGraphQL(any.enum, prefixed);
    }
    else if (any.map) {
        return toGraphQL(any.map, prefixed);
    }
    else {
        throw Error("anyToGraphQL: Any type is invalid.\n" + JSON.stringify(any, null, 2));
    }
}
function toGraphQL(def, prefixed) {
    if (prefixed === void 0) { prefixed = false; }
    switch (def.kind) {
        case __1.DefinitionKind.Object:
        case __1.DefinitionKind.ObjectRef:
        case __1.DefinitionKind.Scalar:
        case __1.DefinitionKind.ImportedObject:
            return applyRequired(def.type, def.required);
        case __1.DefinitionKind.Enum:
        case __1.DefinitionKind.EnumRef:
        case __1.DefinitionKind.ImportedEnum:
            if (prefixed) {
                return applyRequired("Enum_" + def.type, def.required);
            }
            return applyRequired(def.type, def.required);
        case __1.DefinitionKind.Any:
        case __1.DefinitionKind.Property:
            return anyToGraphQL(def, prefixed);
        case __1.DefinitionKind.Array: {
            var array = def;
            if (!array.item) {
                throw Error("toGraphQL: ArrayDefinition's item type is undefined.\n" + JSON.stringify(array, null, 2));
            }
            return applyRequired("[" + toGraphQL(array.item, prefixed) + "]", array.required);
        }
        case __1.DefinitionKind.Map: {
            var map = def;
            if (!map.key) {
                throw Error("toGraphQL: MapDefinition's key type is undefined.\n" + JSON.stringify(map, null, 2));
            }
            if (!map.value) {
                throw Error("toGraphQL: MapDefinition's value type is undefined.\n" + JSON.stringify(map, null, 2));
            }
            return applyRequired("Map<" + toGraphQL(map.key, prefixed) + ", " + toGraphQL(map.value, prefixed) + ">", map.required);
        }
        case __1.DefinitionKind.Method: {
            var method = def;
            if (!method.return) {
                throw Error("toGraphQL: MethodDefinition's return type is undefined.\n" + JSON.stringify(method, null, 2));
            }
            var result = method.name + "(\n  " + (method.arguments || [])
                .map(function (arg) { return arg.name + ": " + toGraphQL(arg, prefixed); })
                .join("\n    ") + "\n): " + toGraphQL(method.return, prefixed);
            return result;
        }
        case __1.DefinitionKind.Module:
            return def.type;
        case __1.DefinitionKind.ImportedModule:
            return def.type;
        default:
            throw Error("toGraphQL: Unrecognized DefinitionKind.\n" + JSON.stringify(def, null, 2));
    }
}
exports.toGraphQL = toGraphQL;
function toPrefixedGraphQL(def) {
    return toGraphQL(def, true);
}
exports.toPrefixedGraphQL = toPrefixedGraphQL;
exports.toPrefixedGraphQLType = {
    enter: {
        GenericDefinition: function (def) { return (__assign(__assign({}, def), { toGraphQLType: function () { return toPrefixedGraphQL(def); } })); },
    },
};
exports.toGraphQLType = {
    enter: {
        GenericDefinition: function (def) { return (__assign(__assign({}, def), { toGraphQLType: function () { return toGraphQL(def); } })); },
    },
};
//# sourceMappingURL=toGraphQLType.js.map