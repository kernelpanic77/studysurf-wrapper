export declare const ensAddresses: {
    readonly ensAddress: "0xe78A0F7E598Cc8b0Bb87894B0F60dD2a88d6a8Ab";
    readonly resolverAddress: "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24";
    readonly registrarAddress: "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb";
    readonly reverseAddress: "0xe982E462b094850F12AF94d21D470e21bE9D0E9C";
};
export declare const providers: {
    ipfs: string;
    ethereum: string;
    http: string;
};
export declare const embeddedWrappers: {
    ens: string;
    uts46: string;
    sha3: string;
};
export declare const initTestEnvironment: (cli?: string | undefined) => Promise<void>;
export declare const stopTestEnvironment: (cli?: string | undefined) => Promise<void>;
export declare const runCLI: (options: {
    args: string[];
    cwd?: string;
    cli?: string;
    env?: Record<string, string>;
}) => Promise<{
    exitCode: number;
    stdout: string;
    stderr: string;
}>;
export declare function buildWrapper(wrapperAbsPath: string, manifestPathOverride?: string): Promise<void>;
export declare function buildAndDeployWrapper({ wrapperAbsPath, ipfsProvider, ethereumProvider, ensName, }: {
    wrapperAbsPath: string;
    ipfsProvider: string;
    ethereumProvider: string;
    ensName?: string;
}): Promise<{
    ensDomain: string;
    ipfsCid: string;
}>;
export declare function buildAndDeployWrapperToHttp({ wrapperAbsPath, httpProvider, name, }: {
    wrapperAbsPath: string;
    httpProvider: string;
    name?: string;
}): Promise<{
    uri: string;
}>;
