"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildAndDeployWrapperToHttp = exports.buildAndDeployWrapper = exports.buildWrapper = exports.runCLI = exports.stopTestEnvironment = exports.initTestEnvironment = exports.embeddedWrappers = exports.providers = exports.ensAddresses = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
var generate_name_1 = require("./generate-name");
var path_1 = __importDefault(require("path"));
var spawn_command_1 = __importDefault(require("spawn-command"));
var axios_1 = __importDefault(require("axios"));
var fs_1 = __importDefault(require("fs"));
var yaml_1 = __importDefault(require("yaml"));
var core_js_1 = require("@polywrap/core-js");
var polywrap_manifest_types_js_1 = require("@polywrap/polywrap-manifest-types-js");
exports.ensAddresses = {
    ensAddress: "0xe78A0F7E598Cc8b0Bb87894B0F60dD2a88d6a8Ab",
    resolverAddress: "0x5b1869D9A4C187F2EAa108f3062412ecf0526b24",
    registrarAddress: "0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb",
    reverseAddress: "0xe982E462b094850F12AF94d21D470e21bE9D0E9C",
};
exports.providers = {
    ipfs: "http://localhost:5001",
    ethereum: "http://localhost:8545",
    http: "http://localhost:3500",
};
exports.embeddedWrappers = {
    ens: "wrap://fs/" + path_1.default.join(__dirname, "wrappers", "ens"),
    uts46: "wrap://fs/" + path_1.default.join(__dirname, "wrappers", "uts46"),
    sha3: "wrap://fs/" + path_1.default.join(__dirname, "wrappers", "sha3"),
};
var monorepoCli = __dirname + "/../../../cli/bin/polywrap";
var npmCli = __dirname + "/../../../polywrap/bin/polywrap";
function awaitResponse(url, expectedRes, getPost, timeout, maxTimeout, data) {
    return __awaiter(this, void 0, void 0, function () {
        var time, request, success;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    time = 0;
                    _a.label = 1;
                case 1:
                    if (!(time < maxTimeout)) return [3 /*break*/, 4];
                    request = getPost === "get" ? axios_1.default.get(url) : axios_1.default.post(url, data);
                    return [4 /*yield*/, request
                            .then(function (response) {
                            var responseData = JSON.stringify(response.data);
                            return responseData.indexOf(expectedRes) > -1;
                        })
                            .catch(function () {
                            return false;
                        })];
                case 2:
                    success = _a.sent();
                    if (success) {
                        return [2 /*return*/, true];
                    }
                    return [4 /*yield*/, new Promise(function (resolve) {
                            setTimeout(function () { return resolve(); }, timeout);
                        })];
                case 3:
                    _a.sent();
                    time += timeout;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/, false];
            }
        });
    });
}
var initTestEnvironment = function (cli) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, exitCode, stderr, stdout, success;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, exports.runCLI({
                    args: ["infra", "up", "--modules=eth-ens-ipfs", "--verbose"],
                    cli: cli,
                })];
            case 1:
                _a = _b.sent(), exitCode = _a.exitCode, stderr = _a.stderr, stdout = _a.stdout;
                if (exitCode) {
                    throw Error("initTestEnvironment failed to start test environment.\nExit Code: " + exitCode + "\nStdErr: " + stderr + "\nStdOut: " + stdout);
                }
                success = false;
                return [4 /*yield*/, awaitResponse("http://localhost:5001/api/v0/version", '"Version":', "get", 2000, 20000)];
            case 2:
                // IPFS
                success = _b.sent();
                if (!success) {
                    throw Error("test-env: IPFS failed to start");
                }
                return [4 /*yield*/, awaitResponse("http://localhost:8545", '"jsonrpc":', "post", 2000, 20000, '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":83}')];
            case 3:
                // Ganache
                success = _b.sent();
                if (!success) {
                    throw Error("test-env: Ganache failed to start");
                }
                return [4 /*yield*/, awaitResponse("http://localhost:8545", '"result":"0x', "post", 2000, 20000, "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getCode\",\"params\":[\"" + exports.ensAddresses.ensAddress + "\", \"0x2\"],\"id\":1}")];
            case 4:
                // ENS
                success = _b.sent();
                if (!success) {
                    throw Error("test-env: ENS failed to deploy");
                }
                return [2 /*return*/];
        }
    });
}); };
exports.initTestEnvironment = initTestEnvironment;
var stopTestEnvironment = function (cli) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, exitCode, stderr;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, exports.runCLI({
                    args: ["infra", "down", "--modules=eth-ens-ipfs"],
                    cli: cli,
                })];
            case 1:
                _a = _b.sent(), exitCode = _a.exitCode, stderr = _a.stderr;
                if (exitCode) {
                    throw Error("stopTestEnvironment failed to stop test environment.\nExit Code: " + exitCode + "\nStdErr: " + stderr);
                }
                return [2 /*return*/, Promise.resolve()];
        }
    });
}); };
exports.stopTestEnvironment = stopTestEnvironment;
var runCLI = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, exitCode, stdout, stderr;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {
                    var _a, _b;
                    if (!options.cwd) {
                        // Make sure to set an absolute working directory
                        var cwd = process.cwd();
                        options.cwd = cwd[0] !== "/" ? path_1.default.resolve(__dirname, cwd) : cwd;
                    }
                    // Resolve the CLI
                    if (!options.cli) {
                        if (fs_1.default.existsSync(monorepoCli)) {
                            options.cli = monorepoCli;
                        }
                        else if (fs_1.default.existsSync(npmCli)) {
                            options.cli = npmCli;
                        }
                        else {
                            throw Error("runCli is missing a valid CLI path, please provide one");
                        }
                    }
                    var command = "node " + options.cli + " " + options.args.join(" ");
                    var child = spawn_command_1.default(command, { cwd: options.cwd, env: options.env });
                    var stdout = "";
                    var stderr = "";
                    child.on("error", function (error) {
                        reject(error);
                    });
                    (_a = child.stdout) === null || _a === void 0 ? void 0 : _a.on("data", function (data) {
                        stdout += data.toString();
                    });
                    (_b = child.stderr) === null || _b === void 0 ? void 0 : _b.on("data", function (data) {
                        stderr += data.toString();
                    });
                    child.on("exit", function (exitCode) {
                        resolve([exitCode, stdout, stderr]);
                    });
                })];
            case 1:
                _a = __read.apply(void 0, [_b.sent(), 3]), exitCode = _a[0], stdout = _a[1], stderr = _a[2];
                return [2 /*return*/, {
                        exitCode: exitCode,
                        stdout: stdout,
                        stderr: stderr,
                    }];
        }
    });
}); };
exports.runCLI = runCLI;
function buildWrapper(wrapperAbsPath, manifestPathOverride) {
    return __awaiter(this, void 0, void 0, function () {
        var manifestPath, _a, buildExitCode, buildStdout, buildStderr;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    manifestPath = manifestPathOverride
                        ? path_1.default.join(wrapperAbsPath, manifestPathOverride)
                        : wrapperAbsPath + "/polywrap.yaml";
                    return [4 /*yield*/, exports.runCLI({
                            args: [
                                "build",
                                "--manifest-file",
                                manifestPath,
                                "--output-dir",
                                wrapperAbsPath + "/build",
                            ],
                        })];
                case 1:
                    _a = _b.sent(), buildExitCode = _a.exitCode, buildStdout = _a.stdout, buildStderr = _a.stderr;
                    if (buildExitCode !== 0) {
                        console.error("polywrap exited with code: " + buildExitCode);
                        console.log("stderr:\n" + buildStderr);
                        console.log("stdout:\n" + buildStdout);
                        throw Error("polywrap CLI failed");
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.buildWrapper = buildWrapper;
function buildAndDeployWrapper(_a) {
    var wrapperAbsPath = _a.wrapperAbsPath, ipfsProvider = _a.ipfsProvider, ethereumProvider = _a.ethereumProvider, ensName = _a.ensName;
    return __awaiter(this, void 0, void 0, function () {
        var manifestPath, tempManifestFilename, tempDeployManifestFilename, tempManifestPath, tempDeployManifestPath, wrapperEns, _b, __type, polywrapManifest, deployManifest, _c, deployExitCode, deployStdout, deployStderr, extractCID, result, wrapperCid;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    manifestPath = wrapperAbsPath + "/polywrap.yaml";
                    tempManifestFilename = "polywrap-temp.yaml";
                    tempDeployManifestFilename = "polywrap.deploy-temp.yaml";
                    tempManifestPath = path_1.default.join(wrapperAbsPath, tempManifestFilename);
                    tempDeployManifestPath = path_1.default.join(wrapperAbsPath, tempDeployManifestFilename);
                    wrapperEns = ensName !== null && ensName !== void 0 ? ensName : generate_name_1.generateName() + ".eth";
                    return [4 /*yield*/, buildWrapper(wrapperAbsPath)];
                case 1:
                    _d.sent();
                    _b = polywrap_manifest_types_js_1.deserializePolywrapManifest(fs_1.default.readFileSync(manifestPath, "utf-8")), __type = _b.__type, polywrapManifest = __rest(_b, ["__type"]);
                    fs_1.default.writeFileSync(tempManifestPath, yaml_1.default.stringify(__assign(__assign({}, polywrapManifest), { extensions: __assign(__assign({}, polywrapManifest.extensions), { deploy: "./" + tempDeployManifestFilename }) }), null, 2));
                    deployManifest = {
                        format: "0.2.0",
                        jobs: {
                            buildAndDeployWrapper: {
                                config: {
                                    provider: ethereumProvider,
                                    ensRegistryAddress: exports.ensAddresses.ensAddress,
                                    ensRegistrarAddress: exports.ensAddresses.registrarAddress,
                                    ensResolverAddress: exports.ensAddresses.resolverAddress,
                                },
                                steps: [
                                    {
                                        name: "registerName",
                                        package: "ens-recursive-name-register",
                                        uri: "wrap://ens/" + wrapperEns,
                                    },
                                    {
                                        name: "ipfsDeploy",
                                        package: "ipfs",
                                        uri: "fs/" + wrapperAbsPath + "/build",
                                        config: {
                                            gatewayUri: ipfsProvider,
                                        },
                                    },
                                    {
                                        name: "ensPublish",
                                        package: "ens",
                                        uri: "$$ipfsDeploy",
                                        config: {
                                            domainName: wrapperEns,
                                        },
                                    },
                                ],
                            },
                        },
                    };
                    fs_1.default.writeFileSync(tempDeployManifestPath, yaml_1.default.stringify(deployManifest, null, 2));
                    return [4 /*yield*/, exports.runCLI({
                            args: ["deploy", "--manifest-file", tempManifestPath],
                        })];
                case 2:
                    _c = _d.sent(), deployExitCode = _c.exitCode, deployStdout = _c.stdout, deployStderr = _c.stderr;
                    if (deployExitCode !== 0) {
                        console.error("polywrap exited with code: " + deployExitCode);
                        console.log("stderr:\n" + deployStderr);
                        console.log("stdout:\n" + deployStdout);
                        throw Error("polywrap CLI failed");
                    }
                    // remove manually configured manifests
                    fs_1.default.unlinkSync(tempManifestPath);
                    fs_1.default.unlinkSync(tempDeployManifestPath);
                    extractCID = /(wrap:\/\/ipfs\/[A-Za-z0-9]+)/;
                    result = deployStdout.match(extractCID);
                    if (!result) {
                        throw Error("polywrap CLI output missing IPFS CID.\nOutput: " + deployStdout);
                    }
                    wrapperCid = new core_js_1.Uri(result[1]).path;
                    return [2 /*return*/, {
                            ensDomain: wrapperEns,
                            ipfsCid: wrapperCid,
                        }];
            }
        });
    });
}
exports.buildAndDeployWrapper = buildAndDeployWrapper;
function buildAndDeployWrapperToHttp(_a) {
    var wrapperAbsPath = _a.wrapperAbsPath, httpProvider = _a.httpProvider, name = _a.name;
    return __awaiter(this, void 0, void 0, function () {
        var manifestPath, tempManifestFilename, tempDeployManifestFilename, tempManifestPath, tempDeployManifestPath, wrapperName, postUrl, _b, __type, polywrapManifest, deployManifest, _c, deployExitCode, deployStdout, deployStderr;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    manifestPath = wrapperAbsPath + "/polywrap.yaml";
                    tempManifestFilename = "polywrap-temp.yaml";
                    tempDeployManifestFilename = "polywrap.deploy-temp.yaml";
                    tempManifestPath = path_1.default.join(wrapperAbsPath, tempManifestFilename);
                    tempDeployManifestPath = path_1.default.join(wrapperAbsPath, tempDeployManifestFilename);
                    wrapperName = name !== null && name !== void 0 ? name : generate_name_1.generateName();
                    postUrl = httpProvider + "/wrappers/local/" + wrapperName;
                    return [4 /*yield*/, buildWrapper(wrapperAbsPath)];
                case 1:
                    _d.sent();
                    _b = polywrap_manifest_types_js_1.deserializePolywrapManifest(fs_1.default.readFileSync(manifestPath, "utf-8")), __type = _b.__type, polywrapManifest = __rest(_b, ["__type"]);
                    polywrapManifest.extensions = __assign(__assign({}, polywrapManifest.extensions), { deploy: "./" + tempDeployManifestFilename });
                    fs_1.default.writeFileSync(tempManifestPath, yaml_1.default.stringify(__assign({}, polywrapManifest), null, 2));
                    deployManifest = {
                        format: "0.2.0",
                        jobs: {
                            buildAndDeployWrapperToHttp: {
                                steps: [
                                    {
                                        name: "httpDeploy",
                                        package: "http",
                                        uri: "fs/" + wrapperAbsPath + "/build",
                                        config: {
                                            postUrl: postUrl,
                                        },
                                    },
                                ],
                            },
                        },
                    };
                    fs_1.default.writeFileSync(tempDeployManifestPath, yaml_1.default.stringify(deployManifest, null, 2));
                    return [4 /*yield*/, exports.runCLI({
                            args: ["deploy", "--manifest-file", tempManifestPath],
                        })];
                case 2:
                    _c = _d.sent(), deployExitCode = _c.exitCode, deployStdout = _c.stdout, deployStderr = _c.stderr;
                    if (deployExitCode !== 0) {
                        console.error("polywrap exited with code: " + deployExitCode);
                        console.log("stderr:\n" + deployStderr);
                        console.log("stdout:\n" + deployStdout);
                        throw Error("polywrap CLI failed");
                    }
                    // remove manually configured manifests
                    fs_1.default.unlinkSync(tempManifestPath);
                    fs_1.default.unlinkSync(tempDeployManifestPath);
                    return [2 /*return*/, {
                            uri: postUrl,
                        }];
            }
        });
    });
}
exports.buildAndDeployWrapperToHttp = buildAndDeployWrapperToHttp;
//# sourceMappingURL=index.js.map