"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtendableUriResolver = void 0;
var UriResolverWrapper_1 = require("./UriResolverWrapper");
var core_js_1 = require("@polywrap/core-js");
var result_1 = require("@polywrap/result");
var uri_resolvers_js_1 = require("@polywrap/uri-resolvers-js");
var ExtendableUriResolver = /** @class */ (function (_super) {
    __extends(ExtendableUriResolver, _super);
    function ExtendableUriResolver(resolverName) {
        var _this = _super.call(this) || this;
        _this.getStepDescription = function () { return "" + _this.resolverName; };
        _this.resolverName = resolverName !== null && resolverName !== void 0 ? resolverName : "ExtendableUriResolver";
        return _this;
    }
    ExtendableUriResolver.prototype.getUriResolvers = function (uri, client, resolutionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var getImplementationsResult, uriResolverImpls, resolvers;
            return __generator(this, function (_a) {
                getImplementationsResult = core_js_1.getImplementations(core_js_1.coreInterfaceUris.uriResolver, client.getInterfaces(), client.getRedirects());
                if (!getImplementationsResult.ok) {
                    return [2 /*return*/, getImplementationsResult];
                }
                uriResolverImpls = getImplementationsResult.value;
                resolvers = uriResolverImpls
                    .filter(function (x) { return !resolutionContext.isResolving(x); })
                    .map(function (implementationUri) { return new UriResolverWrapper_1.UriResolverWrapper(implementationUri); });
                return [2 /*return*/, result_1.ResultOk(resolvers)];
            });
        });
    };
    ExtendableUriResolver.prototype.tryResolveUri = function (uri, client, resolutionContext) {
        return __awaiter(this, void 0, void 0, function () {
            var result, resolvers;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getUriResolvers(uri, client, resolutionContext)];
                    case 1:
                        result = _a.sent();
                        if (!result.ok) {
                            return [2 /*return*/, core_js_1.UriResolutionResult.err(result.error)];
                        }
                        resolvers = result.value;
                        if (resolvers.length === 0) {
                            return [2 /*return*/, core_js_1.UriResolutionResult.ok(uri)];
                        }
                        return [4 /*yield*/, _super.prototype.tryResolveUriWithResolvers.call(this, uri, client, resolvers, resolutionContext)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ExtendableUriResolver;
}(uri_resolvers_js_1.UriResolverAggregatorBase));
exports.ExtendableUriResolver = ExtendableUriResolver;
//# sourceMappingURL=ExtendableUriResolver.js.map