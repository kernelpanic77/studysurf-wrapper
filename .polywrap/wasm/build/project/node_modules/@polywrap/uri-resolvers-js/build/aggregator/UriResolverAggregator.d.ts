import { UriResolverAggregatorBase } from "./UriResolverAggregatorBase";
import { UriResolverLike } from "../helpers";
import { Result } from "@polywrap/result";
import { IUriResolver, Uri, Client } from "@polywrap/core-js";
export declare type GetResolversFunc = (uri: Uri, client: Client) => Promise<IUriResolver<unknown>[]>;
export declare type GetResolversWithErrorFunc<TError> = (uri: Uri, client: Client) => Promise<Result<IUriResolver<unknown>[], TError>>;
export declare class UriResolverAggregator<TResolutionError = undefined, TGetResolversError = undefined> extends UriResolverAggregatorBase<TResolutionError, TGetResolversError> {
    private resolverName?;
    private resolvers;
    constructor(resolvers: UriResolverLike[], resolverName?: string);
    constructor(resolvers: (uri: Uri, client: Client) => Promise<Result<IUriResolver<unknown>[], TGetResolversError>>, resolverName?: string);
    constructor(resolvers: GetResolversFunc, resolverName?: string);
    getUriResolvers(uri: Uri, client: Client): Promise<Result<IUriResolver<unknown>[], TGetResolversError>>;
    protected getStepDescription: () => string;
}
