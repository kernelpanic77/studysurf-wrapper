import { IUriResolver, Uri, Client, IUriResolutionContext, UriPackageOrWrapper } from "@polywrap/core-js";
import { Result } from "@polywrap/result";
export declare abstract class UriResolverAggregatorBase<TResolutionError = undefined, TGetResolversError = undefined> implements IUriResolver<TResolutionError | TGetResolversError> {
    abstract getUriResolvers(uri: Uri, client: Client, resolutionContext: IUriResolutionContext): Promise<Result<IUriResolver<unknown>[], TGetResolversError>>;
    tryResolveUri(uri: Uri, client: Client, resolutionContext: IUriResolutionContext): Promise<Result<UriPackageOrWrapper, TResolutionError | TGetResolversError>>;
    protected abstract getStepDescription(uri: Uri, result: Result<UriPackageOrWrapper, TResolutionError>): string;
    protected tryResolveUriWithResolvers(uri: Uri, client: Client, resolvers: IUriResolver<unknown>[], resolutionContext: IUriResolutionContext): Promise<Result<UriPackageOrWrapper, TResolutionError>>;
}
