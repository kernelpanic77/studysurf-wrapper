"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageToWrapperCacheResolver = void 0;
var utils_1 = require("../utils");
var core_js_1 = require("@polywrap/core-js");
var PackageToWrapperCacheResolver = /** @class */ (function () {
    function PackageToWrapperCacheResolver(cache, resolverToCache, options) {
        this.cache = cache;
        this.options = options;
        this.resolverToCache = utils_1.buildUriResolver(resolverToCache, options === null || options === void 0 ? void 0 : options.resolverName);
    }
    PackageToWrapperCacheResolver.prototype.tryResolveUri = function (uri, client, resolutionContext) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var wrapper, result_1, subContext, result, wrapPackage, resolutionPath, createResult, wrapper_1, resolutionPath_1, resolutionPath_1_1, uri_1, e_1_1, wrapper_2, resolutionPath, resolutionPath_2, resolutionPath_2_1, uri_2, e_2_1;
            var e_1, _c, e_2, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4 /*yield*/, this.cache.get(uri)];
                    case 1:
                        wrapper = _e.sent();
                        if (wrapper) {
                            result_1 = core_js_1.UriResolutionResult.ok(uri, wrapper);
                            resolutionContext.trackStep({
                                sourceUri: uri,
                                result: result_1,
                                description: "PackageToWrapperCacheResolver (Cache)",
                            });
                            return [2 /*return*/, result_1];
                        }
                        subContext = resolutionContext.createSubHistoryContext();
                        return [4 /*yield*/, this.resolverToCache.tryResolveUri(uri, client, subContext)];
                    case 2:
                        result = _e.sent();
                        if (!result.ok) return [3 /*break*/, 20];
                        if (!(result.value.type === "package")) return [3 /*break*/, 12];
                        wrapPackage = result.value.package;
                        resolutionPath = subContext.getResolutionPath();
                        return [4 /*yield*/, wrapPackage.createWrapper({
                                noValidate: (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.deserializeManifestOptions) === null || _b === void 0 ? void 0 : _b.noValidate,
                            })];
                    case 3:
                        createResult = _e.sent();
                        if (!createResult.ok) {
                            return [2 /*return*/, createResult];
                        }
                        wrapper_1 = createResult.value;
                        _e.label = 4;
                    case 4:
                        _e.trys.push([4, 9, 10, 11]);
                        resolutionPath_1 = __values(resolutionPath), resolutionPath_1_1 = resolutionPath_1.next();
                        _e.label = 5;
                    case 5:
                        if (!!resolutionPath_1_1.done) return [3 /*break*/, 8];
                        uri_1 = resolutionPath_1_1.value;
                        return [4 /*yield*/, this.cache.set(uri_1, wrapper_1)];
                    case 6:
                        _e.sent();
                        _e.label = 7;
                    case 7:
                        resolutionPath_1_1 = resolutionPath_1.next();
                        return [3 /*break*/, 5];
                    case 8: return [3 /*break*/, 11];
                    case 9:
                        e_1_1 = _e.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 11];
                    case 10:
                        try {
                            if (resolutionPath_1_1 && !resolutionPath_1_1.done && (_c = resolutionPath_1.return)) _c.call(resolutionPath_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 11:
                        result = core_js_1.UriResolutionResult.ok(result.value.uri, wrapper_1);
                        return [3 /*break*/, 20];
                    case 12:
                        if (!(result.value.type === "wrapper")) return [3 /*break*/, 20];
                        wrapper_2 = result.value.wrapper;
                        resolutionPath = subContext.getResolutionPath();
                        _e.label = 13;
                    case 13:
                        _e.trys.push([13, 18, 19, 20]);
                        resolutionPath_2 = __values(resolutionPath), resolutionPath_2_1 = resolutionPath_2.next();
                        _e.label = 14;
                    case 14:
                        if (!!resolutionPath_2_1.done) return [3 /*break*/, 17];
                        uri_2 = resolutionPath_2_1.value;
                        return [4 /*yield*/, this.cache.set(uri_2, wrapper_2)];
                    case 15:
                        _e.sent();
                        _e.label = 16;
                    case 16:
                        resolutionPath_2_1 = resolutionPath_2.next();
                        return [3 /*break*/, 14];
                    case 17: return [3 /*break*/, 20];
                    case 18:
                        e_2_1 = _e.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 20];
                    case 19:
                        try {
                            if (resolutionPath_2_1 && !resolutionPath_2_1.done && (_d = resolutionPath_2.return)) _d.call(resolutionPath_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 20:
                        resolutionContext.trackStep({
                            sourceUri: uri,
                            result: result,
                            subHistory: subContext.getHistory(),
                            description: "PackageToWrapperCacheResolver",
                        });
                        return [2 /*return*/, result];
                }
            });
        });
    };
    return PackageToWrapperCacheResolver;
}());
exports.PackageToWrapperCacheResolver = PackageToWrapperCacheResolver;
//# sourceMappingURL=PackageToWrapperCacheResolver.js.map