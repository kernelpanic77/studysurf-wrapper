"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readString = exports.readBytes = exports.writeBytes = exports.writeString = void 0;
function writeString(str, dst, dstOffset) {
    var encoder = new TextEncoder();
    var strBuffer = encoder.encode(str);
    var view = new Uint8Array(dst);
    return memcpy(strBuffer, 0, view, dstOffset, strBuffer.byteLength);
}
exports.writeString = writeString;
function writeBytes(bytes, dst, dstOffset) {
    var bytesView = new Uint8Array(bytes);
    var dstView = new Uint8Array(dst);
    return memcpy(bytesView, 0, dstView, dstOffset, bytesView.byteLength);
}
exports.writeBytes = writeBytes;
function readBytes(from, offset, length) {
    var buffer = new ArrayBuffer(length);
    writeBytes(from.slice(offset, offset + length), buffer, 0);
    return buffer;
}
exports.readBytes = readBytes;
function readString(from, offset, length) {
    var buffer = readBytes(from, offset, length);
    var decoder = new TextDecoder();
    return decoder.decode(buffer);
}
exports.readString = readString;
function memcpy(src, srcOffset, dst, dstOffset, length) {
    src = (src.subarray || src.slice ? src : src.buffer);
    dst = (dst.subarray || dst.slice ? dst : dst.buffer);
    src = srcOffset
        ? src.subarray
            ? src.subarray(srcOffset, length && srcOffset + length)
            : src.slice(srcOffset, length && srcOffset + length)
        : src;
    if (dst.set) {
        dst.set(src, dstOffset);
    }
    else {
        for (var i = 0; i < src.length; i++) {
            dst[i + dstOffset] = src[i];
        }
    }
    return dst;
}
//# sourceMappingURL=buffer.js.map