"use strict";
/* eslint-disable @typescript-eslint/naming-convention */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createImports = void 0;
var buffer_1 = require("./buffer");
var msgpack_js_1 = require("@polywrap/msgpack-js");
var createImports = function (config) {
    var memory = config.memory, state = config.state, client = config.client, abortWithInvokeAborted = config.abortWithInvokeAborted, abortWithInternalError = config.abortWithInternalError;
    return {
        wrap: {
            __wrap_subinvoke: function (uriPtr, uriLen, methodPtr, methodLen, argsPtr, argsLen) { return __awaiter(void 0, void 0, void 0, function () {
                var uri, method, args, result;
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            // Reset our state
                            state.subinvoke.result = undefined;
                            state.subinvoke.error = undefined;
                            uri = buffer_1.readString(memory.buffer, uriPtr, uriLen);
                            method = buffer_1.readString(memory.buffer, methodPtr, methodLen);
                            args = buffer_1.readBytes(memory.buffer, argsPtr, argsLen);
                            return [4 /*yield*/, client.invoke({
                                    uri: uri,
                                    method: method,
                                    args: new Uint8Array(args),
                                    encodeResult: true,
                                })];
                        case 1:
                            result = _c.sent();
                            if (result.ok) {
                                state.subinvoke.result = result.value;
                            }
                            else {
                                state.subinvoke.error = ((_a = result.error) === null || _a === void 0 ? void 0 : _a.name) + ": " + ((_b = result.error) === null || _b === void 0 ? void 0 : _b.message);
                            }
                            return [2 /*return*/, result.ok];
                    }
                });
            }); },
            // Give WASM the size of the result
            __wrap_subinvoke_result_len: function () {
                if (!state.subinvoke.result) {
                    abortWithInternalError("__wrap_subinvoke_result_len: subinvoke.result is not set");
                    return 0;
                }
                return state.subinvoke.result.byteLength;
            },
            // Copy the subinvoke result into WASM
            __wrap_subinvoke_result: function (ptr) {
                if (!state.subinvoke.result) {
                    abortWithInternalError("__wrap_subinvoke_result: subinvoke.result is not set");
                    return;
                }
                buffer_1.writeBytes(state.subinvoke.result, memory.buffer, ptr);
            },
            // Give WASM the size of the error
            __wrap_subinvoke_error_len: function () {
                if (!state.subinvoke.error) {
                    abortWithInternalError("__wrap_subinvoke_error_len: subinvoke.error is not set");
                    return 0;
                }
                return state.subinvoke.error.length;
            },
            // Copy the subinvoke error into WASM
            __wrap_subinvoke_error: function (ptr) {
                if (!state.subinvoke.error) {
                    abortWithInternalError("__wrap_subinvoke_error: subinvoke.error is not set");
                    return;
                }
                buffer_1.writeString(state.subinvoke.error, memory.buffer, ptr);
            },
            __wrap_subinvokeImplementation: function (interfaceUriPtr, interfaceUriLen, implUriPtr, implUriLen, methodPtr, methodLen, argsPtr, argsLen) { return __awaiter(void 0, void 0, void 0, function () {
                var implUri, method, args, result;
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            state.subinvokeImplementation.result = undefined;
                            state.subinvokeImplementation.error = undefined;
                            implUri = buffer_1.readString(memory.buffer, implUriPtr, implUriLen);
                            method = buffer_1.readString(memory.buffer, methodPtr, methodLen);
                            args = buffer_1.readBytes(memory.buffer, argsPtr, argsLen);
                            state.subinvokeImplementation.args = [implUri, method, args];
                            return [4 /*yield*/, client.invoke({
                                    uri: implUri,
                                    method: method,
                                    args: new Uint8Array(args),
                                    encodeResult: true,
                                })];
                        case 1:
                            result = _c.sent();
                            if (result.ok) {
                                state.subinvokeImplementation.result = result.value;
                            }
                            else {
                                state.subinvokeImplementation.error = ((_a = result.error) === null || _a === void 0 ? void 0 : _a.name) + ": " + ((_b = result.error) === null || _b === void 0 ? void 0 : _b.message);
                            }
                            return [2 /*return*/, result.ok];
                    }
                });
            }); },
            __wrap_subinvokeImplementation_result_len: function () {
                if (!state.subinvokeImplementation.result) {
                    abortWithInternalError("__wrap_subinvokeImplementation_result_len: subinvokeImplementation.result is not set");
                    return 0;
                }
                return state.subinvokeImplementation.result.byteLength;
            },
            __wrap_subinvokeImplementation_result: function (ptr) {
                if (!state.subinvokeImplementation.result) {
                    abortWithInternalError("__wrap_subinvokeImplementation_result: subinvokeImplementation.result is not set");
                    return;
                }
                buffer_1.writeBytes(state.subinvokeImplementation.result, memory.buffer, ptr);
            },
            __wrap_subinvokeImplementation_error_len: function () {
                if (!state.subinvokeImplementation.error) {
                    abortWithInternalError("__wrap_subinvokeImplementation_error_len: subinvokeImplementation.error is not set");
                    return 0;
                }
                return state.subinvokeImplementation.error.length;
            },
            __wrap_subinvokeImplementation_error: function (ptr) {
                if (!state.subinvokeImplementation.error) {
                    abortWithInternalError("__wrap_subinvokeImplementation_error: subinvokeImplementation.error is not set");
                    return;
                }
                buffer_1.writeString(state.subinvokeImplementation.error, memory.buffer, ptr);
            },
            // Copy the invocation's method & args into WASM
            __wrap_invoke_args: function (methodPtr, argsPtr) {
                if (!state.method) {
                    abortWithInternalError("__wrap_invoke_args: method is not set");
                    return;
                }
                if (!state.args) {
                    abortWithInternalError("__wrap_invoke_args: args is not set");
                    return;
                }
                buffer_1.writeString(state.method, memory.buffer, methodPtr);
                buffer_1.writeBytes(state.args, memory.buffer, argsPtr);
            },
            // Store the invocation's result
            __wrap_invoke_result: function (ptr, len) {
                state.invoke.result = new Uint8Array(buffer_1.readBytes(memory.buffer, ptr, len));
            },
            // Store the invocation's error
            __wrap_invoke_error: function (ptr, len) {
                state.invoke.error = buffer_1.readString(memory.buffer, ptr, len);
            },
            __wrap_getImplementations: function (uriPtr, uriLen) {
                var _a;
                var uri = buffer_1.readString(memory.buffer, uriPtr, uriLen);
                var result = client.getImplementations(uri, {});
                if (!result.ok) {
                    abortWithInternalError((_a = result.error) === null || _a === void 0 ? void 0 : _a.message);
                    return false;
                }
                var implementations = result.value;
                state.getImplementationsResult = msgpack_js_1.msgpackEncode(implementations);
                return implementations.length > 0;
            },
            __wrap_getImplementations_result_len: function () {
                if (!state.getImplementationsResult) {
                    abortWithInternalError("__wrap_getImplementations_result_len: result is not set");
                    return 0;
                }
                return state.getImplementationsResult.byteLength;
            },
            __wrap_getImplementations_result: function (ptr) {
                if (!state.getImplementationsResult) {
                    abortWithInternalError("__wrap_getImplementations_result: result is not set");
                    return;
                }
                buffer_1.writeBytes(state.getImplementationsResult, memory.buffer, ptr);
            },
            __wrap_load_env: function (ptr) {
                buffer_1.writeBytes(state.env, memory.buffer, ptr);
            },
            __wrap_abort: function (msgPtr, msgLen, filePtr, fileLen, line, column) {
                var msg = buffer_1.readString(memory.buffer, msgPtr, msgLen);
                var file = buffer_1.readString(memory.buffer, filePtr, fileLen);
                abortWithInvokeAborted("__wrap_abort: " + msg, {
                    file: file,
                    row: line,
                    col: column,
                });
            },
            __wrap_debug_log: function (ptr, len) {
                var msg = buffer_1.readString(memory.buffer, ptr, len);
                console.debug("__wrap_debug_log: " + msg);
            },
        },
        env: {
            memory: memory,
        },
    };
};
exports.createImports = createImports;
//# sourceMappingURL=imports.js.map