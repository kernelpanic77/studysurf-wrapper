/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export declare type ObjectDefinition = GenericDefinition & WithComment & {
    properties?: PropertyDefinition[];
    interfaces?: InterfaceImplementedDefinition[];
};
export declare type GenericDefinition = WithKind & {
    type: string;
    name?: string;
    required?: boolean;
};
export declare type PropertyDefinition = WithComment & AnyDefinition;
export declare type AnyDefinition = GenericDefinition & {
    array?: ArrayDefinition;
    scalar?: ScalarDefinition;
    map?: MapDefinition;
    object?: ObjectRef;
    enum?: EnumRef;
    unresolvedObjectOrEnum?: UnresolvedObjectOrEnumRef;
};
export declare type ArrayDefinition = AnyDefinition & {
    item?: GenericDefinition;
};
export declare type ScalarDefinition = GenericDefinition & {
    type: "UInt" | "UInt8" | "UInt16" | "UInt32" | "Int" | "Int8" | "Int16" | "Int32" | "String" | "Boolean" | "Bytes" | "BigInt" | "BigNumber" | "JSON";
};
export declare type MapDefinition = AnyDefinition & WithComment & {
    key?: MapKeyDefinition;
    value?: GenericDefinition;
};
export declare type MapKeyDefinition = AnyDefinition & {
    type?: "UInt" | "UInt8" | "UInt16" | "UInt32" | "Int" | "Int8" | "Int16" | "Int32" | "String";
};
export declare type ObjectRef = GenericDefinition;
export declare type EnumRef = GenericDefinition;
export declare type UnresolvedObjectOrEnumRef = GenericDefinition;
export declare type InterfaceImplementedDefinition = GenericDefinition;
export declare type ModuleDefinition = GenericDefinition & WithComment & {
    methods?: MethodDefinition[];
    imports?: ImportedModuleRef[];
    interfaces?: InterfaceImplementedDefinition[];
};
export declare type MethodDefinition = GenericDefinition & WithComment & {
    arguments?: PropertyDefinition[];
    env?: {
        required?: boolean;
    };
    return?: PropertyDefinition;
};
export declare type EnumDefinition = GenericDefinition & WithComment & {
    constants?: string[];
};
export declare type InterfaceDefinition = GenericDefinition & ImportedDefinition & {
    capabilities?: CapabilityDefinition;
};
export declare type ImportedObjectDefinition = ObjectDefinition & ImportedDefinition & WithComment;
export declare type ImportedModuleDefinition = GenericDefinition & ImportedDefinition & WithComment & {
    methods?: MethodDefinition[];
    isInterface?: boolean;
};
export declare type ImportedEnumDefinition = EnumDefinition & ImportedDefinition;
export declare type ImportedEnvDefinition = ImportedObjectDefinition;
export declare type EnvDefinition = ObjectDefinition;
export interface WrapManifest {
    /**
     * WRAP Standard Version
     */
    version: "0.1.0" | "0.1";
    /**
     * Wrapper Package Type
     */
    type: "wasm" | "interface" | "plugin";
    /**
     * Wrapper Name
     */
    name: string;
    abi: Abi;
}
/**
 * Information of modules
 */
export interface Abi {
    /**
     * ABI Version
     */
    version?: "0.1";
    objectTypes?: ObjectDefinition[];
    moduleType?: ModuleDefinition;
    enumTypes?: EnumDefinition[];
    interfaceTypes?: InterfaceDefinition[];
    importedObjectTypes?: ImportedObjectDefinition[];
    importedModuleTypes?: ImportedModuleDefinition[];
    importedEnumTypes?: ImportedEnumDefinition[];
    importedEnvTypes?: ImportedEnvDefinition[];
    envType?: EnvDefinition;
}
export interface WithKind {
    kind: number;
}
export interface WithComment {
    comment?: string;
}
export interface ImportedModuleRef {
    type?: string;
}
export interface ImportedDefinition {
    uri: string;
    namespace: string;
    nativeType: string;
}
export interface CapabilityDefinition {
    getImplementations?: {
        enabled: boolean;
    };
}
