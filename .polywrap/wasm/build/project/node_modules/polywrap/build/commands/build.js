"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
var createLogger_1 = require("./utils/createLogger");
var lib_1 = require("../lib");
var codegen_1 = require("../lib/codegen");
var build_strategies_1 = require("../lib/build-strategies");
var path_1 = __importDefault(require("path"));
var readline_1 = __importDefault(require("readline"));
var client_js_1 = require("@polywrap/client-js");
var defaultOutputDir = "./build";
var defaultStrategy = build_strategies_1.SupportedStrategies.VM;
var strategyStr = lib_1.intlMsg.commands_build_options_s_strategy();
var defaultManifestStr = lib_1.defaultPolywrapManifest.join(" | ");
var pathStr = lib_1.intlMsg.commands_build_options_o_path();
exports.build = {
    setup: function (program) {
        program
            .command("build")
            .alias("b")
            .description(lib_1.intlMsg.commands_build_description())
            .option("-m, --manifest-file <" + pathStr + ">", lib_1.intlMsg.commands_build_options_m({
            default: defaultManifestStr,
        }))
            .option("-o, --output-dir <" + pathStr + ">", "" + lib_1.intlMsg.commands_build_options_o({
            default: defaultOutputDir,
        }))
            .option("-c, --client-config <" + lib_1.intlMsg.commands_common_options_configPath() + ">", "" + lib_1.intlMsg.commands_common_options_config())
            .option("-n, --no-codegen", "" + lib_1.intlMsg.commands_build_options_n())
            .option("-s, --strategy <" + strategyStr + ">", "" + lib_1.intlMsg.commands_build_options_s(), defaultStrategy)
            .option("-w, --watch", "" + lib_1.intlMsg.commands_build_options_w())
            .option("-v, --verbose", lib_1.intlMsg.commands_common_options_verbose())
            .option("-q, --quiet", lib_1.intlMsg.commands_common_options_quiet())
            .action(function (options) { return __awaiter(void 0, void 0, void 0, function () {
            var _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = run;
                        _b = [__assign({}, options)];
                        _c = { manifestFile: lib_1.parseManifestFileOption(options.manifestFile, lib_1.defaultPolywrapManifest) };
                        return [4 /*yield*/, lib_1.parseClientConfigOption(options.clientConfig)];
                    case 1: return [4 /*yield*/, _a.apply(void 0, [__assign.apply(void 0, _b.concat([(_c.clientConfig = _d.sent(), _c.outputDir = lib_1.parseDirOption(options.outputDir, defaultOutputDir), _c.strategy = options.strategy, _c)]))])];
                    case 2:
                        _d.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    },
};
function validateManifestModules(polywrapManifest) {
    return __awaiter(this, void 0, void 0, function () {
        var missingModuleMessage, noInterfaceModule;
        return __generator(this, function (_a) {
            if (polywrapManifest.project.type !== "interface" &&
                !polywrapManifest.source.module) {
                missingModuleMessage = lib_1.intlMsg.lib_compiler_missingModule();
                throw Error(missingModuleMessage);
            }
            if (polywrapManifest.project.type === "interface" &&
                polywrapManifest.source.module) {
                noInterfaceModule = lib_1.intlMsg.lib_compiler_noInterfaceModule();
                throw Error(noInterfaceModule);
            }
            return [2 /*return*/];
        });
    });
}
function createBuildStrategy(strategy, outputDir, project, logger) {
    return __awaiter(this, void 0, void 0, function () {
        var isInterfaceProject;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, project.getManifest()];
                case 1:
                    isInterfaceProject = (_a.sent()).project.type === "interface";
                    if (isInterfaceProject) {
                        logger.info(lib_1.intlMsg.commands_build_info_interface_no_strategy());
                        return [2 /*return*/, new build_strategies_1.EmptyBuildStrategy({ outputDir: outputDir, project: project })];
                    }
                    switch (strategy) {
                        case build_strategies_1.SupportedStrategies.LOCAL:
                            return [2 /*return*/, new build_strategies_1.LocalBuildStrategy({ outputDir: outputDir, project: project })];
                        case build_strategies_1.SupportedStrategies.IMAGE:
                            return [2 /*return*/, new build_strategies_1.DockerImageBuildStrategy({ outputDir: outputDir, project: project })];
                        case build_strategies_1.SupportedStrategies.VM:
                            return [2 /*return*/, new build_strategies_1.DockerVMBuildStrategy({ outputDir: outputDir, project: project })];
                        default:
                            throw Error("Unknown strategy: " + strategy);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
function run(options) {
    return __awaiter(this, void 0, void 0, function () {
        var watch, manifestFile, outputDir, clientConfig, strategy, codegen, verbose, quiet, logger, client, project, polywrapManifest, buildStrategy, schemaComposer, execute, result, keyPressListener_1, watcher_1;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    watch = options.watch, manifestFile = options.manifestFile, outputDir = options.outputDir, clientConfig = options.clientConfig, strategy = options.strategy, codegen = options.codegen, verbose = options.verbose, quiet = options.quiet;
                    logger = createLogger_1.createLogger({ verbose: verbose, quiet: quiet });
                    client = new client_js_1.PolywrapClient(clientConfig);
                    project = new lib_1.PolywrapProject({
                        rootDir: path_1.default.dirname(manifestFile),
                        polywrapManifestPath: manifestFile,
                        logger: logger,
                    });
                    return [4 /*yield*/, project.validate()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, project.getManifest()];
                case 2:
                    polywrapManifest = _a.sent();
                    return [4 /*yield*/, validateManifestModules(polywrapManifest)];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, createBuildStrategy(strategy, outputDir, project, logger)];
                case 4:
                    buildStrategy = _a.sent();
                    schemaComposer = new lib_1.SchemaComposer({
                        project: project,
                        client: client,
                    });
                    execute = function () { return __awaiter(_this, void 0, void 0, function () {
                        var codeGenerator, compiler, result;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    codeGenerator = codegen
                                        ? new codegen_1.CodeGenerator({ project: project, schemaComposer: schemaComposer })
                                        : undefined;
                                    compiler = new lib_1.Compiler({
                                        project: project,
                                        outputDir: outputDir,
                                        schemaComposer: schemaComposer,
                                        buildStrategy: buildStrategy,
                                        codeGenerator: codeGenerator,
                                    });
                                    return [4 /*yield*/, compiler.compile()];
                                case 1:
                                    result = _a.sent();
                                    if (!result) {
                                        return [2 /*return*/, result];
                                    }
                                    return [2 /*return*/, true];
                            }
                        });
                    }); };
                    if (!!watch) return [3 /*break*/, 6];
                    return [4 /*yield*/, execute()];
                case 5:
                    result = _a.sent();
                    if (!result) {
                        process.exit(1);
                    }
                    process.exit(0);
                    return [3 /*break*/, 8];
                case 6: 
                // Execute
                return [4 /*yield*/, execute()];
                case 7:
                    // Execute
                    _a.sent();
                    keyPressListener_1 = function () {
                        // Watch for escape key presses
                        logger.info(lib_1.intlMsg.commands_build_keypressListener_watching() + ": " + project.getManifestDir());
                        logger.info(lib_1.intlMsg.commands_build_keypressListener_exit());
                        readline_1.default.emitKeypressEvents(process.stdin);
                        process.stdin.on("keypress", function (str, key) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!(key.name == "escape" ||
                                            key.name == "q" ||
                                            (key.name == "c" && key.ctrl))) return [3 /*break*/, 2];
                                        return [4 /*yield*/, watcher_1.stop()];
                                    case 1:
                                        _a.sent();
                                        process.kill(process.pid, "SIGINT");
                                        _a.label = 2;
                                    case 2: return [2 /*return*/];
                                }
                            });
                        }); });
                        if (process.stdin.setRawMode) {
                            process.stdin.setRawMode(true);
                        }
                        process.stdin.resume();
                    };
                    keyPressListener_1();
                    watcher_1 = new lib_1.Watcher();
                    watcher_1.start(project.getManifestDir(), {
                        ignored: [outputDir + "/**", project.getManifestDir() + "/**/wrap/**"],
                        ignoreInitial: true,
                        execute: function (events) { return __awaiter(_this, void 0, void 0, function () {
                            var events_1, events_1_1, event_1;
                            var e_1, _a;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        try {
                                            // Log all of the events encountered
                                            for (events_1 = __values(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
                                                event_1 = events_1_1.value;
                                                logger.info(lib_1.watchEventName(event_1.type) + ": " + event_1.path);
                                            }
                                        }
                                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                                        finally {
                                            try {
                                                if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);
                                            }
                                            finally { if (e_1) throw e_1.error; }
                                        }
                                        // Execute the build
                                        return [4 /*yield*/, execute()];
                                    case 1:
                                        // Execute the build
                                        _b.sent();
                                        // Process key presses
                                        keyPressListener_1();
                                        return [2 /*return*/];
                                }
                            });
                        }); },
                    });
                    _a.label = 8;
                case 8: return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=build.js.map