"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.codegen = void 0;
var createLogger_1 = require("./utils/createLogger");
var lib_1 = require("../lib");
var ScriptCodeGenerator_1 = require("../lib/codegen/ScriptCodeGenerator");
var client_js_1 = require("@polywrap/client-js");
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
var defaultCodegenDir = "./src/wrap";
var defaultPublishDir = "./build";
var pathStr = lib_1.intlMsg.commands_codegen_options_o_path();
var defaultManifestStr = lib_1.defaultPolywrapManifest.join(" | ");
exports.codegen = {
    setup: function (program) {
        program
            .command("codegen")
            .alias("g")
            .description(lib_1.intlMsg.commands_codegen_description())
            .option("-m, --manifest-file <" + pathStr + ">", "" + lib_1.intlMsg.commands_codegen_options_m({
            default: defaultManifestStr,
        }))
            .option("-g, --codegen-dir <" + pathStr + ">", " " + lib_1.intlMsg.commands_codegen_options_codegen({
            default: defaultCodegenDir,
        }))
            .option("-p, --publish-dir <" + pathStr + ">", "" + lib_1.intlMsg.commands_codegen_options_publish({
            default: defaultPublishDir,
        }))
            .option("-s, --script <" + pathStr + ">", "" + lib_1.intlMsg.commands_codegen_options_s())
            .option("-c, --client-config <" + lib_1.intlMsg.commands_common_options_configPath() + ">", "" + lib_1.intlMsg.commands_common_options_config())
            .option("-v, --verbose", lib_1.intlMsg.commands_common_options_verbose())
            .option("-q, --quiet", lib_1.intlMsg.commands_common_options_quiet())
            .action(function (options) { return __awaiter(void 0, void 0, void 0, function () {
            var _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = run;
                        _b = [__assign({}, options)];
                        _c = {};
                        return [4 /*yield*/, lib_1.parseClientConfigOption(options.clientConfig)];
                    case 1: return [4 /*yield*/, _a.apply(void 0, [__assign.apply(void 0, _b.concat([(_c.clientConfig = _d.sent(), _c.codegenDir = lib_1.parseDirOption(options.codegenDir, defaultCodegenDir), _c.script = lib_1.parseCodegenScriptOption(options.script), _c.manifestFile = lib_1.parseManifestFileOption(options.manifestFile, lib_1.defaultProjectManifestFiles), _c.publishDir = lib_1.parseDirOption(options.publishDir, defaultPublishDir), _c)]))])];
                    case 2:
                        _d.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    },
};
function run(options) {
    return __awaiter(this, void 0, void 0, function () {
        var manifestFile, codegenDir, script, clientConfig, publishDir, verbose, quiet, logger, client, project, projectType, schemaComposer, codeGenerator, result, manifestPath, _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    manifestFile = options.manifestFile, codegenDir = options.codegenDir, script = options.script, clientConfig = options.clientConfig, publishDir = options.publishDir, verbose = options.verbose, quiet = options.quiet;
                    logger = createLogger_1.createLogger({ verbose: verbose, quiet: quiet });
                    client = new client_js_1.PolywrapClient(clientConfig);
                    return [4 /*yield*/, lib_1.getProjectFromManifest(manifestFile, logger)];
                case 1:
                    project = _c.sent();
                    if (!project) {
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, project.getManifestLanguage()];
                case 2:
                    projectType = _c.sent();
                    schemaComposer = new lib_1.SchemaComposer({
                        project: project,
                        client: client,
                    });
                    codeGenerator = script
                        ? new ScriptCodeGenerator_1.ScriptCodegenerator({
                            codegenDirAbs: codegenDir,
                            script: script,
                            schemaComposer: schemaComposer,
                            project: project,
                            omitHeader: false,
                            mustacheView: undefined,
                        })
                        : new lib_1.CodeGenerator({
                            codegenDirAbs: codegenDir,
                            schemaComposer: schemaComposer,
                            project: project,
                        });
                    return [4 /*yield*/, codeGenerator.generate()];
                case 3:
                    result = _c.sent();
                    if (!lib_1.isPluginManifestLanguage(projectType)) return [3 /*break*/, 7];
                    manifestPath = path_1.default.join(publishDir, "wrap.info");
                    if (!fs_1.default.existsSync(publishDir)) {
                        fs_1.default.mkdirSync(publishDir);
                    }
                    _a = lib_1.generateWrapFile;
                    return [4 /*yield*/, schemaComposer.getComposedAbis()];
                case 4:
                    _b = [_c.sent()];
                    return [4 /*yield*/, project.getName()];
                case 5: return [4 /*yield*/, _a.apply(void 0, _b.concat([_c.sent(), "plugin",
                        manifestPath,
                        logger]))];
                case 6:
                    _c.sent();
                    _c.label = 7;
                case 7:
                    if (result) {
                        logger.info("\uD83D\uDD25 " + lib_1.intlMsg.commands_codegen_success() + " \uD83D\uDD25");
                        process.exit(0);
                    }
                    else {
                        process.exit(1);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=codegen.js.map