"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = exports.supportedLangs = void 0;
var createLogger_1 = require("./utils/createLogger");
var lib_1 = require("../lib");
var fs_extra_1 = __importDefault(require("fs-extra"));
var path_1 = __importDefault(require("path"));
var yesno_1 = __importDefault(require("yesno"));
var rimraf_1 = __importDefault(require("rimraf"));
var commander_1 = require("commander");
var nameStr = lib_1.intlMsg.commands_create_options_projectName();
var langStr = lib_1.intlMsg.commands_create_options_lang();
var langsStr = lib_1.intlMsg.commands_create_options_langs();
var createProjStr = lib_1.intlMsg.commands_create_options_createProject();
var createAppStr = lib_1.intlMsg.commands_create_options_createApp();
var createPluginStr = lib_1.intlMsg.commands_create_options_createPlugin();
var pathStr = lib_1.intlMsg.commands_create_options_o_path();
exports.supportedLangs = {
    wasm: ["assemblyscript", "rust", "interface"],
    app: ["typescript-node", "typescript-react"],
    plugin: ["typescript"],
};
exports.create = {
    setup: function (program) {
        var createCommand = program
            .command("create")
            .alias("c")
            .description(lib_1.intlMsg.commands_create_description());
        createCommand
            .command("wasm")
            .description(createProjStr + " " + langsStr + ": " + exports.supportedLangs.wasm.join(", "))
            .addArgument(new commander_1.Argument("<language>", langStr)
            .choices(exports.supportedLangs.wasm)
            .argRequired())
            .addArgument(new commander_1.Argument("<name>", nameStr).argRequired())
            .option("-o, --output-dir <" + pathStr + ">", "" + lib_1.intlMsg.commands_create_options_o())
            .option("-v, --verbose", lib_1.intlMsg.commands_common_options_verbose())
            .option("-q, --quiet", lib_1.intlMsg.commands_common_options_quiet())
            .action(function (langStr, nameStr, options) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, run("wasm", langStr, nameStr, options)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        createCommand
            .command("app")
            .description(createAppStr + " " + langsStr + ": " + exports.supportedLangs.app.join(", "))
            .addArgument(new commander_1.Argument("<language>", langStr)
            .choices(exports.supportedLangs.app)
            .argRequired())
            .addArgument(new commander_1.Argument("<name>", nameStr).argRequired())
            .option("-o, --output-dir <" + pathStr + ">", "" + lib_1.intlMsg.commands_create_options_o())
            .option("-v, --verbose", lib_1.intlMsg.commands_common_options_verbose())
            .option("-q, --quiet", lib_1.intlMsg.commands_common_options_quiet())
            .action(function (langStr, nameStr, options) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, run("app", langStr, nameStr, options)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
        createCommand
            .command("plugin")
            .description(createPluginStr + " " + langsStr + ": " + exports.supportedLangs.plugin.join(", "))
            .addArgument(new commander_1.Argument("<language>", langStr)
            .choices(exports.supportedLangs.plugin)
            .argRequired())
            .addArgument(new commander_1.Argument("<name>", nameStr).argRequired())
            .option("-o, --output-dir <" + pathStr + ">", "" + lib_1.intlMsg.commands_create_options_o())
            .option("-v, --verbose", lib_1.intlMsg.commands_common_options_verbose())
            .option("-q, --quiet", lib_1.intlMsg.commands_common_options_quiet())
            .action(function (langStr, nameStr, options) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, run("plugin", langStr, nameStr, options)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    },
};
function run(command, lang, name, options) {
    return __awaiter(this, void 0, void 0, function () {
        var outputDir, verbose, quiet, logger, projectDir, directoryExistsMessage, overwrite, overwritingMessage;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    outputDir = options.outputDir, verbose = options.verbose, quiet = options.quiet;
                    logger = createLogger_1.createLogger({ verbose: verbose, quiet: quiet });
                    projectDir = path_1.default.resolve(outputDir ? outputDir + "/" + name : name);
                    if (!!fs_extra_1.default.existsSync(projectDir)) return [3 /*break*/, 1];
                    logger.info(lib_1.intlMsg.commands_create_settingUp());
                    fs_extra_1.default.mkdirSync(projectDir, { recursive: true });
                    return [3 /*break*/, 3];
                case 1:
                    directoryExistsMessage = lib_1.intlMsg.commands_create_directoryExists({
                        dir: projectDir,
                    });
                    logger.info(directoryExistsMessage);
                    return [4 /*yield*/, yesno_1.default({
                            question: lib_1.intlMsg.commands_create_overwritePrompt(),
                        })];
                case 2:
                    overwrite = _a.sent();
                    if (overwrite) {
                        overwritingMessage = lib_1.intlMsg.commands_create_overwriting({
                            dir: projectDir,
                        });
                        logger.info(overwritingMessage);
                        rimraf_1.default.sync(projectDir);
                    }
                    else {
                        process.exit(8);
                    }
                    _a.label = 3;
                case 3: return [4 /*yield*/, lib_1.generateProjectTemplate(command, lang, projectDir)
                        .then(function () {
                        var readyMessage;
                        if (command === "wasm") {
                            readyMessage = lib_1.intlMsg.commands_create_readyProtocol();
                        }
                        else if (command === "app") {
                            readyMessage = lib_1.intlMsg.commands_create_readyApp();
                        }
                        else if (command === "plugin") {
                            readyMessage = lib_1.intlMsg.commands_create_readyPlugin();
                        }
                        logger.info("\uD83D\uDD25 " + readyMessage + " \uD83D\uDD25");
                        process.exit(0);
                    })
                        .catch(function (err) {
                        var commandFailError = lib_1.intlMsg.commands_create_error_commandFail({
                            error: JSON.stringify(err, null, 2),
                        });
                        logger.error(commandFailError);
                        process.exit(1);
                    })];
                case 4:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=create.js.map