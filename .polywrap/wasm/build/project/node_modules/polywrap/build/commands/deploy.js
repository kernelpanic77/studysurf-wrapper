"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deploy = void 0;
var createLogger_1 = require("./utils/createLogger");
var lib_1 = require("../lib");
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var yaml_1 = __importDefault(require("yaml"));
var jsonschema_1 = require("jsonschema");
var defaultManifestStr = lib_1.defaultPolywrapManifest.join(" | ");
var pathStr = lib_1.intlMsg.commands_deploy_options_o_path();
exports.deploy = {
    setup: function (program) {
        program
            .command("deploy")
            .alias("d")
            .description(lib_1.intlMsg.commands_deploy_description())
            .option("-m, --manifest-file <" + pathStr + ">", "" + lib_1.intlMsg.commands_deploy_options_m({
            default: defaultManifestStr,
        }))
            .option("-o, --output-file <" + pathStr + ">", "" + lib_1.intlMsg.commands_deploy_options_o())
            .option("-v, --verbose", lib_1.intlMsg.commands_common_options_verbose())
            .option("-q, --quiet", lib_1.intlMsg.commands_common_options_quiet())
            .action(function (options) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, run(__assign(__assign({}, options), { manifestFile: lib_1.parseManifestFileOption(options.manifestFile, lib_1.defaultPolywrapManifest) }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    },
};
function run(options) {
    return __awaiter(this, void 0, void 0, function () {
        var manifestFile, outputFile, verbose, quiet, logger, project, deployManifest, allStepsFromAllJobs, packageNames, packageMapEntries, packageMap, stepToPackageMap, allStepsFromAllJobs_1, allStepsFromAllJobs_1_1, step, jobs, jobResults, outputFileExt;
        var e_1, _a;
        var _this = this;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    manifestFile = options.manifestFile, outputFile = options.outputFile, verbose = options.verbose, quiet = options.quiet;
                    logger = createLogger_1.createLogger({ verbose: verbose, quiet: quiet });
                    project = new lib_1.PolywrapProject({
                        rootDir: path_1.default.dirname(manifestFile),
                        polywrapManifestPath: manifestFile,
                        logger: logger,
                    });
                    return [4 /*yield*/, project.validate()];
                case 1:
                    _b.sent();
                    return [4 /*yield*/, project.getDeployManifest()];
                case 2:
                    deployManifest = _b.sent();
                    if (!deployManifest) {
                        throw new Error("No deploy manifest found.");
                    }
                    allStepsFromAllJobs = Object.entries(deployManifest.jobs).flatMap(function (_a) {
                        var _b = __read(_a, 2), jobName = _b[0], job = _b[1];
                        return job.steps.map(function (step) { return (__assign({ jobName: jobName }, step)); });
                    });
                    packageNames = __spread(new Set(allStepsFromAllJobs.map(function (step) { return step.package; })));
                    sanitizePackages(packageNames);
                    return [4 /*yield*/, project.cacheDeployModules(packageNames)];
                case 3:
                    _b.sent();
                    return [4 /*yield*/, Promise.all(packageNames.map(function (packageName) { return __awaiter(_this, void 0, void 0, function () {
                            var deployerPackage;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, project.getDeployModule(packageName)];
                                    case 1:
                                        deployerPackage = _a.sent();
                                        return [2 /*return*/, [packageName, deployerPackage]];
                                }
                            });
                        }); }))];
                case 4:
                    packageMapEntries = _b.sent();
                    packageMap = Object.fromEntries(packageMapEntries);
                    stepToPackageMap = {};
                    try {
                        for (allStepsFromAllJobs_1 = __values(allStepsFromAllJobs), allStepsFromAllJobs_1_1 = allStepsFromAllJobs_1.next(); !allStepsFromAllJobs_1_1.done; allStepsFromAllJobs_1_1 = allStepsFromAllJobs_1.next()) {
                            step = allStepsFromAllJobs_1_1.value;
                            stepToPackageMap[step.name] = __assign(__assign({}, packageMap[step.package]), { jobName: step.jobName });
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (allStepsFromAllJobs_1_1 && !allStepsFromAllJobs_1_1.done && (_a = allStepsFromAllJobs_1.return)) _a.call(allStepsFromAllJobs_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    validateManifestWithExts(deployManifest, stepToPackageMap);
                    jobs = Object.entries(deployManifest.jobs).map(function (_a) {
                        var _b;
                        var _c = __read(_a, 2), jobName = _c[0], job = _c[1];
                        var steps = job.steps.map(function (step) {
                            var _a;
                            return new lib_1.DeployStep({
                                name: step.name,
                                uriOrStepResult: step.uri,
                                deployer: stepToPackageMap[step.name].deployer,
                                config: (_a = step.config) !== null && _a !== void 0 ? _a : {},
                            });
                        });
                        return new lib_1.DeployJob({
                            name: jobName,
                            steps: steps,
                            config: (_b = job.config) !== null && _b !== void 0 ? _b : {},
                            logger: logger,
                        });
                    });
                    return [4 /*yield*/, Promise.all(jobs.map(function (job) { return job.run(); }))];
                case 5:
                    jobResults = _b.sent();
                    if (outputFile) {
                        outputFileExt = path_1.default.extname(outputFile).substring(1);
                        if (!outputFileExt)
                            throw new Error("Require output file extension");
                        switch (outputFileExt) {
                            case "yaml":
                            case "yml":
                                fs_1.default.writeFileSync(outputFile, yaml_1.default.stringify(jobResults, null, 2));
                                break;
                            case "json":
                                fs_1.default.writeFileSync(outputFile, JSON.stringify(jobResults, null, 2));
                                break;
                            default:
                                throw new Error(lib_1.intlMsg.commands_run_error_unsupportedOutputFileExt({ outputFileExt: outputFileExt }));
                        }
                    }
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
function sanitizePackages(packages) {
    var unrecognizedPackages = [];
    var availableDeployers = fs_1.default.readdirSync(path_1.default.join(__dirname, "..", "lib", "defaults", "deploy-modules"));
    packages.forEach(function (p) {
        if (!availableDeployers.includes(p)) {
            unrecognizedPackages.push(p);
        }
    });
    if (unrecognizedPackages.length) {
        throw new Error("Unrecognized packages: " + unrecognizedPackages.join(", "));
    }
}
function validateManifestWithExts(deployManifest, stepToPackageMap) {
    var errors = Object.entries(stepToPackageMap).flatMap(function (_a) {
        var _b = __read(_a, 2), stepName = _b[0], step = _b[1];
        var jobEntry = Object.entries(deployManifest.jobs).find(function (_a) {
            var _b = __read(_a, 1), jobName = _b[0];
            return jobName === step.jobName;
        });
        var job = jobEntry[1];
        var stepToValidate = job.steps.find(function (s) { return s.name === stepName; });
        return step.manifestExt
            ? jsonschema_1.validate(__assign(__assign({}, job.config), stepToValidate.config), step.manifestExt).errors
            : [];
    });
    if (errors.length) {
        throw new Error(__spread([
            "Validation errors encountered while sanitizing DeployManifest format " + deployManifest.format
        ], errors.map(function (error) { return error.toString(); })).join("\n"));
    }
}
//# sourceMappingURL=deploy.js.map