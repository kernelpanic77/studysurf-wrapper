"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.docgen = void 0;
/* eslint-disable prefer-const */
var lib_1 = require("../lib");
var createLogger_1 = require("./utils/createLogger");
var docusaurus_1 = require("../lib/docgen/docusaurus");
var jsdoc_1 = require("../lib/docgen/jsdoc");
var schema_1 = require("../lib/docgen/schema");
var ScriptCodeGenerator_1 = require("../lib/codegen/ScriptCodeGenerator");
var client_js_1 = require("@polywrap/client-js");
var chalk_1 = __importDefault(require("chalk"));
var commander_1 = require("commander");
var commandToPathMap = {
    schema: schema_1.scriptPath,
    docusaurus: docusaurus_1.scriptPath,
    jsdoc: jsdoc_1.scriptPath,
};
var defaultDocgenDir = "./docs";
var pathStr = lib_1.intlMsg.commands_codegen_options_o_path();
var Actions;
(function (Actions) {
    Actions["SCHEMA"] = "schema";
    Actions["DOCUSAURUS"] = "docusaurus";
    Actions["JSDOC"] = "jsdoc";
})(Actions || (Actions = {}));
var argumentsDescription = "\n  " + chalk_1.default.bold(Actions.SCHEMA) + "      " + lib_1.intlMsg.commands_docgen_options_schema() + "\n  " + chalk_1.default.bold(Actions.DOCUSAURUS) + "    " + lib_1.intlMsg.commands_docgen_options_markdown({
    framework: "Docusaurus",
}) + "\n  " + chalk_1.default.bold(Actions.JSDOC) + "         " + lib_1.intlMsg.commands_docgen_options_markdown({
    framework: "JSDoc",
}) + "\n";
exports.docgen = {
    setup: function (program) {
        program
            .command("docgen")
            .alias("o")
            .description(lib_1.intlMsg.commands_docgen_description())
            .usage("<action> [options]")
            .addArgument(new commander_1.Argument("<action>", argumentsDescription).choices([
            Actions.SCHEMA,
            Actions.DOCUSAURUS,
            Actions.JSDOC,
        ]))
            .option("-m, --manifest-file <" + pathStr + ">", lib_1.intlMsg.commands_docgen_options_m({
            default: lib_1.defaultPolywrapManifest.join(" | "),
        }))
            .option("-g, --docgen-dir <" + pathStr + ">", lib_1.intlMsg.commands_docgen_options_c({
            default: "" + defaultDocgenDir,
        }))
            .option("-c, --client-config <" + lib_1.intlMsg.commands_common_options_configPath() + ">", "" + lib_1.intlMsg.commands_common_options_config())
            .option("-i, --imports", "" + lib_1.intlMsg.commands_docgen_options_i())
            .option("-v, --verbose", lib_1.intlMsg.commands_common_options_verbose())
            .option("-q, --quiet", lib_1.intlMsg.commands_common_options_quiet())
            .action(function (action, options) { return __awaiter(void 0, void 0, void 0, function () {
            var _a, _b, _c;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _a = run;
                        _b = [action];
                        _c = [__assign({}, options)];
                        _d = { manifestFile: lib_1.parseManifestFileOption(options.manifestFile, lib_1.defaultProjectManifestFiles), docgenDir: lib_1.parseDirOption(options.docgenDir, defaultDocgenDir) };
                        return [4 /*yield*/, lib_1.parseClientConfigOption(options.clientConfig)];
                    case 1: return [4 /*yield*/, _a.apply(void 0, _b.concat([__assign.apply(void 0, _c.concat([(_d.clientConfig = _e.sent(), _d)]))]))];
                    case 2:
                        _e.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    },
};
function run(command, options) {
    return __awaiter(this, void 0, void 0, function () {
        var manifestFile, docgenDir, clientConfig, imports, verbose, quiet, logger, project, customScript, client, schemaComposer, codeGenerator;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    manifestFile = options.manifestFile, docgenDir = options.docgenDir, clientConfig = options.clientConfig, imports = options.imports, verbose = options.verbose, quiet = options.quiet;
                    logger = createLogger_1.createLogger({ verbose: verbose, quiet: quiet });
                    return [4 /*yield*/, lib_1.getProjectFromManifest(manifestFile, logger)];
                case 1:
                    project = _a.sent();
                    if (!project) {
                        logger.error(lib_1.intlMsg.commands_docgen_error_projectLoadFailed({
                            manifestFile: manifestFile,
                        }));
                        process.exit(1);
                    }
                    return [4 /*yield*/, project.validate()];
                case 2:
                    _a.sent();
                    customScript = require.resolve(commandToPathMap[command]);
                    client = new client_js_1.PolywrapClient(clientConfig);
                    schemaComposer = new lib_1.SchemaComposer({
                        project: project,
                        client: client,
                    });
                    codeGenerator = new ScriptCodeGenerator_1.ScriptCodegenerator({
                        project: project,
                        schemaComposer: schemaComposer,
                        script: customScript,
                        codegenDirAbs: docgenDir,
                        omitHeader: true,
                        mustacheView: { imports: imports },
                    });
                    return [4 /*yield*/, codeGenerator.generate()];
                case 3:
                    if (_a.sent()) {
                        logger.info("\uD83D\uDD25 " + lib_1.intlMsg.commands_docgen_success() + " \uD83D\uDD25");
                        process.exit(0);
                    }
                    else {
                        process.exit(1);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=docgen.js.map