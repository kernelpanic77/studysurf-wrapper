"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
var lib_1 = require("../lib");
var createLogger_1 = require("./utils/createLogger");
var client_js_1 = require("@polywrap/client-js");
var path_1 = __importDefault(require("path"));
var yaml_1 = __importDefault(require("yaml"));
var fs_1 = __importDefault(require("fs"));
var defaultManifestStr = lib_1.defaultWorkflowManifest.join(" | ");
var pathStr = lib_1.intlMsg.commands_run_options_m_path();
exports.run = {
    setup: function (program) {
        program
            .command("run")
            .alias("r")
            .description(lib_1.intlMsg.commands_run_description())
            .option("-m, --manifest-file  <" + pathStr + ">", lib_1.intlMsg.commands_run_options_m({
            default: defaultManifestStr,
        }))
            .option("-c, --client-config <" + lib_1.intlMsg.commands_common_options_configPath() + ">", "" + lib_1.intlMsg.commands_common_options_config())
            .option("-o, --output-file <" + lib_1.intlMsg.commands_run_options_outputFilePath() + ">", "" + lib_1.intlMsg.commands_run_options_outputFile())
            .option("-j, --jobs <" + lib_1.intlMsg.commands_run_options_jobIds() + "...>", lib_1.intlMsg.commands_run_options_jobs())
            .option("-v, --verbose", lib_1.intlMsg.commands_common_options_verbose())
            .option("-q, --quiet", lib_1.intlMsg.commands_common_options_quiet())
            .action(function (options) { return __awaiter(void 0, void 0, void 0, function () {
            var _a, _b;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = _run;
                        _b = [__assign({}, options)];
                        _c = { manifest: lib_1.parseManifestFileOption(options.manifestFile, lib_1.defaultWorkflowManifest) };
                        return [4 /*yield*/, lib_1.parseClientConfigOption(options.clientConfig)];
                    case 1: return [4 /*yield*/, _a.apply(void 0, [__assign.apply(void 0, _b.concat([(_c.clientConfig = _d.sent(), _c.outputFile = options.outputFile
                                    ? lib_1.parseWorkflowOutputFilePathOption(options.outputFile)
                                    : undefined, _c)]))])];
                    case 2:
                        _d.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    },
};
var _run = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    var manifest, clientConfig, outputFile, verbose, quiet, jobs, logger, client, manifestPath, workflow, validationScript, workflowOutput, onExecution, jobRunner, outputFileExt, printableOutput;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                manifest = options.manifest, clientConfig = options.clientConfig, outputFile = options.outputFile, verbose = options.verbose, quiet = options.quiet, jobs = options.jobs;
                logger = createLogger_1.createLogger({ verbose: verbose, quiet: quiet });
                client = new client_js_1.PolywrapClient(clientConfig);
                manifestPath = path_1.default.resolve(manifest);
                return [4 /*yield*/, lib_1.loadWorkflowManifest(manifestPath, logger)];
            case 1:
                workflow = _a.sent();
                lib_1.validateJobNames(workflow.jobs);
                validationScript = workflow.validation
                    ? lib_1.loadValidationScript(manifestPath, workflow.validation)
                    : undefined;
                workflowOutput = [];
                onExecution = function (id, jobResult) {
                    var data = jobResult.data, error = jobResult.error, status = jobResult.status;
                    var output = {
                        id: id,
                        status: status,
                        data: data,
                        error: error,
                        validation: {
                            status: lib_1.Status.SKIPPED,
                        },
                    };
                    if (validationScript) {
                        lib_1.validateOutput(output, validationScript, logger);
                    }
                    if (!quiet) {
                        lib_1.printJobOutput(output);
                    }
                    workflowOutput.push(output);
                };
                jobRunner = new lib_1.JobRunner(client, onExecution);
                return [4 /*yield*/, jobRunner.run(workflow.jobs, jobs !== null && jobs !== void 0 ? jobs : Object.keys(workflow.jobs))];
            case 2:
                _a.sent();
                if (outputFile) {
                    outputFileExt = path_1.default.extname(outputFile).substring(1);
                    if (!outputFileExt)
                        throw new Error("Require output file extension");
                    printableOutput = workflowOutput.map(function (o) {
                        var _a;
                        return (__assign(__assign({}, o), { error: (_a = o.error) === null || _a === void 0 ? void 0 : _a.message }));
                    });
                    switch (outputFileExt) {
                        case "yaml":
                        case "yml":
                            fs_1.default.writeFileSync(outputFile, yaml_1.default.stringify(printableOutput, null, 2));
                            break;
                        case "json":
                            fs_1.default.writeFileSync(outputFile, JSON.stringify(printableOutput, null, 2));
                            break;
                        default:
                            throw new Error(lib_1.intlMsg.commands_run_error_unsupportedOutputFileExt({ outputFileExt: outputFileExt }));
                    }
                }
                return [2 /*return*/];
        }
    });
}); };
//# sourceMappingURL=run.js.map