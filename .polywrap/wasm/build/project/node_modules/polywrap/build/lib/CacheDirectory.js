"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheDirectory = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var rimraf_1 = __importDefault(require("rimraf"));
var copyfiles_1 = __importDefault(require("copyfiles"));
var os_js_1 = require("@polywrap/os-js");
var CacheDirectory = /** @class */ (function () {
    function CacheDirectory(_config, _cacheDirName) {
        if (_cacheDirName === void 0) { _cacheDirName = ".polywrap"; }
        this._config = _config;
        this._cacheDirName = _cacheDirName;
    }
    CacheDirectory.prototype.getCacheDir = function () {
        return path_1.default.join(this._config.rootDir, this._cacheDirName, this._config.subDir);
    };
    CacheDirectory.prototype.resetCache = function () {
        rimraf_1.default.sync(this.getCacheDir());
    };
    CacheDirectory.prototype.removeCacheDir = function (dir) {
        var folderPath = path_1.default.join(this.getCacheDir(), dir);
        rimraf_1.default.sync(folderPath);
    };
    CacheDirectory.prototype.getCachePath = function (subpath) {
        return path_1.default.join(this.getCacheDir(), subpath);
    };
    CacheDirectory.prototype.readCacheFile = function (file) {
        var filePath = this.getCachePath(file);
        if (!fs_1.default.existsSync(filePath)) {
            return undefined;
        }
        return fs_1.default.readFileSync(filePath, "utf-8");
    };
    CacheDirectory.prototype.writeCacheFile = function (subPath, data, options) {
        var filePath = this.getCachePath(subPath);
        var folderPath = path_1.default.dirname(filePath);
        // Create folders if they don't exist
        if (!fs_1.default.existsSync(folderPath)) {
            fs_1.default.mkdirSync(folderPath, { recursive: true });
        }
        os_js_1.writeFileSync(filePath, data, options);
    };
    CacheDirectory.prototype.copyIntoCache = function (destSubDir, sourceDir, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var dest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dest = this.getCachePath(destSubDir);
                        if (!fs_1.default.existsSync(dest)) {
                            fs_1.default.mkdirSync(dest, { recursive: true });
                        }
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                copyfiles_1.default([sourceDir, dest], options, function (error) {
                                    if (error) {
                                        reject(error);
                                    }
                                    else {
                                        resolve();
                                    }
                                });
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return CacheDirectory;
}());
exports.CacheDirectory = CacheDirectory;
//# sourceMappingURL=CacheDirectory.js.map