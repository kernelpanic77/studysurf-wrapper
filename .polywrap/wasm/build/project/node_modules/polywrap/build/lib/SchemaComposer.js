"use strict";
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable @typescript-eslint/no-empty-function */
/* eslint-disable no-empty */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaComposer = void 0;
var _1 = require("./");
var client_js_1 = require("@polywrap/client-js");
var schema_compose_1 = require("@polywrap/schema-compose");
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var yaml_1 = __importDefault(require("yaml"));
var wrap_manifest_types_js_1 = require("@polywrap/wrap-manifest-types-js");
var SchemaComposer = /** @class */ (function () {
    function SchemaComposer(_config) {
        this._config = _config;
        this._client = this._config.client;
    }
    SchemaComposer.prototype.getComposedAbis = function () {
        return __awaiter(this, void 0, void 0, function () {
            var project, schemaNamedPath, import_abis, getSchemaFile, schemaFile, options, _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this._abi) {
                            return [2 /*return*/, Promise.resolve(this._abi)];
                        }
                        project = this._config.project;
                        return [4 /*yield*/, project.getSchemaNamedPath()];
                    case 1:
                        schemaNamedPath = _b.sent();
                        return [4 /*yield*/, project.getImportAbis()];
                    case 2:
                        import_abis = _b.sent();
                        getSchemaFile = function (schemaPath) {
                            return schemaPath
                                ? {
                                    schema: fs_1.default.readFileSync(schemaPath, "utf-8"),
                                    absolutePath: schemaPath,
                                }
                                : undefined;
                        };
                        schemaFile = getSchemaFile(schemaNamedPath);
                        if (!schemaFile) {
                            throw Error("Schema cannot be loaded at path: " + schemaNamedPath);
                        }
                        options = {
                            schema: schemaFile,
                            resolvers: {
                                external: function (uri) { return _this._fetchExternalAbi(uri, import_abis); },
                                local: function (path) { return Promise.resolve(_this._fetchLocalSchema(path)); },
                            },
                        };
                        _a = this;
                        return [4 /*yield*/, schema_compose_1.composeSchema(options)];
                    case 3:
                        _a._abi = _b.sent();
                        return [2 /*return*/, this._abi];
                }
            });
        });
    };
    SchemaComposer.prototype.reset = function () {
        this._abi = undefined;
    };
    SchemaComposer.prototype._fetchLocalSchema = function (schemaPath) {
        return fs_1.default.readFileSync(path_1.default.isAbsolute(schemaPath)
            ? schemaPath
            : path_1.default.join(this._config.project.getManifestDir(), schemaPath), "utf-8");
    };
    SchemaComposer.prototype._fetchExternalAbi = function (uri, import_abis) {
        return __awaiter(this, void 0, void 0, function () {
            var import_abis_1, import_abis_1_1, import_abi, redirectUri, uriParsed, abiPath, e_1_1, manifest;
            var e_1, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!import_abis) return [3 /*break*/, 15];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 13, 14, 15]);
                        import_abis_1 = __values(import_abis), import_abis_1_1 = import_abis_1.next();
                        _b.label = 2;
                    case 2:
                        if (!!import_abis_1_1.done) return [3 /*break*/, 12];
                        import_abi = import_abis_1_1.value;
                        redirectUri = new client_js_1.Uri(import_abi.uri);
                        uriParsed = new client_js_1.Uri(uri);
                        if (!client_js_1.Uri.equals(redirectUri, uriParsed)) {
                            return [3 /*break*/, 11];
                        }
                        abiPath = path_1.default.join(this._config.project.getManifestDir(), import_abi.abi);
                        if (!fs_1.default.existsSync(abiPath)) {
                            throw Error(_1.intlMsg.lib_schemaComposer_abi_not_found({
                                path: abiPath,
                            }));
                        }
                        if (!abiPath.endsWith(".info")) return [3 /*break*/, 4];
                        return [4 /*yield*/, this._loadWrapAbi(abiPath)];
                    case 3: return [2 /*return*/, _b.sent()];
                    case 4:
                        if (!abiPath.endsWith(".graphql")) return [3 /*break*/, 6];
                        return [4 /*yield*/, this._loadGraphqlAbi(abiPath, import_abis)];
                    case 5: return [2 /*return*/, _b.sent()];
                    case 6:
                        if (!abiPath.endsWith(".json")) return [3 /*break*/, 8];
                        return [4 /*yield*/, this._loadJsonAbi(abiPath)];
                    case 7: return [2 /*return*/, _b.sent()];
                    case 8:
                        if (!abiPath.endsWith(".yaml")) return [3 /*break*/, 10];
                        return [4 /*yield*/, this._loadYamlAbi(abiPath)];
                    case 9: return [2 /*return*/, _b.sent()];
                    case 10: throw Error(_1.intlMsg.lib_schemaComposer_unknown_abi({
                        path: abiPath,
                        types: ["*.info", "*.graphql", "*.json", "*.yaml"].toString(),
                    }));
                    case 11:
                        import_abis_1_1 = import_abis_1.next();
                        return [3 /*break*/, 2];
                    case 12: return [3 /*break*/, 15];
                    case 13:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 15];
                    case 14:
                        try {
                            if (import_abis_1_1 && !import_abis_1_1.done && (_a = import_abis_1.return)) _a.call(import_abis_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 15: return [4 /*yield*/, this._client.getManifest(new client_js_1.Uri(uri))];
                    case 16:
                        manifest = _b.sent();
                        if (!manifest.ok) {
                            if (manifest.error) {
                                this._config.project.logger.error(JSON.stringify(manifest.error, null, 2));
                            }
                            throw manifest.error;
                        }
                        return [2 /*return*/, manifest.value.abi];
                }
            });
        });
    };
    SchemaComposer.prototype._loadGraphqlAbi = function (path, import_abis) {
        return __awaiter(this, void 0, void 0, function () {
            var schema;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        schema = fs_1.default.readFileSync(path, "utf-8");
                        return [4 /*yield*/, schema_compose_1.composeSchema({
                                schema: {
                                    schema: schema,
                                    absolutePath: path,
                                },
                                resolvers: {
                                    external: function (uri) { return _this._fetchExternalAbi(uri, import_abis); },
                                    local: function (path) { return Promise.resolve(_this._fetchLocalSchema(path)); },
                                },
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    SchemaComposer.prototype._loadWrapAbi = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var manifest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        manifest = fs_1.default.readFileSync(path);
                        return [4 /*yield*/, wrap_manifest_types_js_1.deserializeWrapManifest(manifest)];
                    case 1: return [2 /*return*/, (_a.sent()).abi];
                }
            });
        });
    };
    SchemaComposer.prototype._loadJsonAbi = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var json, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        json = fs_1.default.readFileSync(path, "utf-8");
                        result = JSON.parse(json);
                        // Validate the ABI's structure
                        return [4 /*yield*/, wrap_manifest_types_js_1.validateWrapManifest({
                                version: "0.1",
                                type: "interface",
                                name: "temp",
                                abi: result,
                            })];
                    case 1:
                        // Validate the ABI's structure
                        _a.sent();
                        // Return ABI
                        return [2 /*return*/, result];
                }
            });
        });
    };
    SchemaComposer.prototype._loadYamlAbi = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            var yaml, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        yaml = fs_1.default.readFileSync(path, "utf-8");
                        try {
                            result = yaml_1.default.parse(yaml);
                        }
                        catch (_) { }
                        if (!result) {
                            throw Error(_1.intlMsg.lib_schemaComposer_invalid_yaml({
                                path: path,
                            }));
                        }
                        // Validate the ABI's structure
                        return [4 /*yield*/, wrap_manifest_types_js_1.validateWrapManifest({
                                version: "0.1",
                                type: "interface",
                                name: "temp",
                                abi: result,
                            })];
                    case 1:
                        // Validate the ABI's structure
                        _a.sent();
                        // Return ABI
                        return [2 /*return*/, result];
                }
            });
        });
    };
    return SchemaComposer;
}());
exports.SchemaComposer = SchemaComposer;
//# sourceMappingURL=SchemaComposer.js.map