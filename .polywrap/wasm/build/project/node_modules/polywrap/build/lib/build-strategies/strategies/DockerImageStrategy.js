"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DockerImageBuildStrategy = void 0;
var system_1 = require("../../system");
var BuildStrategy_1 = require("../BuildStrategy");
var intl_1 = require("../../intl");
var logging_1 = require("../../logging");
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var os_js_1 = require("@polywrap/os-js");
var mustache_1 = __importDefault(require("mustache"));
var DockerImageBuildStrategy = /** @class */ (function (_super) {
    __extends(DockerImageBuildStrategy, _super);
    function DockerImageBuildStrategy(args) {
        var _this = _super.call(this, args) || this;
        if (!system_1.isDockerInstalled(_this.project.logger)) {
            throw new Error(intl_1.intlMsg.lib_docker_noInstall());
        }
        _this._dockerLock = new system_1.FileLock(_this.project.getCachePath("build/DOCKER_LOCK"), function (msg) {
            throw new Error(msg);
        });
        return _this;
    }
    DockerImageBuildStrategy.prototype.getStrategyName = function () {
        return "image";
    };
    DockerImageBuildStrategy.prototype.buildSources = function () {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        return __awaiter(this, void 0, void 0, function () {
            var buildManifestPath, buildManifestDir, buildManifest, imageName, _k, _l, language, dockerfileTemplatePath, dockerfilePath, customManifestDockerfilePath, dockerBuildxConfig, useBuildx, cacheDir, removeBuilder, cache, removeImage, dockerImageId, e_1;
            return __generator(this, function (_m) {
                switch (_m.label) {
                    case 0: return [4 /*yield*/, this._dockerLock.request()];
                    case 1:
                        _m.sent();
                        _m.label = 2;
                    case 2:
                        _m.trys.push([2, 13, , 15]);
                        return [4 /*yield*/, system_1.ensureDockerDaemonRunning(this.project.logger)];
                    case 3:
                        _m.sent();
                        return [4 /*yield*/, this.project.getBuildManifestPath()];
                    case 4:
                        buildManifestPath = _m.sent();
                        buildManifestDir = buildManifestPath && path_1.default.dirname(buildManifestPath);
                        return [4 /*yield*/, this.project.getBuildManifest()];
                    case 5:
                        buildManifest = _m.sent();
                        _k = ((_b = (_a = buildManifest === null || buildManifest === void 0 ? void 0 : buildManifest.strategies) === null || _a === void 0 ? void 0 : _a.image) === null || _b === void 0 ? void 0 : _b.name);
                        if (_k) return [3 /*break*/, 7];
                        _l = system_1.generateDockerImageName;
                        return [4 /*yield*/, this.project.getBuildUuid()];
                    case 6:
                        _k = _l.apply(void 0, [_m.sent()]);
                        _m.label = 7;
                    case 7:
                        imageName = _k;
                        return [4 /*yield*/, this.project.getManifestLanguage()];
                    case 8:
                        language = _m.sent();
                        dockerfileTemplatePath = path_1.default.join(__dirname, "..", "..", "defaults", "build-strategies", language, this.getStrategyName(), "Dockerfile.mustache");
                        dockerfilePath = void 0;
                        customManifestDockerfilePath = (_d = (_c = buildManifest === null || buildManifest === void 0 ? void 0 : buildManifest.strategies) === null || _c === void 0 ? void 0 : _c.image) === null || _d === void 0 ? void 0 : _d.dockerfile;
                        if (buildManifestDir && customManifestDockerfilePath) {
                            dockerfilePath = path_1.default.join(buildManifestDir, customManifestDockerfilePath);
                        }
                        else {
                            dockerfilePath = this._generateDockerfile(dockerfileTemplatePath, __assign(__assign({}, buildManifest.config), (_e = buildManifest.strategies) === null || _e === void 0 ? void 0 : _e.image));
                        }
                        return [4 /*yield*/, this.project.cacheBuildManifestLinkedPackages()];
                    case 9:
                        _m.sent();
                        dockerBuildxConfig = (_g = (_f = buildManifest === null || buildManifest === void 0 ? void 0 : buildManifest.strategies) === null || _f === void 0 ? void 0 : _f.image) === null || _g === void 0 ? void 0 : _g.buildx;
                        useBuildx = !!dockerBuildxConfig;
                        cacheDir = void 0;
                        removeBuilder = false;
                        if (dockerBuildxConfig && typeof dockerBuildxConfig !== "boolean") {
                            cache = dockerBuildxConfig.cache;
                            if (cache == true) {
                                cacheDir = this.project.getCachePath("build/image/cache");
                            }
                            else if (cache) {
                                if (path_1.default.isAbsolute(cache)) {
                                    cacheDir = cache;
                                }
                                else {
                                    cacheDir = path_1.default.join(this.project.getManifestDir(), cache);
                                }
                            }
                            removeBuilder = !!dockerBuildxConfig.removeBuilder;
                        }
                        removeImage = !!((_j = (_h = buildManifest === null || buildManifest === void 0 ? void 0 : buildManifest.strategies) === null || _h === void 0 ? void 0 : _h.image) === null || _j === void 0 ? void 0 : _j.removeImage);
                        return [4 /*yield*/, this._createBuildImage(this.project.getManifestDir(), imageName, dockerfilePath, cacheDir, useBuildx)];
                    case 10:
                        dockerImageId = _m.sent();
                        return [4 /*yield*/, this._copyArtifactsFromBuildImage(this.outputDir, "wrap.wasm", imageName, removeBuilder, removeImage, useBuildx)];
                    case 11:
                        _m.sent();
                        return [4 /*yield*/, this._dockerLock.release()];
                    case 12:
                        _m.sent();
                        return [2 /*return*/, dockerImageId];
                    case 13:
                        e_1 = _m.sent();
                        return [4 /*yield*/, this._dockerLock.release()];
                    case 14:
                        _m.sent();
                        throw e_1;
                    case 15: return [2 /*return*/];
                }
            });
        });
    };
    DockerImageBuildStrategy.prototype._copyArtifactsFromBuildImage = function (outputDir, buildArtifact, imageName, removeBuilder, removeImage, useBuildx) {
        if (removeBuilder === void 0) { removeBuilder = false; }
        if (removeImage === void 0) { removeImage = false; }
        if (useBuildx === void 0) { useBuildx = false; }
        return __awaiter(this, void 0, void 0, function () {
            var run, args;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        run = function () { return __awaiter(_this, void 0, void 0, function () {
                            var _a, containerLsOutput, projectLsOutput, buildLsOutput;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        // Make sure the interactive terminal name is available
                                        _a = useBuildx;
                                        if (!_a) 
                                        // Make sure the interactive terminal name is available
                                        return [3 /*break*/, 2];
                                        return [4 /*yield*/, this._isDockerBuildxInstalled()];
                                    case 1:
                                        _a = (
                                        // Make sure the interactive terminal name is available
                                        useBuildx = _b.sent());
                                        _b.label = 2;
                                    case 2:
                                        // Make sure the interactive terminal name is available
                                        _a;
                                        containerLsOutput = system_1.runCommandSync("docker container ls -a", this.project.logger).stdout;
                                        if (!(containerLsOutput &&
                                            containerLsOutput.indexOf("root-" + imageName) > -1)) return [3 /*break*/, 4];
                                        return [4 /*yield*/, system_1.runCommand("docker rm -f root-" + imageName, this.project.logger)];
                                    case 3:
                                        _b.sent();
                                        _b.label = 4;
                                    case 4: 
                                    // Create a new interactive terminal
                                    return [4 /*yield*/, system_1.runCommand("docker create -ti --name root-" + imageName + " " + imageName, this.project.logger)];
                                    case 5:
                                        // Create a new interactive terminal
                                        _b.sent();
                                        projectLsOutput = system_1.runCommandSync("docker run --rm " + imageName + " /bin/bash -c \"ls /project\"", this.project.logger).stdout;
                                        if (!projectLsOutput || projectLsOutput.length <= 1) {
                                            throw Error(intl_1.intlMsg.lib_helpers_docker_projectFolderMissing({ image: imageName }));
                                        }
                                        buildLsOutput = system_1.runCommandSync("docker run --rm " + imageName + " /bin/bash -c \"ls /project/build\"", this.project.logger).stdout;
                                        if (!buildLsOutput || buildLsOutput.indexOf(buildArtifact) === -1) {
                                            throw Error(intl_1.intlMsg.lib_helpers_docker_projectBuildFolderMissing({
                                                image: imageName,
                                                artifact: buildArtifact,
                                            }));
                                        }
                                        return [4 /*yield*/, system_1.runCommand("docker cp root-" + imageName + ":/project/build/" + buildArtifact + " " + outputDir, this.project.logger)];
                                    case 6:
                                        _b.sent();
                                        return [4 /*yield*/, system_1.runCommand("docker rm -f root-" + imageName, this.project.logger)];
                                    case 7:
                                        _b.sent();
                                        if (!useBuildx) return [3 /*break*/, 9];
                                        if (!removeBuilder) return [3 /*break*/, 9];
                                        return [4 /*yield*/, system_1.runCommand("docker buildx rm " + imageName, this.project.logger)];
                                    case 8:
                                        _b.sent();
                                        _b.label = 9;
                                    case 9:
                                        if (!removeImage) return [3 /*break*/, 11];
                                        return [4 /*yield*/, system_1.runCommand("docker rmi " + imageName, this.project.logger)];
                                    case 10:
                                        _b.sent();
                                        _b.label = 11;
                                    case 11: return [2 /*return*/];
                                }
                            });
                        }); };
                        args = {
                            path: system_1.displayPath(outputDir),
                            image: imageName,
                        };
                        return [4 /*yield*/, logging_1.logActivity(this.project.logger, intl_1.intlMsg.lib_helpers_docker_copyText(args), intl_1.intlMsg.lib_helpers_docker_copyError(args), intl_1.intlMsg.lib_helpers_docker_copyWarning(args), function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, run()];
                                        case 1: return [2 /*return*/, _a.sent()];
                                    }
                                });
                            }); })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    DockerImageBuildStrategy.prototype._createBuildImage = function (rootDir, imageName, dockerfile, cacheDir, useBuildx) {
        if (useBuildx === void 0) { useBuildx = false; }
        return __awaiter(this, void 0, void 0, function () {
            var run, args;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        run = function () { return __awaiter(_this, void 0, void 0, function () {
                            var _a, cacheFrom, cacheTo, buildxUseFailed, stderr, stdout;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        _a = useBuildx;
                                        if (!_a) return [3 /*break*/, 2];
                                        return [4 /*yield*/, this._isDockerBuildxInstalled()];
                                    case 1:
                                        _a = (_b.sent());
                                        _b.label = 2;
                                    case 2:
                                        useBuildx = _a;
                                        if (!useBuildx) return [3 /*break*/, 6];
                                        cacheFrom = cacheDir && fs_1.default.existsSync(path_1.default.join(cacheDir, "index.json"))
                                            ? "--cache-from type=local,src=" + cacheDir
                                            : "";
                                        cacheTo = cacheDir
                                            ? "--cache-to type=local,dest=" + cacheDir
                                            : "";
                                        buildxUseFailed = void 0;
                                        try {
                                            stderr = system_1.runCommandSync("docker buildx use " + imageName, this.project.logger).stderr;
                                            buildxUseFailed = !!stderr;
                                        }
                                        catch (e) {
                                            buildxUseFailed = true;
                                        }
                                        if (!buildxUseFailed) return [3 /*break*/, 4];
                                        return [4 /*yield*/, system_1.runCommand("docker buildx create --use --name " + imageName, this.project.logger)];
                                    case 3:
                                        _b.sent();
                                        _b.label = 4;
                                    case 4: return [4 /*yield*/, system_1.runCommand("docker buildx build -f " + dockerfile + " -t " + imageName + " " + rootDir + " " + cacheFrom + " " + cacheTo + " --output=type=docker", this.project.logger)];
                                    case 5:
                                        _b.sent();
                                        return [3 /*break*/, 8];
                                    case 6: return [4 /*yield*/, system_1.runCommand("docker build -f " + dockerfile + " -t " + imageName + " " + rootDir, this.project.logger, os_js_1.isWin()
                                            ? undefined
                                            : {
                                                // eslint-disable-next-line @typescript-eslint/naming-convention
                                                DOCKER_BUILDKIT: "true",
                                            })];
                                    case 7:
                                        _b.sent();
                                        _b.label = 8;
                                    case 8:
                                        stdout = system_1.runCommandSync("docker image inspect " + imageName + " -f \"{{.ID}}\"", this.project.logger).stdout;
                                        if (!stdout || stdout.indexOf("sha256:") === -1) {
                                            throw Error(intl_1.intlMsg.lib_docker_invalidImageId({ imageId: stdout || "N/A" }));
                                        }
                                        return [2 /*return*/, stdout];
                                }
                            });
                        }); };
                        args = {
                            image: imageName,
                            dockerfile: system_1.displayPath(dockerfile),
                            context: system_1.displayPath(rootDir),
                        };
                        return [4 /*yield*/, logging_1.logActivity(this.project.logger, intl_1.intlMsg.lib_helpers_docker_buildText(args), intl_1.intlMsg.lib_helpers_docker_buildError(args), intl_1.intlMsg.lib_helpers_docker_buildWarning(args), function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, run()];
                                        case 1: return [2 /*return*/, _a.sent()];
                                    }
                                });
                            }); })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    DockerImageBuildStrategy.prototype._isDockerBuildxInstalled = function () {
        return __awaiter(this, void 0, void 0, function () {
            var version;
            return __generator(this, function (_a) {
                version = system_1.runCommandSync("docker buildx version", this.project.logger).stdout;
                return [2 /*return*/, version && version.startsWith("github.com/docker/buildx")
                        ? true
                        : false];
            });
        });
    };
    DockerImageBuildStrategy.prototype._generateDockerfile = function (templatePath, config) {
        var outputDir = path_1.default.dirname(templatePath);
        var outputFilePath = path_1.default.join(outputDir, "Dockerfile");
        var template = fs_1.default.readFileSync(templatePath, "utf-8");
        var dockerfile = mustache_1.default.render(template, config);
        os_js_1.writeFileSync(outputFilePath, dockerfile, "utf-8");
        return outputFilePath;
    };
    return DockerImageBuildStrategy;
}(BuildStrategy_1.BuildStrategy));
exports.DockerImageBuildStrategy = DockerImageBuildStrategy;
//# sourceMappingURL=DockerImageStrategy.js.map