"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScriptCodegenerator = void 0;
var intl_1 = require("../intl");
var system_1 = require("../system");
var CodeGenerator_1 = require("./CodeGenerator");
var os_js_1 = require("@polywrap/os-js");
var fs_extra_1 = require("fs-extra");
var mustache_1 = __importDefault(require("mustache"));
var path_1 = __importDefault(require("path"));
var ScriptCodegenerator = /** @class */ (function (_super) {
    __extends(ScriptCodegenerator, _super);
    function ScriptCodegenerator(config) {
        var _this = _super.call(this, {
            project: config.project,
            schemaComposer: config.schemaComposer,
            codegenDirAbs: config.codegenDirAbs,
        }) || this;
        _this._schema = "";
        _this._script = config.script;
        _this._mustacheView = config.mustacheView;
        _this._codegenDirAbs = config.codegenDirAbs;
        _this._omitHeader = config.omitHeader;
        if (config.schema) {
            _this._schema = config.schema;
        }
        return _this;
    }
    ScriptCodegenerator.prototype.runCodegen = function (bindLanguage) {
        return __awaiter(this, void 0, void 0, function () {
            var generator, _a, generateBinding, binding, _b;
            var _c;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!system_1.isTypescriptFile(this._script)) return [3 /*break*/, 2];
                        return [4 /*yield*/, system_1.importTypescriptModule(this._script)];
                    case 1:
                        _a = _d.sent();
                        return [3 /*break*/, 4];
                    case 2: // eslint-disable-next-line @typescript-eslint/no-require-imports
                    return [4 /*yield*/, require(this._script)];
                    case 3:
                        _a = _d.sent();
                        _d.label = 4;
                    case 4:
                        generator = _a;
                        if (!generator) {
                            throw Error(intl_1.intlMsg.lib_codeGenerator_wrongGenFile());
                        }
                        generateBinding = generator.generateBinding;
                        if (!generateBinding) {
                            throw Error(intl_1.intlMsg.lib_codeGenerator_nogenerateBindingMethod());
                        }
                        _b = generateBinding;
                        _c = {};
                        return [4 /*yield*/, this._config.project.getName()];
                    case 5:
                        _c.projectName = _d.sent();
                        return [4 /*yield*/, this._config.schemaComposer.getComposedAbis()];
                    case 6: return [4 /*yield*/, _b.apply(void 0, [(_c.abi = _d.sent(),
                                _c.outputDirAbs = this._codegenDirAbs,
                                _c.bindLanguage = bindLanguage,
                                _c.config = this._mustacheView,
                                _c)])];
                    case 7:
                        binding = _d.sent();
                        system_1.resetDir(this._codegenDirAbs);
                        return [2 /*return*/, os_js_1.writeDirectorySync(this._codegenDirAbs, binding.output, function (templatePath) { return _this._generateTemplate(templatePath, {}); })];
                }
            });
        });
    };
    ScriptCodegenerator.prototype._generateTemplate = function (templatePath, config) {
        var logger = this._config.project.logger;
        logger.info(intl_1.intlMsg.lib_codeGenerator_genTemplateStep({
            path: "" + templatePath,
        }));
        if (this._script) {
            // Update template path when the generation file is given
            templatePath = path_1.default.join(path_1.default.dirname(this._script), templatePath);
        }
        var template = fs_extra_1.readFileSync(templatePath);
        var types = typeof config === "object" && config !== null ? config : { config: config };
        var content = mustache_1.default.render(template.toString(), __assign(__assign(__assign({}, types), { schema: this._schema }), this._mustacheView));
        if (this._omitHeader) {
            return content;
        }
        content = "// " + intl_1.intlMsg.lib_codeGenerator_templateNoModify() + "\n\n" + content + "\n";
        return content;
    };
    return ScriptCodegenerator;
}(CodeGenerator_1.CodeGenerator));
exports.ScriptCodegenerator = ScriptCodegenerator;
//# sourceMappingURL=ScriptCodeGenerator.js.map