FROM rust:1.66-alpine as base

# Install the wasm32 rust build target
RUN rustup target add wasm32-unknown-unknown

WORKDIR /build-deps

# Install curl
RUN apk add curl pkgconfig openssl-dev bash

# Install clang
RUN apk add clang llvm build-base

# Install wasm-opt
RUN curl -L https://github.com/WebAssembly/binaryen/releases/download/version_101/binaryen-version_101-x86_64-linux.tar.gz | tar -xz \
    && chmod +x binaryen-version_101/bin/wasm-opt \
    && cp binaryen-version_101/bin/wasm-opt /usr/local/bin/ \
    && rm -rf binary-version_101

# Install the toml-cli
RUN cargo install toml-cli

# Install wasm-snip
RUN cargo install wasm-snip

# Install wasm-bindgen
RUN cargo install wasm-bindgen-cli

# Install wasm-tools
RUN cargo install wasm-tools

# Install cargo-build-deps
RUN cargo install cargo-build-deps

{{#polywrap_linked_packages.length}}
WORKDIR /linked-packages
{{/polywrap_linked_packages.length}}

{{#polywrap_linked_packages}}
COPY {{dir}} ./{{name}}
{{/polywrap_linked_packages}}

WORKDIR /
RUN USER=root cargo new --lib project
WORKDIR /project

# Copy all manifest files
{{#polywrap_manifests}}
COPY {{.}} .
{{/polywrap_manifests}}

# Copy Cargo manifest files
COPY ./{{dir}}/Cargo.toml ./{{dir}}/Cargo.toml

{{#polywrap_linked_packages.length}}
# Link any local packages
{{#polywrap_linked_packages}}
RUN PACKAGE_NAME={{name}}; \
    {{#polywrap_module}}
    toml set ./{{dir}}/Cargo.toml dependencies.$PACKAGE_NAME.path /linked-packages/$PACKAGE_NAME > ./{{dir}}/Cargo-local.toml && \
    rm -rf ./{{dir}}/Cargo.toml && \
    mv ./{{dir}}/Cargo-local.toml ./{{dir}}/Cargo.toml && \
    {{/polywrap_module}}
    true
{{/polywrap_linked_packages}}
{{/polywrap_linked_packages.length}}

{{#polywrap_module}}
# Mock build for dependencies:

# Ensure the module at {{dir}} has the crate-type = ["cdylib"]
RUN toml set ./{{dir}}/Cargo.toml lib.crate-type ["cdylib"] > ./{{dir}}/Cargo-local.toml && \
    rm -rf ./{{dir}}/Cargo.toml && \
    mv ./{{dir}}/Cargo-local.toml ./{{dir}}/Cargo.toml

# Clean up artifacts left by the toml CLI program ("["cdylib"]" -> ["cdylib"])
RUN sed -i 's/"\[cdylib\]"/\["cdylib"\]/g' ./{{dir}}/Cargo.toml

# Ensure the package name = "module"
RUN toml set ./{{dir}}/Cargo.toml package.name "module" > ./{{dir}}/Cargo-local.toml && \
    rm -rf ./{{dir}}/Cargo.toml && \
    mv ./{{dir}}/Cargo-local.toml ./{{dir}}/Cargo.toml

# Prebuild all project dependencies, adding them to the cache
RUN cd ./{{dir}} && cargo build-deps --release && cd /project

# Copy all source files
{{#include}}
COPY {{.}} {{.}}
{{/include}}
RUN mv ./{{dir}}/Cargo.toml ./{{dir}}/Cargo-deps.toml
COPY {{dir}} {{dir}}
RUN mv ./{{dir}}/Cargo-deps.toml ./{{dir}}/Cargo.toml

# Actual build:

# Ensure the Wasm module is configured to use imported memory
ENV RUSTFLAGS="-C link-arg=-z -C link-arg=stack-size=65536 -C link-arg=--import-memory"

# Build the module at {{dir}}
RUN cargo build --manifest-path ./{{dir}}/Cargo.toml \
    --target wasm32-unknown-unknown --release

# Make the build directory
RUN rm -rf ./build
RUN mkdir ./build

# Enable the "WASM_INTERFACE_TYPES" feature, which will remove the __wbindgen_throw import.
# See: https://github.com/rustwasm/wasm-bindgen/blob/7f4663b70bd492278bf0e7bba4eeddb3d840c868/crates/cli-support/src/lib.rs#L397-L403
ENV WASM_INTERFACE_TYPES=1

# Run wasm-bindgen over the module, replacing all placeholder __wbindgen_... imports
RUN wasm-bindgen ./{{dir}}/target/wasm32-unknown-unknown/release/module.wasm --out-dir ./build --out-name bg_module.wasm

# Run wasm-tools strip to remove the wasm-interface-types custom section
RUN wasm-tools strip ./build/bg_module.wasm -d wasm-interface-types -o ./build/strip_module.wasm && \
    rm -rf ./build/bg_module.wasm

# Run wasm-snip to trip down the size of the binary, removing any dead code
RUN wasm-snip ./build/strip_module.wasm -o ./build/snipped_module.wasm && \
    rm -rf ./build/strip_module.wasm

# Use wasm-opt to perform the "asyncify" post-processing step over all modules
RUN wasm-opt --asyncify -Os ./build/snipped_module.wasm -o ./build/wrap.wasm && \
    rm -rf ./build/snipped_module.wasm
{{/polywrap_module}}