"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeployJob = void 0;
var core_js_1 = require("@polywrap/core-js");
var DeployJob = /** @class */ (function () {
    function DeployJob(config) {
        var _this = this;
        this._resultMap = new Map();
        this.name = config.name;
        this.steps = config.steps;
        this.config = config.config;
        this._logger = config.logger;
        this.steps.forEach(function (step, index) {
            if (step.uriOrStepResult.startsWith("$")) {
                var previousStepsNames = _this.steps
                    .slice(0, index)
                    .map(function (s) { return s.name; });
                var dependencyStepName = step.uriOrStepResult.slice(1);
                if (!previousStepsNames.includes(dependencyStepName)) {
                    throw new Error("Step '" + step.name + "' depends on '" + dependencyStepName + "'s result, but '" + dependencyStepName + "' is not listed before '" + step.name + "' in DeployJob '" + _this.name + "'");
                }
            }
        });
    }
    DeployJob.prototype.run = function () {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b, _c, step, uri, result, e_2, e_1_1;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        this._logger.info("\n\nExecuting '" + this.name + "' deployment DeployJob: \n" + this.steps
                            .map(function (s) { return "\n- " + s.name; })
                            .join("") + "\n\n");
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 9, 10, 15]);
                        _b = __asyncValues(this.steps);
                        _d.label = 2;
                    case 2: return [4 /*yield*/, _b.next()];
                    case 3:
                        if (!(_c = _d.sent(), !_c.done)) return [3 /*break*/, 8];
                        step = _c.value;
                        uri = this._getUriArgument(step.uriOrStepResult);
                        this._logger.info("Executing step: '" + step.name + "', with URI: '" + uri.toString() + "'");
                        _d.label = 4;
                    case 4:
                        _d.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, step.run(uri, __assign(__assign({}, this.config), step.config))];
                    case 5:
                        result = _d.sent();
                        this._resultMap.set(step.name, {
                            id: this.name + "." + step.name,
                            input: uri,
                            result: result,
                        });
                        this._logger.info("Successfully executed step '" + step.name + "'. Result: '" + result.toString() + "'");
                        return [3 /*break*/, 7];
                    case 6:
                        e_2 = _d.sent();
                        throw new Error("Failed to execute step '" + step.name + "'. Error: " + e_2);
                    case 7: return [3 /*break*/, 2];
                    case 8: return [3 /*break*/, 15];
                    case 9:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 15];
                    case 10:
                        _d.trys.push([10, , 13, 14]);
                        if (!(_c && !_c.done && (_a = _b.return))) return [3 /*break*/, 12];
                        return [4 /*yield*/, _a.call(_b)];
                    case 11:
                        _d.sent();
                        _d.label = 12;
                    case 12: return [3 /*break*/, 14];
                    case 13:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 14: return [7 /*endfinally*/];
                    case 15:
                        this._logger.info("\n\nSuccessfully executed '" + this.name + "' deployment job\n\n");
                        return [2 /*return*/, {
                                name: this.name,
                                steps: this.steps.map(function (s) { return (__assign({ name: s.name }, _this._resultMap.get(s.name))); }),
                            }];
                }
            });
        });
    };
    DeployJob.prototype._getUriArgument = function (uriOrStepResult) {
        if (uriOrStepResult.startsWith("$")) {
            var previousStepResult = this._resultMap.get(uriOrStepResult.slice(1));
            if (!previousStepResult) {
                throw new Error("Could not find " + uriOrStepResult.slice(1) + "'s result");
            }
            return previousStepResult.result;
        }
        return new core_js_1.Uri(uriOrStepResult);
    };
    return DeployJob;
}());
exports.DeployJob = DeployJob;
//# sourceMappingURL=job.js.map