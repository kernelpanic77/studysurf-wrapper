"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateBinding = exports.scriptPath = void 0;
var Functions = __importStar(require("./../functions"));
var utils_1 = require("../utils");
var schema_parse_1 = require("@polywrap/schema-parse");
var schema_bind_1 = require("@polywrap/schema-bind");
var mustache_1 = __importDefault(require("mustache"));
var path_1 = __importDefault(require("path"));
var fs_1 = require("fs");
exports.scriptPath = path_1.default.join(__dirname, "index.js");
var generateBinding = function (options) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
    var _e;
    var result = {
        output: {
            entries: [],
        },
        outputDirAbs: options.outputDirAbs,
    };
    var output = result.output;
    var abi = applyTransforms(options.abi);
    utils_1.sortObjectsInPlaceByType(abi);
    utils_1.sortMethodsInPlaceByName(abi);
    var renderTemplate = function (subPath, context, fileName) {
        var absPath = path_1.default.join(__dirname, subPath);
        var template = fs_1.readFileSync(absPath, { encoding: "utf-8" });
        output.entries.push({
            type: "File",
            name: fileName,
            data: mustache_1.default.render(template, context),
        });
    };
    // generate modules
    if (abi.moduleType) {
        renderTemplate("./templates/docusaurus-module.mustache", abi.moduleType, "module.md");
    }
    // generate object types
    if (abi.objectTypes && abi.objectTypes.length > 0) {
        var objectContext = {
            objectTypes: abi.objectTypes,
        };
        renderTemplate("./templates/docusaurus-objects.mustache", objectContext, "objects.md");
    }
    // generate enum types
    if (abi.enumTypes && abi.enumTypes.length > 0) {
        var enumContext = {
            enumTypes: abi.enumTypes,
        };
        renderTemplate("./templates/docusaurus-enums.mustache", enumContext, "enums.md");
    }
    // generate env type
    if (abi.envType) {
        var envContext = {
            envType: abi.envType,
        };
        renderTemplate("./templates/docusaurus-env.mustache", envContext, "env.md");
    }
    if ((_e = options.config) === null || _e === void 0 ? void 0 : _e["imports"]) {
        // TODO: for imported modules, module.type contains the namespace. Should it?
        // generate imported modules
        if (abi.importedModuleTypes) {
            try {
                for (var _f = __values(abi.importedModuleTypes), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var module_1 = _g.value;
                    var moduleType = module_1.type.split("_")[1];
                    var moduleContext = __assign(__assign({}, module_1), { type: moduleType, imported: { namespace: module_1.namespace } });
                    renderTemplate("./templates/docusaurus-module.mustache", moduleContext, module_1.namespace + "_" + moduleType.toLowerCase() + ".md");
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        // generated imported object types
        if (abi.importedObjectTypes) {
            var importedObjects = utils_1.arrangeByNamespace(abi.importedObjectTypes);
            try {
                for (var _h = __values(Object.entries(importedObjects)), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var _k = __read(_j.value, 2), namespace = _k[0], objectTypes = _k[1];
                    if (objectTypes.length > 0) {
                        var objectContext = {
                            objectTypes: objectTypes,
                            imported: { namespace: namespace },
                        };
                        renderTemplate("./templates/docusaurus-objects.mustache", objectContext, namespace + "_objects.md");
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        // generate imported enum types
        if (abi.importedEnumTypes) {
            var importedEnums = utils_1.arrangeByNamespace(abi.importedEnumTypes);
            try {
                for (var _l = __values(Object.entries(importedEnums)), _m = _l.next(); !_m.done; _m = _l.next()) {
                    var _o = __read(_m.value, 2), namespace = _o[0], enumTypes = _o[1];
                    if (enumTypes.length > 0) {
                        var enumContext = {
                            enumTypes: enumTypes,
                            imported: { namespace: namespace },
                        };
                        renderTemplate("./templates/docusaurus-enums.mustache", enumContext, namespace + "_enums.md");
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        // generate imported env types
        if (abi.importedEnvTypes) {
            var importedEnvs = utils_1.arrangeByNamespace(abi.importedEnvTypes);
            try {
                for (var _p = __values(Object.entries(importedEnvs)), _q = _p.next(); !_q.done; _q = _p.next()) {
                    var _r = __read(_q.value, 2), namespace = _r[0], envType = _r[1];
                    if (envType) {
                        var envContext = {
                            envType: envType,
                            imported: { namespace: namespace },
                        };
                        renderTemplate("./templates/docusaurus-env.mustache", envContext, namespace + "_env.md");
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_q && !_q.done && (_d = _p.return)) _d.call(_p);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
    }
    return result;
};
exports.generateBinding = generateBinding;
function applyTransforms(abi) {
    var e_5, _a;
    var transforms = [
        schema_parse_1.extendType(Functions),
        schema_parse_1.extendType(schema_bind_1.TypeScript.Functions),
        schema_parse_1.addFirstLast,
        schema_parse_1.toPrefixedGraphQLType,
        schema_parse_1.methodParentPointers(),
    ];
    try {
        for (var transforms_1 = __values(transforms), transforms_1_1 = transforms_1.next(); !transforms_1_1.done; transforms_1_1 = transforms_1.next()) {
            var transform = transforms_1_1.value;
            abi = schema_parse_1.transformAbi(abi, transform);
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (transforms_1_1 && !transforms_1_1.done && (_a = transforms_1.return)) _a.call(transforms_1);
        }
        finally { if (e_5) throw e_5.error; }
    }
    return abi;
}
//# sourceMappingURL=index.js.map