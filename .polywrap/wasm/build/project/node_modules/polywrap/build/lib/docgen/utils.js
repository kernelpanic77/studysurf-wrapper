"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sortMethodsInPlaceByName = exports.sortObjectsInPlaceByType = exports.arrangeByNamespace = void 0;
function arrangeByNamespace(definitions) {
    var e_1, _a;
    var result = {};
    try {
        for (var definitions_1 = __values(definitions), definitions_1_1 = definitions_1.next(); !definitions_1_1.done; definitions_1_1 = definitions_1.next()) {
            var val = definitions_1_1.value;
            if (!result[val.namespace]) {
                result[val.namespace] = new Array();
            }
            result[val.namespace].push(val);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (definitions_1_1 && !definitions_1_1.done && (_a = definitions_1.return)) _a.call(definitions_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
}
exports.arrangeByNamespace = arrangeByNamespace;
function sortObjectsInPlaceByType(abi) {
    var e_2, _a;
    var typesToSort = [
        abi.objectTypes,
        abi.enumTypes,
        abi.importedObjectTypes,
        abi.importedEnumTypes,
    ];
    try {
        for (var typesToSort_1 = __values(typesToSort), typesToSort_1_1 = typesToSort_1.next(); !typesToSort_1_1.done; typesToSort_1_1 = typesToSort_1.next()) {
            var definitions = typesToSort_1_1.value;
            if (definitions) {
                definitions.sort(function (a, b) {
                    return a.type.localeCompare(b.type);
                });
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (typesToSort_1_1 && !typesToSort_1_1.done && (_a = typesToSort_1.return)) _a.call(typesToSort_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
}
exports.sortObjectsInPlaceByType = sortObjectsInPlaceByType;
function sortMethodsInPlaceByName(abi) {
    var e_3, _a, e_4, _b;
    var methodsToSort = [];
    if (abi.moduleType && abi.moduleType.methods) {
        methodsToSort.push(abi.moduleType.methods);
    }
    if (abi.importedModuleTypes) {
        try {
            for (var _c = __values(abi.importedModuleTypes), _d = _c.next(); !_d.done; _d = _c.next()) {
                var moduleType = _d.value;
                if (moduleType.methods) {
                    methodsToSort.push(moduleType.methods);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_3) throw e_3.error; }
        }
    }
    try {
        for (var methodsToSort_1 = __values(methodsToSort), methodsToSort_1_1 = methodsToSort_1.next(); !methodsToSort_1_1.done; methodsToSort_1_1 = methodsToSort_1.next()) {
            var definitions = methodsToSort_1_1.value;
            definitions.sort(function (a, b) {
                if (!a.name || !b.name)
                    return 0;
                return a.name.localeCompare(b.name);
            });
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (methodsToSort_1_1 && !methodsToSort_1_1.done && (_b = methodsToSort_1.return)) _b.call(methodsToSort_1);
        }
        finally { if (e_4) throw e_4.error; }
    }
}
exports.sortMethodsInPlaceByName = sortMethodsInPlaceByName;
//# sourceMappingURL=utils.js.map