"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateClientConfig = exports.validateEnvs = exports.validateInterfaces = exports.validatePlugins = exports.validateRedirects = void 0;
var intl_1 = require("../intl");
function validateRedirects(redirects) {
    if (!Array.isArray(redirects)) {
        throw new Error(intl_1.intlMsg.commands_run_error_redirectsExportNotArray());
    }
    // Ensure each redirect in the array is valid
    for (var i = 0; i < redirects.length; ++i) {
        var redirect = redirects[i];
        if (typeof redirect !== "object" || !redirect.from || !redirect.to) {
            throw new Error(intl_1.intlMsg.commands_run_error_redirectsItemNotValid({
                index: i.toString(),
            }));
        }
        else if (typeof redirect.from !== "string") {
            throw new Error(intl_1.intlMsg.commands_run_error_redirectsItemFromNotString({
                index: i.toString(),
            }));
        }
        else if (typeof redirect.to !== "string") {
            throw new Error(intl_1.intlMsg.commands_run_error_redirectsItemToNotStringOrObject({
                index: i.toString(),
            }));
        }
    }
}
exports.validateRedirects = validateRedirects;
function validatePlugins(plugins) {
    if (!Array.isArray(plugins)) {
        throw new Error(intl_1.intlMsg.commands_run_error_pluginsExportNotArray());
    }
    // Ensure each plugin in the array is valid
    for (var i = 0; i < plugins.length; ++i) {
        var plugin = plugins[i];
        if (typeof plugin !== "object") {
            throw new Error(intl_1.intlMsg.commands_run_error_pluginsItemNotObject({
                index: i.toString(),
            }));
        }
        else if (typeof plugin.uri !== "string") {
            throw new Error(intl_1.intlMsg.commands_run_error_pluginsItemUriNotString({
                index: i.toString(),
            }));
        }
        else if (typeof plugin.plugin !== "object") {
            throw new Error(intl_1.intlMsg.commands_run_error_pluginsItemPluginNotObject({
                index: i.toString(),
            }));
        }
        else if (typeof plugin.plugin.factory !== "function") {
            throw new Error(intl_1.intlMsg.commands_run_error_pluginsItemPluginFactoryNotFunction({
                index: i.toString(),
            }));
        }
        else if (typeof plugin.plugin.manifest !== "object") {
            throw new Error(intl_1.intlMsg.commands_run_error_pluginsItemPluginManifestNotObject({
                index: i.toString(),
            }));
        }
    }
}
exports.validatePlugins = validatePlugins;
function validateInterfaces(interfaces) {
    if (!Array.isArray(interfaces)) {
        throw new Error(intl_1.intlMsg.commands_run_error_interfacesExportNotArray());
    }
    // Ensure each interface in the array is valid
    for (var i = 0; i < interfaces.length; ++i) {
        var interfaceImplementations = interfaces[i];
        if (typeof interfaceImplementations !== "object") {
            throw new Error(intl_1.intlMsg.commands_run_error_interfacesItemNotObject({
                index: i.toString(),
            }));
        }
        else if (typeof interfaceImplementations.interface !== "string") {
            throw new Error(intl_1.intlMsg.commands_run_error_interfacesItemInterfaceNotString({
                index: i.toString(),
            }));
        }
        else if (!Array.isArray(interfaceImplementations.implementations)) {
            throw new Error(intl_1.intlMsg.commands_run_error_interfacesItemImplementationsNotArray({
                index: i.toString(),
            }));
        }
        else if (interfaceImplementations.implementations.length === 0) {
            throw new Error(intl_1.intlMsg.commands_run_error_interfacesItemImplementationsEmpty({
                index: i.toString(),
            }));
        }
        for (var j = 0; j < interfaceImplementations.implementations.length; ++j) {
            var implementation = interfaceImplementations.implementations[j];
            if (typeof implementation !== "string") {
                throw new Error(intl_1.intlMsg.commands_run_error_interfacesItemImplementationsItemNotString({
                    index: i.toString(),
                    implementationIndex: j.toString(),
                }));
            }
        }
    }
}
exports.validateInterfaces = validateInterfaces;
function validateEnvs(envs) {
    if (!Array.isArray(envs)) {
        throw new Error(intl_1.intlMsg.commands_run_error_envsExportNotArray());
    }
    for (var i = 0; i < envs.length; ++i) {
        var env = envs[i];
        if (typeof env !== "object") {
            throw new Error(intl_1.intlMsg.commands_run_error_envsItemNotObject({
                index: i.toString(),
            }));
        }
        else if (typeof env.uri !== "string") {
            throw new Error(intl_1.intlMsg.commands_run_error_envsItemUriNotString({
                index: i.toString(),
            }));
        }
        else if (!env.env && typeof env.env !== "object") {
            throw new Error(intl_1.intlMsg.commands_run_error_envsItemModuleNotObject({
                index: i.toString(),
            }));
        }
    }
}
exports.validateEnvs = validateEnvs;
function validateClientConfig(config) {
    if (!config || typeof config !== "object") {
        throw new Error(intl_1.intlMsg.commands_run_error_clientConfigNotObject());
    }
    if (config.plugins)
        validatePlugins(config.plugins);
    if (config.envs)
        validateEnvs(config.envs);
    if (config.interfaces)
        validateInterfaces(config.interfaces);
    if (config.redirects)
        validateRedirects(config.redirects);
}
exports.validateClientConfig = validateClientConfig;
//# sourceMappingURL=validate-client-config.js.map