"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Infra = void 0;
var __1 = require("../");
var path_1 = __importDefault(require("path"));
var fs_1 = __importStar(require("fs"));
var yaml_1 = __importDefault(require("yaml"));
var fs_extra_1 = require("fs-extra");
var DEFAULT_BASE_COMPOSE = {
    version: "3",
};
var Infra = /** @class */ (function () {
    function Infra(_config) {
        this._config = _config;
        this._defaultModuleComposePaths = [
            "./docker-compose.yml",
            "./docker-compose.yaml",
        ];
        this._dockerCompose = new __1.DockerCompose(this._config.logger);
        this._cache = new __1.CacheDirectory({
            rootDir: _config.rootDir,
            subDir: Infra.cacheLayout.root,
        });
        // If user did not specify a base compose, generate a default one
        this._baseDockerComposePath = path_1.default.join(this.getCacheModulesPath(), "base-docker-compose.yml");
        this._generateBaseDockerCompose(this._baseDockerComposePath);
        this._defaultDockerOptions = __1.DockerCompose.getDefaultConfig(this._baseDockerComposePath, this._config.logger, this._config.infraManifest);
    }
    Infra.prototype.up = function () {
        return __awaiter(this, void 0, void 0, function () {
            var modulesWithPaths;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, __1.ensureDockerDaemonRunning(this._config.logger)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this._fetchModules()];
                    case 2:
                        modulesWithPaths = _a.sent();
                        return [4 /*yield*/, this._dockerCompose.commands.upAll(__assign(__assign({}, this._defaultDockerOptions), { config: modulesWithPaths.map(function (m) { return m.path; }), commandOptions: ["--build"] }))];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Infra.prototype.down = function () {
        return __awaiter(this, void 0, void 0, function () {
            var modulesWithPaths;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, __1.ensureDockerDaemonRunning(this._config.logger)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this._fetchModules()];
                    case 2:
                        modulesWithPaths = _a.sent();
                        return [4 /*yield*/, this._dockerCompose.commands.down(__assign(__assign({}, this._defaultDockerOptions), { config: modulesWithPaths.map(function (m) { return m.path; }), commandOptions: ["--remove-orphans"] }))];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Infra.prototype.config = function () {
        return __awaiter(this, void 0, void 0, function () {
            var modulesWithPaths;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._fetchModules()];
                    case 1:
                        modulesWithPaths = _a.sent();
                        return [4 /*yield*/, this._dockerCompose.commands.config(__assign(__assign({}, this._defaultDockerOptions), { config: modulesWithPaths.map(function (m) { return m.path; }) }))];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Infra.prototype.getVars = function () {
        return __awaiter(this, void 0, void 0, function () {
            var modulesWithComposePaths, envVarRegex, envVars;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._fetchModules()];
                    case 1:
                        modulesWithComposePaths = _a.sent();
                        envVarRegex = /\${([^}]+)}/gm;
                        envVars = modulesWithComposePaths.reduce(function (acc, current) {
                            var rawManifest = fs_1.default.readFileSync(current.path, "utf-8");
                            var matches = rawManifest.match(envVarRegex) || [];
                            return __spread(acc, matches.map(function (match) {
                                if (match.startsWith("$")) {
                                    if (match.startsWith("${")) {
                                        return match.slice(2, match.length - 1);
                                    }
                                    return match.slice(1);
                                }
                                return match;
                            }));
                        }, []);
                        return [2 /*return*/, Array.from(new Set(envVars))];
                }
            });
        });
    };
    Infra.prototype.getCacheModulesPath = function () {
        return this._cache.getCachePath(Infra.cacheLayout.modulesDir);
    };
    Infra.prototype.getFilteredModules = function () {
        var _this = this;
        var _a;
        var _b = this._config, modulesToUse = _b.modulesToUse, defaultInfraModulesPath = _b.defaultInfraModulesPath, infraManifest = _b.infraManifest;
        var manifestModules = Object.entries((_a = infraManifest === null || infraManifest === void 0 ? void 0 : infraManifest.modules) !== null && _a !== void 0 ? _a : {}).map(function (_a) {
            var _b = __read(_a, 2), name = _b[0], value = _b[1];
            if (value === "default") {
                return {
                    name: name,
                    path: _this._fetchPathForDefaultModule(name),
                };
            }
            return __assign({ name: name }, value);
        });
        if (!modulesToUse || !modulesToUse.length) {
            return manifestModules;
        }
        var modulesInManifestNames = manifestModules.map(function (m) { return m.name; });
        var defaultInfraModules = fs_1.readdirSync(defaultInfraModulesPath).map(function (moduleName) { return ({
            name: moduleName,
            path: path_1.default.join(defaultInfraModulesPath, moduleName),
        }); });
        var manifestAndDefaultModules = defaultInfraModules.reduce(function (prev, current) {
            // If a module in the manifest has the same name as a default one,
            // the manifest one takes precedence
            if (!modulesInManifestNames.includes(current.name)) {
                return __spread(prev, [current]);
            }
            return prev;
        }, manifestModules);
        var manifestAndDefaultModulesNames = manifestAndDefaultModules.map(function (m) { return m.name; });
        var unrecognizedModules = modulesToUse.reduce(function (prev, current) {
            if (!manifestAndDefaultModulesNames.includes(current)) {
                return __spread(prev, [current]);
            }
            return prev;
        }, []);
        if (unrecognizedModules.length) {
            throw new Error(__1.intlMsg.lib_infra_unrecognizedModule({
                modules: unrecognizedModules.join(", "),
                defaultModules: defaultInfraModules.map(function (m) { return m.name; }).join(", "),
            }));
        }
        return manifestAndDefaultModules.filter(function (m) {
            return modulesToUse.includes(m.name);
        });
    };
    Infra.prototype._writeFileToCacheFromAbsPath = function (absPath, data, options) {
        this._cache.writeCacheFile(path_1.default.relative(this._cache.getCacheDir(), absPath), data, options);
    };
    Infra.prototype._generateBaseDockerCompose = function (composePath) {
        var fileContent = yaml_1.default.stringify(DEFAULT_BASE_COMPOSE, null, 2);
        this._writeFileToCacheFromAbsPath(composePath, fileContent);
    };
    // Compose package.json under .polywrap folder and install deps
    Infra.prototype._fetchRemoteModules = function (modules, installationDir) {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function () {
            var classifiedModules, modulesWithComposePaths, _b, _c, _d, registry, modules_1, dependencyFetcher, mappedInfraModules, modulesWithPaths, e_1_1;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        classifiedModules = modules.reduce(function (prev, current) {
                            var registry = current.registry;
                            if (prev[registry]) {
                                prev[registry].push(current);
                            }
                            else {
                                prev[registry] = [current];
                            }
                            return prev;
                        }, {});
                        modulesWithComposePaths = [];
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 7, 8, 13]);
                        _b = __asyncValues(Object.entries(classifiedModules));
                        _e.label = 2;
                    case 2: return [4 /*yield*/, _b.next()];
                    case 3:
                        if (!(_c = _e.sent(), !_c.done)) return [3 /*break*/, 6];
                        _d = __read(_c.value, 2), registry = _d[0], modules_1 = _d[1];
                        dependencyFetcher = new __1.dependencyFetcherClassMap[registry]({
                            cache: this._cache,
                            installationDirectory: installationDir,
                            name: registry,
                            logger: this._config.logger,
                        });
                        mappedInfraModules = modules_1.map(function (p) { return ({
                            name: p.package,
                            versionOrPath: p.version,
                        }); });
                        return [4 /*yield*/, dependencyFetcher.installPackages(mappedInfraModules)];
                    case 4:
                        _e.sent();
                        modulesWithPaths = modules_1.map(function (m) {
                            var packageDir = dependencyFetcher.getPackageDir(m.package);
                            var packagePath = m.dockerComposePath
                                ? path_1.default.join(packageDir, m.dockerComposePath)
                                : _this.tryResolveComposeFile(packageDir, _this._defaultModuleComposePaths);
                            return { moduleName: m.name, path: packagePath };
                        });
                        modulesWithComposePaths.push.apply(modulesWithComposePaths, __spread(modulesWithPaths));
                        _e.label = 5;
                    case 5: return [3 /*break*/, 2];
                    case 6: return [3 /*break*/, 13];
                    case 7:
                        e_1_1 = _e.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 13];
                    case 8:
                        _e.trys.push([8, , 11, 12]);
                        if (!(_c && !_c.done && (_a = _b.return))) return [3 /*break*/, 10];
                        return [4 /*yield*/, _a.call(_b)];
                    case 9:
                        _e.sent();
                        _e.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 12: return [7 /*endfinally*/];
                    case 13: return [2 /*return*/, modulesWithComposePaths];
                }
            });
        });
    };
    Infra.prototype._fetchModules = function () {
        return __awaiter(this, void 0, void 0, function () {
            var modules, remoteModules, localModules, installationDir, remoteModulesWithComposePaths, localModulesWithComposePaths, modulesWithComposePaths;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._fetchedModulesData) {
                            return [2 /*return*/, this._fetchedModulesData];
                        }
                        modules = this.getFilteredModules();
                        if (!modules.length) {
                            throw new Error("No modules to fetch");
                        }
                        remoteModules = modules.filter(function (m) { return !_this._isLocalModule(m); });
                        localModules = modules.filter(function (m) {
                            return _this._isLocalModule(m);
                        });
                        installationDir = this.getCacheModulesPath();
                        return [4 /*yield*/, this._fetchRemoteModules(remoteModules, installationDir)];
                    case 1:
                        remoteModulesWithComposePaths = _a.sent();
                        return [4 /*yield*/, this._fetchLocalModules(localModules)];
                    case 2:
                        localModulesWithComposePaths = _a.sent();
                        modulesWithComposePaths = __spread(remoteModulesWithComposePaths, localModulesWithComposePaths);
                        modulesWithComposePaths.forEach(function (m) {
                            // Adjust package's docker-compose's build option if it exists
                            var composeFileWithCorrectPaths = __1.correctBuildContextPathsFromCompose(m.path);
                            // Write new docker-compose manifests with corrected build path and 'polywrap' prefix
                            var newComposeFile = yaml_1.default.stringify(composeFileWithCorrectPaths, null, 2);
                            _this._writeFileToCacheFromAbsPath(m.path, newComposeFile);
                        });
                        return [2 /*return*/, modulesWithComposePaths];
                }
            });
        });
    };
    Infra.prototype._fetchLocalModules = function (modules) {
        return __awaiter(this, void 0, void 0, function () {
            var modulesWithComposePaths, basePath, modules_2, modules_2_1, module_1, isFile, modulePath, composePath;
            var e_2, _a;
            return __generator(this, function (_b) {
                modulesWithComposePaths = [];
                basePath = path_1.default.join(this.getCacheModulesPath(), "local");
                try {
                    for (modules_2 = __values(modules), modules_2_1 = modules_2.next(); !modules_2_1.done; modules_2_1 = modules_2.next()) {
                        module_1 = modules_2_1.value;
                        isFile = fs_1.lstatSync(module_1.path).isFile();
                        modulePath = path_1.default.join(basePath, isFile ? module_1.path : module_1.name);
                        fs_extra_1.copySync(module_1.path, modulePath);
                        composePath = this.tryResolveComposeFile(modulePath, this._defaultModuleComposePaths);
                        modulesWithComposePaths.push({
                            moduleName: module_1.name,
                            path: composePath,
                        });
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (modules_2_1 && !modules_2_1.done && (_a = modules_2.return)) _a.call(modules_2);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                return [2 /*return*/, modulesWithComposePaths];
            });
        });
    };
    Infra.prototype._isLocalModule = function (object) {
        return Object.prototype.hasOwnProperty.call(object, "path");
    };
    Infra.prototype._fetchPathForDefaultModule = function (module) {
        var defaultModules = fs_1.readdirSync(this._config.defaultInfraModulesPath);
        var defaultModulePath = defaultModules.find(function (defaultModules) { return defaultModules === module; });
        if (!defaultModulePath) {
            throw new Error("Module " + module + " not found as default\nDefault Modules available: " + defaultModules
                .map(function (m) { return "\n- " + m; })
                .join(""));
        }
        return path_1.default.join(this._config.defaultInfraModulesPath, defaultModulePath);
    };
    Infra.prototype.tryResolveComposeFile = function (moduleDir, pathsToTry, triedPaths) {
        if (triedPaths === void 0) { triedPaths = []; }
        if (!pathsToTry.length) {
            throw new Error("Could not resolve docker compose file. Tried paths: " + triedPaths);
        }
        var pathToTry = fs_1.lstatSync(moduleDir).isFile()
            ? moduleDir
            : path_1.default.join(moduleDir, pathsToTry[0]);
        if (fs_1.default.existsSync(pathToTry)) {
            return pathToTry;
        }
        return this.tryResolveComposeFile(moduleDir, pathsToTry.slice(1), __spread(triedPaths, [
            pathToTry,
        ]));
    };
    Infra.cacheLayout = {
        root: "infra/",
        modulesDir: "modules",
    };
    return Infra;
}());
exports.Infra = Infra;
//# sourceMappingURL=Infra.js.map