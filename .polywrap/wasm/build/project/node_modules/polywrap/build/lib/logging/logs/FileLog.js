"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileLog = void 0;
var Log_1 = require("../Log");
var fs_1 = __importDefault(require("fs"));
var logging_js_1 = require("@polywrap/logging-js");
var FileLog = /** @class */ (function (_super) {
    __extends(FileLog, _super);
    function FileLog(logFilePath, level) {
        var _this = _super.call(this, level) || this;
        _this.logFilePath = logFilePath;
        _this._createWriteStream();
        return _this;
    }
    FileLog.prototype.end = function () {
        this._logFileStream.end();
    };
    FileLog.prototype.log = function (message, level) {
        if (level < this.level || !this._logFileStream) {
            return;
        }
        var prefix = Date.now().toString() + " ";
        switch (level) {
            case logging_js_1.LogLevel.DEBUG:
                prefix += "DEBUG: ";
                break;
            case logging_js_1.LogLevel.INFO:
                prefix += "INFO: ";
                break;
            case logging_js_1.LogLevel.WARN:
                prefix += "WARN: ";
                break;
            case logging_js_1.LogLevel.ERROR:
                prefix += "ERROR: ";
                break;
        }
        this._logFileStream.write(prefix + message);
    };
    FileLog.prototype._createWriteStream = function () {
        this._logFileStream = fs_1.default.createWriteStream(this.logFilePath, {
            encoding: "utf8",
        });
    };
    return FileLog;
}(Log_1.Log));
exports.FileLog = FileLog;
//# sourceMappingURL=FileLog.js.map