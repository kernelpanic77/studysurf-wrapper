"use strict";
/* eslint-disable @typescript-eslint/no-var-requires */
/* eslint-disable @typescript-eslint/naming-convention */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolywrapProject = void 0;
var _1 = require(".");
var manifests_1 = require("./manifests");
var system_1 = require("../system");
var helpers_1 = require("../helpers");
var os_js_1 = require("@polywrap/os-js");
var schema_bind_1 = require("@polywrap/schema-bind");
var regex_parser_1 = __importDefault(require("regex-parser"));
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var PolywrapProject = /** @class */ (function (_super) {
    __extends(PolywrapProject, _super);
    function PolywrapProject(_config) {
        var _this = _super.call(this, _config, {
            rootDir: _config.rootDir,
            subDir: PolywrapProject.cacheLayout.root,
        }) || this;
        _this._config = _config;
        _this._defaultDeployModulesCached = false;
        return _this;
    }
    PolywrapProject.prototype.getCachePath = function (subpath) {
        return this._cache.getCachePath(subpath);
    };
    /// Project Base Methods
    PolywrapProject.prototype.reset = function () {
        this._polywrapManifest = undefined;
        this._buildManifest = undefined;
        this._metaManifest = undefined;
        this._deployManifest = undefined;
        this._defaultDeployModulesCached = false;
        this._cache.removeCacheDir(PolywrapProject.cacheLayout.buildLinkedPackagesDir);
        this._cache.removeCacheDir(PolywrapProject.cacheLayout.deployDir);
    };
    PolywrapProject.prototype.validate = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.resolve()];
            });
        });
    };
    /// Manifest (polywrap.yaml)
    PolywrapProject.prototype.getName = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getManifest()];
                    case 1: return [2 /*return*/, (_a.sent()).project.name];
                }
            });
        });
    };
    PolywrapProject.prototype.getManifest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!!this._polywrapManifest) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, manifests_1.loadPolywrapManifest(this.getManifestPath(), this.logger)];
                    case 1:
                        _a._polywrapManifest = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/, Promise.resolve(this._polywrapManifest)];
                }
            });
        });
    };
    PolywrapProject.prototype.getManifestDir = function () {
        return path_1.default.dirname(this.getManifestPath());
    };
    PolywrapProject.prototype.getManifestPath = function () {
        return this._config.polywrapManifestPath;
    };
    PolywrapProject.prototype.getManifestLanguage = function () {
        return __awaiter(this, void 0, void 0, function () {
            var language;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getManifest()];
                    case 1:
                        language = (_a.sent()).project.type;
                        _1.Project.validateManifestLanguage(language, manifests_1.polywrapManifestLanguages, manifests_1.isPolywrapManifestLanguage);
                        return [2 /*return*/, language];
                }
            });
        });
    };
    /// Schema
    PolywrapProject.prototype.getSchemaNamedPath = function () {
        return __awaiter(this, void 0, void 0, function () {
            var manifest, dir;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getManifest()];
                    case 1:
                        manifest = _a.sent();
                        dir = this.getManifestDir();
                        return [2 /*return*/, path_1.default.join(dir, manifest.source.schema)];
                }
            });
        });
    };
    PolywrapProject.prototype.getImportAbis = function () {
        return __awaiter(this, void 0, void 0, function () {
            var manifest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getManifest()];
                    case 1:
                        manifest = _a.sent();
                        return [2 /*return*/, manifest.source.import_abis || []];
                }
            });
        });
    };
    PolywrapProject.prototype.generateSchemaBindings = function (abi, generationSubPath) {
        return __awaiter(this, void 0, void 0, function () {
            var manifest, codegenDirectory, bindLanguage, _a, options;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getManifest()];
                    case 1:
                        manifest = _b.sent();
                        codegenDirectory = this._getGenerationDirectory(generationSubPath);
                        // Clean the code generation
                        system_1.resetDir(codegenDirectory);
                        _a = manifests_1.polywrapManifestLanguageToBindLanguage;
                        return [4 /*yield*/, this.getManifestLanguage()];
                    case 2:
                        bindLanguage = _a.apply(void 0, [_b.sent()]);
                        options = {
                            projectName: manifest.project.name,
                            abi: abi,
                            outputDirAbs: codegenDirectory,
                            bindLanguage: bindLanguage,
                        };
                        return [2 /*return*/, schema_bind_1.bindSchema(options)];
                }
            });
        });
    };
    /// Polywrap Build Manifest (polywrap.build.yaml)
    PolywrapProject.prototype.getBuildManifestPath = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var polywrapManifest;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getManifest()];
                    case 1:
                        polywrapManifest = _b.sent();
                        // If a custom build manifest path is configured
                        if (this._config.buildManifestPath) {
                            return [2 /*return*/, this._config.buildManifestPath];
                        }
                        // If the polywrap.yaml manifest specifies a custom build manifest
                        else if ((_a = polywrapManifest.extensions) === null || _a === void 0 ? void 0 : _a.build) {
                            this._config.buildManifestPath = path_1.default.join(this.getManifestDir(), polywrapManifest.extensions.build);
                            return [2 /*return*/, this._config.buildManifestPath];
                        }
                        return [2 /*return*/, undefined];
                }
            });
        });
    };
    PolywrapProject.prototype.getBuildManifest = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var buildManifestPath, language, _b, root_1, cacheDir_1, module_1, defaultConfig;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!!this._buildManifest) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.getBuildManifestPath()];
                    case 1:
                        buildManifestPath = _d.sent();
                        return [4 /*yield*/, this.getManifestLanguage()];
                    case 2:
                        language = _d.sent();
                        _b = this;
                        return [4 /*yield*/, manifests_1.loadBuildManifest(language, buildManifestPath !== null && buildManifestPath !== void 0 ? buildManifestPath : path_1.default.join(__dirname, "..", "defaults", "build-strategies", language, "default.build.yaml"), this.logger)];
                    case 3:
                        _b._buildManifest = _d.sent();
                        root_1 = this.getManifestDir();
                        cacheDir_1 = this._cache.getCachePath(PolywrapProject.cacheLayout.buildLinkedPackagesDir);
                        return [4 /*yield*/, this._getModule()];
                    case 4:
                        module_1 = _d.sent();
                        _c = {};
                        return [4 /*yield*/, this.getManifestPaths()];
                    case 5:
                        defaultConfig = (_c.polywrap_manifests = (_d.sent()).map(function (path) {
                            return os_js_1.normalizePath(path);
                        }),
                            _c.polywrap_linked_packages = (_a = this._buildManifest.linked_packages) === null || _a === void 0 ? void 0 : _a.map(function (linkedPackage) { return ({
                                dir: path_1.default.relative(root_1, path_1.default.join(cacheDir_1, linkedPackage.name)),
                                name: linkedPackage.name,
                            }); }),
                            _c);
                        if (module_1) {
                            defaultConfig["polywrap_module"] = {
                                name: "module",
                                dir: os_js_1.normalizePath(module_1),
                            };
                        }
                        if (!this._buildManifest.config) {
                            this._buildManifest.config = defaultConfig;
                        }
                        else {
                            this._buildManifest.config = __assign(__assign({}, this._buildManifest.config), defaultConfig);
                        }
                        _d.label = 6;
                    case 6: return [2 /*return*/, this._buildManifest];
                }
            });
        });
    };
    PolywrapProject.prototype.getBuildUuid = function () {
        return __awaiter(this, void 0, void 0, function () {
            var uuid;
            return __generator(this, function (_a) {
                uuid = this._cache.readCacheFile(PolywrapProject.cacheLayout.buildUuidFile);
                // If none was present, generate one
                if (!uuid) {
                    uuid = helpers_1.createUUID();
                    this._cache.writeCacheFile(PolywrapProject.cacheLayout.buildUuidFile, uuid, "utf-8");
                }
                return [2 /*return*/, uuid];
            });
        });
    };
    PolywrapProject.prototype.cacheBuildManifestLinkedPackages = function () {
        return __awaiter(this, void 0, void 0, function () {
            var buildManifest, rootDir_1, cacheSubPath_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBuildManifest()];
                    case 1:
                        buildManifest = _a.sent();
                        if (buildManifest.linked_packages) {
                            rootDir_1 = this.getManifestDir();
                            cacheSubPath_1 = this._cache.getCachePath(PolywrapProject.cacheLayout.buildLinkedPackagesDir);
                            buildManifest.linked_packages.map(function (linkedPackage) {
                                var sourceDir = path_1.default.join(rootDir_1, linkedPackage.path);
                                var destinationDir = path_1.default.join(cacheSubPath_1, linkedPackage.name);
                                // Update the cache
                                _this._cache.removeCacheDir(destinationDir);
                                fs_extra_1.default.copySync(sourceDir, destinationDir, {
                                    overwrite: true,
                                    dereference: true,
                                    recursive: true,
                                    filter: function (src) {
                                        if (fs_1.default.lstatSync(src).isSymbolicLink()) {
                                            return false;
                                        }
                                        if (linkedPackage.filter) {
                                            var regexFilter = regex_parser_1.default(linkedPackage.filter);
                                            var result = regexFilter.test(src);
                                            if (result) {
                                                return false;
                                            }
                                        }
                                        return true;
                                    },
                                });
                            });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /// Polywrap Deploy Manifest (polywrap.deploy.yaml)
    PolywrapProject.prototype.getDeployManifestPath = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var polywrapManifest;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getManifest()];
                    case 1:
                        polywrapManifest = _b.sent();
                        // If a custom deploy manifest path is configured
                        if (this._config.deployManifestPath) {
                            return [2 /*return*/, this._config.deployManifestPath];
                        }
                        // If the polywrap.yaml manifest specifies a custom deploy manifest
                        else if ((_a = polywrapManifest.extensions) === null || _a === void 0 ? void 0 : _a.deploy) {
                            this._config.deployManifestPath = path_1.default.join(this.getManifestDir(), polywrapManifest.extensions.deploy);
                            return [2 /*return*/, this._config.deployManifestPath];
                        }
                        // No deploy manifest found
                        else {
                            return [2 /*return*/, undefined];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    PolywrapProject.prototype.getDeployManifestDir = function () {
        return __awaiter(this, void 0, void 0, function () {
            var manifestPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDeployManifestPath()];
                    case 1:
                        manifestPath = _a.sent();
                        if (manifestPath) {
                            return [2 /*return*/, path_1.default.dirname(manifestPath)];
                        }
                        else {
                            return [2 /*return*/, undefined];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    PolywrapProject.prototype.getDeployManifest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var manifestPath, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!!this._deployManifest) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getDeployManifestPath()];
                    case 1:
                        manifestPath = _b.sent();
                        if (!manifestPath) return [3 /*break*/, 3];
                        _a = this;
                        return [4 /*yield*/, manifests_1.loadDeployManifest(manifestPath, this.logger)];
                    case 2:
                        _a._deployManifest = _b.sent();
                        _b.label = 3;
                    case 3: return [2 /*return*/, this._deployManifest];
                }
            });
        });
    };
    PolywrapProject.prototype.getDeployModule = function (moduleName) {
        return __awaiter(this, void 0, void 0, function () {
            var cachePath, manifestExtPath, manifestExt;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._defaultDeployModulesCached) {
                            throw new Error("Deploy modules have not been cached");
                        }
                        cachePath = this._cache.getCachePath(PolywrapProject.cacheLayout.deployModulesDir + "/" + moduleName);
                        manifestExtPath = path_1.default.join(cachePath, "polywrap.deploy.ext.json");
                        return [4 /*yield*/, manifests_1.loadDeployManifestExt(manifestExtPath, this.logger)];
                    case 1:
                        manifestExt = _a.sent();
                        return [2 /*return*/, {
                                // eslint-disable-next-line @typescript-eslint/no-require-imports
                                deployer: require(cachePath).default,
                                manifestExt: manifestExt,
                            }];
                }
            });
        });
    };
    PolywrapProject.prototype.cacheDeployModules = function (modules) {
        var modules_1, modules_1_1;
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function () {
            var deployModule, e_1_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this._defaultDeployModulesCached) {
                            return [2 /*return*/];
                        }
                        this._cache.removeCacheDir(PolywrapProject.cacheLayout.deployModulesDir);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 7, 8, 13]);
                        modules_1 = __asyncValues(modules);
                        _b.label = 2;
                    case 2: return [4 /*yield*/, modules_1.next()];
                    case 3:
                        if (!(modules_1_1 = _b.sent(), !modules_1_1.done)) return [3 /*break*/, 6];
                        deployModule = modules_1_1.value;
                        return [4 /*yield*/, this._cache.copyIntoCache(PolywrapProject.cacheLayout.deployModulesDir + "/" + deployModule, __dirname + "/../defaults/deploy-modules/" + deployModule + "/*", { up: true })];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5: return [3 /*break*/, 2];
                    case 6: return [3 /*break*/, 13];
                    case 7:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 13];
                    case 8:
                        _b.trys.push([8, , 11, 12]);
                        if (!(modules_1_1 && !modules_1_1.done && (_a = modules_1.return))) return [3 /*break*/, 10];
                        return [4 /*yield*/, _a.call(modules_1)];
                    case 9:
                        _b.sent();
                        _b.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 12: return [7 /*endfinally*/];
                    case 13:
                        this._defaultDeployModulesCached = true;
                        return [2 /*return*/];
                }
            });
        });
    };
    /// Polywrap Meta Manifest (polywrap.build.yaml)
    PolywrapProject.prototype.getMetaManifestPath = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var polywrapManifest;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getManifest()];
                    case 1:
                        polywrapManifest = _b.sent();
                        // If a custom meta manifest path is configured
                        if (this._config.metaManifestPath) {
                            return [2 /*return*/, this._config.metaManifestPath];
                        }
                        // If the polywrap.yaml manifest specifies a custom meta manifest
                        else if ((_a = polywrapManifest.extensions) === null || _a === void 0 ? void 0 : _a.meta) {
                            this._config.metaManifestPath = path_1.default.join(this.getManifestDir(), polywrapManifest.extensions.meta);
                            return [2 /*return*/, this._config.metaManifestPath];
                        }
                        // No meta manifest found
                        else {
                            return [2 /*return*/, undefined];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    PolywrapProject.prototype.getMetaManifestDir = function () {
        return __awaiter(this, void 0, void 0, function () {
            var manifestPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getMetaManifestPath()];
                    case 1:
                        manifestPath = _a.sent();
                        if (manifestPath) {
                            return [2 /*return*/, path_1.default.dirname(manifestPath)];
                        }
                        else {
                            return [2 /*return*/, undefined];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    PolywrapProject.prototype.getMetaManifest = function () {
        return __awaiter(this, void 0, void 0, function () {
            var manifestPath, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!!this._metaManifest) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getMetaManifestPath()];
                    case 1:
                        manifestPath = _b.sent();
                        if (!manifestPath) return [3 /*break*/, 3];
                        _a = this;
                        return [4 /*yield*/, manifests_1.loadMetaManifest(manifestPath, this.logger)];
                    case 2:
                        _a._metaManifest = _b.sent();
                        _b.label = 3;
                    case 3: return [2 /*return*/, this._metaManifest];
                }
            });
        });
    };
    PolywrapProject.prototype.getManifestPaths = function (absolute) {
        if (absolute === void 0) { absolute = false; }
        return __awaiter(this, void 0, void 0, function () {
            var root, paths, buildManifestPath, metaManifestPath, deployManifestPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        root = this.getManifestDir();
                        paths = [
                            absolute
                                ? this.getManifestPath()
                                : path_1.default.relative(root, this.getManifestPath()),
                        ];
                        return [4 /*yield*/, this.getBuildManifestPath()];
                    case 1:
                        buildManifestPath = _a.sent();
                        if (buildManifestPath) {
                            paths.push(absolute ? buildManifestPath : path_1.default.relative(root, buildManifestPath));
                        }
                        return [4 /*yield*/, this.getMetaManifestPath()];
                    case 2:
                        metaManifestPath = _a.sent();
                        if (metaManifestPath) {
                            paths.push(absolute ? metaManifestPath : path_1.default.relative(root, metaManifestPath));
                        }
                        return [4 /*yield*/, this.getDeployManifestPath()];
                    case 3:
                        deployManifestPath = _a.sent();
                        if (deployManifestPath) {
                            paths.push(absolute ? deployManifestPath : path_1.default.relative(root, deployManifestPath));
                        }
                        return [2 /*return*/, paths];
                }
            });
        });
    };
    /// Private Helpers
    PolywrapProject.prototype._getModule = function () {
        return __awaiter(this, void 0, void 0, function () {
            var manifest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getManifest()];
                    case 1:
                        manifest = _a.sent();
                        if (manifest.source.module) {
                            return [2 /*return*/, path_1.default.dirname(manifest.source.module).replace("./", "")];
                        }
                        return [2 /*return*/, undefined];
                }
            });
        });
    };
    PolywrapProject.prototype._getGenerationDirectory = function (generationSubPath) {
        if (generationSubPath === void 0) { generationSubPath = "src/wrap"; }
        return path_1.default.join(this.getManifestDir(), generationSubPath);
    };
    PolywrapProject.cacheLayout = {
        root: "wasm/",
        buildStrategyUsed: "build/strategy-used",
        buildDir: "build/",
        buildUuidFile: "build/uuid",
        buildProjectDir: "build/project",
        buildLinkedPackagesDir: "build/linked-packages/",
        deployDir: "deploy/",
        deployModulesDir: "deploy/modules/",
    };
    return PolywrapProject;
}(_1.Project));
exports.PolywrapProject = PolywrapProject;
//# sourceMappingURL=PolywrapProject.js.map