"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadWorkflowManifest = exports.defaultWorkflowManifest = exports.loadInfraManifest = exports.defaultInfraManifest = exports.loadMetaManifest = exports.defaultMetaManifest = exports.loadDeployManifestExt = exports.loadDeployManifest = exports.defaultDeployManifest = exports.loadBuildManifest = exports.defaultBuildManifest = exports.loadPolywrapManifest = exports.defaultPolywrapManifest = void 0;
var __1 = require("../../../");
var polywrap_manifest_types_js_1 = require("@polywrap/polywrap-manifest-types-js");
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
exports.defaultPolywrapManifest = ["polywrap.yaml", "polywrap.yml"];
function loadPolywrapManifest(manifestPath, logger) {
    return __awaiter(this, void 0, void 0, function () {
        var run;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    run = function () {
                        var manifest = fs_1.default.readFileSync(manifestPath, "utf-8");
                        if (!manifest) {
                            var noLoadMessage = __1.intlMsg.lib_helpers_manifest_unableToLoad({
                                path: "" + manifestPath,
                            });
                            throw Error(noLoadMessage);
                        }
                        try {
                            var result = polywrap_manifest_types_js_1.deserializePolywrapManifest(manifest, { logger: logger });
                            return Promise.resolve(result);
                        }
                        catch (e) {
                            return Promise.reject(e);
                        }
                    };
                    manifestPath = __1.displayPath(manifestPath);
                    return [4 /*yield*/, __1.logActivity(logger, __1.intlMsg.lib_helpers_manifest_loadText({ path: manifestPath }), __1.intlMsg.lib_helpers_manifest_loadError({ path: manifestPath }), __1.intlMsg.lib_helpers_manifest_loadWarning({ path: manifestPath }), function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, run()];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.loadPolywrapManifest = loadPolywrapManifest;
exports.defaultBuildManifest = [
    "polywrap.build.yaml",
    "polywrap.build.yml",
];
function loadBuildManifest(language, manifestPath, logger) {
    return __awaiter(this, void 0, void 0, function () {
        var run;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    run = function () {
                        var manifest = fs_1.default.readFileSync(manifestPath, "utf-8");
                        if (!manifest) {
                            var noLoadMessage = __1.intlMsg.lib_helpers_manifest_unableToLoad({
                                path: "" + manifestPath,
                            });
                            throw Error(noLoadMessage);
                        }
                        var extSchema = undefined;
                        if (language.startsWith("wasm")) {
                            var extSchemaPath = path_1.default.join(__dirname, "..", "..", "..", "defaults", "build-strategies", language, "manifest.ext.json");
                            extSchema = JSON.parse(fs_1.default.readFileSync(extSchemaPath, "utf-8"));
                        }
                        return polywrap_manifest_types_js_1.deserializeBuildManifest(manifest, {
                            extSchema: extSchema,
                            logger: logger,
                        });
                    };
                    manifestPath = __1.displayPath(manifestPath);
                    return [4 /*yield*/, __1.logActivity(logger, __1.intlMsg.lib_helpers_manifest_loadText({ path: manifestPath }), __1.intlMsg.lib_helpers_manifest_loadError({ path: manifestPath }), __1.intlMsg.lib_helpers_manifest_loadWarning({ path: manifestPath }), function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                return [2 /*return*/, run()];
                            });
                        }); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.loadBuildManifest = loadBuildManifest;
exports.defaultDeployManifest = [
    "polywrap.deploy.yaml",
    "polywrap.deploy.yml",
];
function loadDeployManifest(manifestPath, logger) {
    return __awaiter(this, void 0, void 0, function () {
        var run;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    run = function () {
                        var manifest = fs_1.default.readFileSync(manifestPath, "utf-8");
                        if (!manifest) {
                            var noLoadMessage = __1.intlMsg.lib_helpers_manifest_unableToLoad({
                                path: "" + manifestPath,
                            });
                            throw Error(noLoadMessage);
                        }
                        try {
                            var result = polywrap_manifest_types_js_1.deserializeDeployManifest(manifest, { logger: logger });
                            result = __1.loadEnvironmentVariables(result);
                            return Promise.resolve(result);
                        }
                        catch (e) {
                            return Promise.reject(e);
                        }
                    };
                    manifestPath = __1.displayPath(manifestPath);
                    return [4 /*yield*/, __1.logActivity(logger, __1.intlMsg.lib_helpers_manifest_loadText({ path: manifestPath }), __1.intlMsg.lib_helpers_manifest_loadError({ path: manifestPath }), __1.intlMsg.lib_helpers_manifest_loadWarning({ path: manifestPath }), function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, run()];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.loadDeployManifest = loadDeployManifest;
function loadDeployManifestExt(manifestExtPath, logger) {
    return __awaiter(this, void 0, void 0, function () {
        var run;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    run = function () {
                        var configSchemaPath = path_1.default.join(path_1.default.dirname(manifestExtPath), "/polywrap.deploy.ext.json");
                        var extSchema;
                        if (fs_1.default.existsSync(configSchemaPath)) {
                            extSchema = JSON.parse(fs_1.default.readFileSync(configSchemaPath, "utf-8"));
                        }
                        return extSchema;
                    };
                    manifestExtPath = __1.displayPath(manifestExtPath);
                    return [4 /*yield*/, __1.logActivity(logger, __1.intlMsg.lib_helpers_deployManifestExt_loadText({ path: manifestExtPath }), __1.intlMsg.lib_helpers_deployManifestExt_loadError({
                            path: manifestExtPath,
                        }), __1.intlMsg.lib_helpers_deployManifestExt_loadWarning({
                            path: manifestExtPath,
                        }), function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                return [2 /*return*/, run()];
                            });
                        }); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.loadDeployManifestExt = loadDeployManifestExt;
exports.defaultMetaManifest = ["polywrap.meta.yaml", "polywrap.meta.yml"];
function loadMetaManifest(manifestPath, logger) {
    return __awaiter(this, void 0, void 0, function () {
        var run;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    run = function () {
                        var manifest = fs_1.default.readFileSync(manifestPath, "utf-8");
                        if (!manifest) {
                            var noLoadMessage = __1.intlMsg.lib_helpers_manifest_unableToLoad({
                                path: "" + manifestPath,
                            });
                            throw Error(noLoadMessage);
                        }
                        try {
                            var result = polywrap_manifest_types_js_1.deserializeMetaManifest(manifest, { logger: logger });
                            return Promise.resolve(result);
                        }
                        catch (e) {
                            return Promise.reject(e);
                        }
                    };
                    manifestPath = __1.displayPath(manifestPath);
                    return [4 /*yield*/, __1.logActivity(logger, __1.intlMsg.lib_helpers_manifest_loadText({ path: manifestPath }), __1.intlMsg.lib_helpers_manifest_loadError({ path: manifestPath }), __1.intlMsg.lib_helpers_manifest_loadWarning({ path: manifestPath }), function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, run()];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.loadMetaManifest = loadMetaManifest;
exports.defaultInfraManifest = [
    "polywrap.infra.yaml",
    "polywrap.infra.yml",
];
function loadInfraManifest(manifestPath, logger) {
    return __awaiter(this, void 0, void 0, function () {
        var run;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    run = function () {
                        var manifest = fs_1.default.readFileSync(manifestPath, "utf-8");
                        if (!manifest) {
                            var noLoadMessage = __1.intlMsg.lib_helpers_manifest_unableToLoad({
                                path: "" + manifestPath,
                            });
                            throw Error(noLoadMessage);
                        }
                        try {
                            var result = polywrap_manifest_types_js_1.deserializeInfraManifest(manifest, { logger: logger });
                            result = __1.loadEnvironmentVariables(result);
                            return Promise.resolve(result);
                        }
                        catch (e) {
                            return Promise.reject(e);
                        }
                    };
                    manifestPath = __1.displayPath(manifestPath);
                    return [4 /*yield*/, __1.logActivity(logger, __1.intlMsg.lib_helpers_manifest_loadText({ path: manifestPath }), __1.intlMsg.lib_helpers_manifest_loadError({ path: manifestPath }), __1.intlMsg.lib_helpers_manifest_loadWarning({ path: manifestPath }), function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, run()];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.loadInfraManifest = loadInfraManifest;
exports.defaultWorkflowManifest = [
    "polywrap.test.yaml",
    "polywrap.test.yml",
];
function loadWorkflowManifest(manifestPath, logger) {
    return __awaiter(this, void 0, void 0, function () {
        var run;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    run = function () {
                        var manifest = fs_1.default.readFileSync(manifestPath, "utf-8");
                        if (!manifest) {
                            var noLoadMessage = __1.intlMsg.lib_helpers_manifest_unableToLoad({
                                path: "" + manifestPath,
                            });
                            throw Error(noLoadMessage);
                        }
                        try {
                            var result = polywrap_manifest_types_js_1.deserializePolywrapWorkflow(manifest, { logger: logger });
                            return Promise.resolve(result);
                        }
                        catch (e) {
                            return Promise.reject(e);
                        }
                    };
                    manifestPath = __1.displayPath(manifestPath);
                    return [4 /*yield*/, __1.logActivity(logger, __1.intlMsg.lib_helpers_manifest_loadText({ path: manifestPath }), __1.intlMsg.lib_helpers_manifest_loadError({ path: manifestPath }), __1.intlMsg.lib_helpers_manifest_loadWarning({ path: manifestPath }), function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, run()];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.loadWorkflowManifest = loadWorkflowManifest;
//# sourceMappingURL=load.js.map