"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateProjectTemplate = void 0;
var __1 = require("../../");
var child_process_1 = require("child_process");
var fs_1 = __importDefault(require("fs"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var dns_1 = __importDefault(require("dns"));
var url_1 = __importDefault(require("url"));
var chalk_1 = __importDefault(require("chalk"));
var path_1 = __importDefault(require("path"));
function shouldUseYarn() {
    try {
        child_process_1.execSync("yarnpkg --version", { stdio: "ignore" });
        return true;
    }
    catch (e) {
        return false;
    }
}
function getProxy() {
    if (process.env.https_proxy) {
        return process.env.https_proxy;
    }
    else {
        try {
            // Trying to read https-proxy from .npmrc
            var httpsProxy = child_process_1.execSync("npm config get https-proxy")
                .toString()
                .trim();
            return httpsProxy !== "null" ? httpsProxy : undefined;
        }
        catch (e) {
            return undefined;
        }
    }
}
function checkIfOnline(useYarn) {
    if (!useYarn) {
        // Don't ping the Yarn registry.
        // We'll just assume the best case.
        return Promise.resolve(true);
    }
    return new Promise(function (resolve) {
        dns_1.default.lookup("registry.yarnpkg.com", function (err) {
            var proxy;
            if (err != null && (proxy = getProxy())) {
                // If a proxy is defined, we likely can't resolve external hostnames.
                // Try to resolve the proxy name as an indication of a connection.
                dns_1.default.lookup(url_1.default.parse(proxy).hostname || "", function (proxyErr) {
                    resolve(proxyErr == null);
                });
            }
            else {
                resolve(err == null);
            }
        });
    });
}
var executeCommand = function (command, args, root) {
    return new Promise(function (resolve, reject) {
        var child = child_process_1.spawn(command, args, {
            stdio: "inherit",
            cwd: root,
            shell: process.platform == "win32",
        });
        child.on("close", function (code) {
            if (code !== 0) {
                // Return the failed command
                reject({
                    command: command + " " + args.join(" "),
                });
                return;
            }
            resolve(true);
        });
    });
};
var generateProjectTemplate = function (type, lang, projectDir) {
    return new Promise(function (resolve, reject) {
        var command = "";
        var args = [];
        var useYarn = shouldUseYarn();
        var isOnline = checkIfOnline(useYarn);
        var root = path_1.default.resolve(projectDir);
        var dependencies = ["@polywrap/templates"];
        fs_1.default.writeFileSync(path_1.default.join(root, "package.json"), "\n{\n  \"name\": \"template\"\n}\n    ");
        if (useYarn) {
            command = "yarnpkg";
            args = ["add", "--exact"];
            if (!isOnline) {
                args.push("--offline");
            }
            args.push.apply(args, __spread(dependencies));
            // Explicitly set cwd() to work around issues like
            // https://github.com/facebook/create-react-app/issues/3326.
            // Unfortunately we can only do this for Yarn because npm support for
            // equivalent --prefix flag doesn't help with this issue.
            // This is why for npm, we run checkThatNpmCanReadCwd() early instead.
            args.push("--cwd");
            args.push(root);
            if (!isOnline) {
                var offlineMessage = __1.intlMsg.lib_generators_projectGenerator_offline();
                var fallbackMessage = __1.intlMsg.lib_generators_projectGenerator_fallback();
                console.log(chalk_1.default.yellow(offlineMessage));
                console.log(chalk_1.default.yellow(fallbackMessage));
                console.log();
            }
        }
        else {
            command = "npm";
            args = [
                "install",
                "--save",
                "--save-exact",
                "--loglevel",
                "error",
            ].concat(dependencies);
        }
        executeCommand(command, args, root)
            .then(function () {
            fs_extra_1.default
                .copy(root + "/node_modules/@polywrap/templates/" + type + "/" + lang, "" + root, {
                overwrite: true,
            })
                .then(function () {
                resolve(true);
            })
                .catch(function () {
                reject({
                    command: "copy " + root + "/node_modules/@polywrap/templates/" + type + "/" + lang + " " + root,
                });
            });
        })
            .catch(function (error) {
            reject(error);
        });
    });
};
exports.generateProjectTemplate = generateProjectTemplate;
//# sourceMappingURL=index.js.map