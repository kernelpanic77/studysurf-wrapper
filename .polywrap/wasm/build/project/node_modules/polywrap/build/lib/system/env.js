"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadEnvironmentVariables = void 0;
var __1 = require("../");
function loadEnvironmentVariables(obj, env) {
    if (env === void 0) { env = process.env; }
    var isEnvVar = function (x) { return typeof x === "string" && x[0] === "$"; };
    var isObject = function (val) {
        if (val === null) {
            return false;
        }
        return typeof val === "object";
    };
    var loadEnvVar = function (value) {
        // Allow the use of double '$' to "escape" the loading of an env variable
        if (value.length > 2 && value[0] === "$" && value[1] === "$") {
            return value.substr(1);
        }
        // Parse normally now that the escape case has been handled
        var result = value.match(/\$\{([a-zA-Z0-9_]+)\}|\$([a-zA-Z0-9_]+)/);
        if (!result || result.length !== 3) {
            throw Error("Unable to load env var: " + value + " " + result + " " + (result === null || result === void 0 ? void 0 : result.length));
        }
        var importedVariable = result[1] || result[2];
        if (env[importedVariable]) {
            return env[importedVariable];
        }
        else {
            throw new Error(__1.intlMsg.lib_system_env_var_not_found({
                variableName: importedVariable,
            }));
        }
    };
    var tryLoadEnvVar = function (value) {
        if (isEnvVar(value)) {
            return loadEnvVar(value);
        }
        return value;
    };
    var iterateArray = function (value) {
        return value.map(function (v) {
            if (Array.isArray(v))
                return iterateArray(v);
            if (isObject(v)) {
                return Object.entries(v).reduce(replaceValue, v);
            }
            return tryLoadEnvVar(v);
        });
    };
    var replaceValue = function (object, _a) {
        var _b = __read(_a, 2), key = _b[0], value = _b[1];
        if (Array.isArray(value)) {
            object[key] = iterateArray(value);
            return object;
        }
        if (isObject(value)) {
            var newValues = Object.entries(value);
            object[key] = newValues.reduce(replaceValue, value);
            return object;
        }
        object[key] = tryLoadEnvVar(value);
        return object;
    };
    var entries = Object.entries(obj);
    return entries.reduce(replaceValue, obj);
}
exports.loadEnvironmentVariables = loadEnvironmentVariables;
//# sourceMappingURL=env.js.map