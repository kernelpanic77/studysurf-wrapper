"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JobRunner = void 0;
var types_1 = require("./types");
var client_js_1 = require("@polywrap/client-js");
var client_config_builder_js_1 = require("@polywrap/client-config-builder-js");
var JobRunner = /** @class */ (function () {
    function JobRunner(client, onExecution) {
        this.client = client;
        this.onExecution = onExecution;
        this.jobOutput = new Map();
    }
    JobRunner.prototype.run = function (jobs, ids) {
        return __awaiter(this, void 0, void 0, function () {
            var running;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        running = ids.map(function (absJobId) { return __awaiter(_this, void 0, void 0, function () {
                            var jobId, steps, subJobs, subIds;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        jobId = this.getJobId(absJobId);
                                        steps = jobs[jobId].steps;
                                        if (!steps) return [3 /*break*/, 2];
                                        return [4 /*yield*/, this.executeSteps(absJobId, steps)];
                                    case 1:
                                        _a.sent();
                                        _a.label = 2;
                                    case 2:
                                        subJobs = jobs[jobId].jobs;
                                        if (!subJobs) return [3 /*break*/, 4];
                                        subIds = Object.keys(subJobs).map(function (sub) { return absJobId + "." + sub; });
                                        return [4 /*yield*/, this.run(subJobs, subIds)];
                                    case 3:
                                        _a.sent();
                                        _a.label = 4;
                                    case 4: return [2 /*return*/];
                                }
                            });
                        }); });
                        return [4 /*yield*/, Promise.all(running)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    JobRunner.prototype.getJobId = function (absJobId) {
        var dotIdx = absJobId.lastIndexOf(".");
        if (dotIdx > -1) {
            return absJobId.substring(dotIdx + 1);
        }
        return absJobId;
    };
    JobRunner.prototype.followAccessors = function (jobResult, accessors, referenceId, absJobId, stepId) {
        var e_1, _a;
        var val = jobResult;
        try {
            for (var _b = __values(accessors.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), i = _d[0], accessor = _d[1];
                var indexable = val;
                if (!(accessor in indexable)) {
                    var currentRef = referenceId + accessors.slice(0, i).join(".");
                    throw new Error("Could not resolve arguments: Property " + accessor + " not found in " + currentRef + " for step " + absJobId + "." + stepId);
                }
                val = indexable[accessor];
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return val;
    };
    JobRunner.prototype.resolveReference = function (absJobId, stepId, reference) {
        // get numerical index of property accessors
        var dataOrErrorIdx = reference.indexOf(".data");
        if (dataOrErrorIdx < 0) {
            dataOrErrorIdx = reference.indexOf(".error");
            if (dataOrErrorIdx < 0) {
                throw new Error("Could not find 'data' or 'error' properties in reference " + reference + " for step " + absJobId + "." + stepId);
            }
        }
        // get reference job output
        var referenceId = reference.substring(1, dataOrErrorIdx);
        if (!this.jobOutput.has(referenceId)) {
            throw new Error("Could not resolve reference id " + referenceId + " for step " + absJobId + "." + stepId);
        }
        var refJobResult = this.jobOutput.get(referenceId);
        // parse and validate accessors
        var accessors = reference
            .substring(dataOrErrorIdx + 1)
            .split(".");
        if (refJobResult.status === types_1.Status.SKIPPED) {
            throw new Error("Tried to resolve reference to skipped job " + referenceId + " for step " + absJobId + "." + stepId);
        }
        else if (accessors[0] === "data" &&
            refJobResult.status === types_1.Status.FAILED) {
            throw new Error("Tried to resolve data of failed job " + referenceId + " for step " + absJobId + "." + stepId);
        }
        else if (accessors[0] === "error" &&
            refJobResult.status === types_1.Status.SUCCEED) {
            throw new Error("Tried to resolve error message of successful job " + referenceId + " for step " + absJobId + "." + stepId);
        }
        // follow accessors through reference output to get requested data
        return this.followAccessors(refJobResult, accessors, referenceId, absJobId, stepId);
    };
    JobRunner.prototype.resolveRecord = function (absJobId, stepId, record) {
        var e_2, _a;
        var resolved = {};
        try {
            for (var _b = __values(Object.entries(record)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                resolved[key] = this.resolveValue(absJobId, stepId, value);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return resolved;
    };
    JobRunner.prototype.resolveArray = function (absJobId, stepId, array) {
        var _this = this;
        return array.map(function (v) { return _this.resolveValue(absJobId, stepId, v); });
    };
    JobRunner.prototype.resolveValue = function (absJobId, stepId, value) {
        if (this.isReference(value)) {
            return this.resolveReference(absJobId, stepId, value);
        }
        else if (Array.isArray(value)) {
            return this.resolveArray(absJobId, stepId, value);
        }
        else if (this.isRecord(value)) {
            return this.resolveRecord(absJobId, stepId, value);
        }
        else {
            return value;
        }
    };
    JobRunner.prototype.execStep = function (absJobId, stepId, step) {
        return __awaiter(this, void 0, void 0, function () {
            var args, finalClient, finalConfig, invokeResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (step.args) {
                            try {
                                args = this.resolveRecord(absJobId, stepId, step.args);
                            }
                            catch (e) {
                                return [2 /*return*/, {
                                        error: e,
                                        status: types_1.Status.SKIPPED,
                                    }];
                            }
                        }
                        finalClient = this.client;
                        if (step.config) {
                            finalConfig = new client_config_builder_js_1.ClientConfigBuilder()
                                .add(this.client.getConfig())
                                .add(step.config)
                                .build();
                            finalClient = new client_js_1.PolywrapClient(finalConfig);
                        }
                        return [4 /*yield*/, finalClient.invoke({
                                uri: step.uri,
                                method: step.method,
                                args: args,
                            })];
                    case 1:
                        invokeResult = _a.sent();
                        if (!invokeResult.ok) {
                            return [2 /*return*/, { error: invokeResult.error, status: types_1.Status.FAILED }];
                        }
                        else {
                            return [2 /*return*/, { data: invokeResult.value, status: types_1.Status.SUCCEED }];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    JobRunner.prototype.executeSteps = function (absJobId, steps) {
        return __awaiter(this, void 0, void 0, function () {
            var i, step, absId, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < steps.length)) return [3 /*break*/, 5];
                        step = steps[i];
                        absId = absJobId + "." + i;
                        return [4 /*yield*/, this.execStep(absJobId, i, step)];
                    case 2:
                        result = _a.sent();
                        this.jobOutput.set(absId, result);
                        if (!this.onExecution) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.onExecution(absId, result)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 1];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    JobRunner.prototype.isReference = function (value) {
        return typeof value === "string" && value.startsWith("$");
    };
    JobRunner.prototype.isRecord = function (value) {
        return typeof value === "object" && value !== null;
    };
    return JobRunner;
}());
exports.JobRunner = JobRunner;
//# sourceMappingURL=JobRunner.js.map