"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.printJobOutput = exports.loadValidationScript = exports.validateJobNames = void 0;
var intl_1 = require("../intl");
var path_1 = __importDefault(require("path"));
var fs_1 = __importDefault(require("fs"));
var validateJobNames = function (jobs, idStack) {
    var e_1, _a;
    if (idStack === void 0) { idStack = ""; }
    if (!jobs)
        return;
    try {
        for (var _b = __values(Object.keys(jobs)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var jobId = _c.value;
            if (jobId === "data" || jobId === "error") {
                throw Error("Reserved job name 'data' or 'error' found in job " + idStack + "." + jobId);
            }
            exports.validateJobNames(jobs[jobId].jobs, idStack + "." + jobId);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
};
exports.validateJobNames = validateJobNames;
function loadValidationScript(manifestPath, cueFilepath) {
    cueFilepath = path_1.default.join(path_1.default.join(manifestPath, ".."), cueFilepath);
    if (!fs_1.default.existsSync(cueFilepath)) {
        console.error(intl_1.intlMsg.commands_run_error_validatorNotFound({
            path: cueFilepath,
        }));
        process.exit(1);
    }
    return cueFilepath;
}
exports.loadValidationScript = loadValidationScript;
function printJobOutput(output) {
    console.log("-----------------------------------");
    console.log("ID: " + output.id);
    console.log("Job status: " + output.status);
    if (output.data !== undefined) {
        console.log("Data: " + JSON.stringify(output.data, null, 2));
    }
    if (output.error) {
        console.log("Error: " + output.error.message);
    }
    console.log("Validation status: " + output.validation.status);
    if (output.validation.error !== undefined) {
        console.log("Validation error: " + parseCmdError(output.validation.error));
    }
    console.log("-----------------------------------");
}
exports.printJobOutput = printJobOutput;
var parseCmdError = function (error) {
    var msgLines = error.split(/\r?\n/);
    msgLines[1] = "" + msgLines[1].split(":").slice(1).join(":");
    return msgLines.slice(0, 2).join("\n");
};
//# sourceMappingURL=util.js.map