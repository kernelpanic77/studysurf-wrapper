import { DockerCompose, Logger } from "../";
import { InfraManifest } from "@polywrap/polywrap-manifest-types-js";
export interface InfraConfig {
    rootDir: string;
    defaultInfraModulesPath: string;
    logger: Logger;
    infraManifest?: InfraManifest;
    modulesToUse?: string[];
}
declare type Module = Exclude<InfraManifest["modules"], undefined>[number];
declare type NamedModule = Module & {
    name: string;
};
export declare class Infra {
    protected _config: InfraConfig;
    private _cache;
    private _baseDockerComposePath;
    private _fetchedModulesData;
    private _defaultModuleComposePaths;
    private _dockerCompose;
    private _defaultDockerOptions;
    static cacheLayout: {
        root: string;
        modulesDir: string;
    };
    constructor(_config: InfraConfig);
    up(): Promise<void>;
    down(): Promise<void>;
    config(): Promise<ReturnType<DockerCompose["commands"]["config"]>>;
    getVars(): Promise<string[]>;
    getCacheModulesPath(): string;
    getFilteredModules(): NamedModule[];
    private _writeFileToCacheFromAbsPath;
    private _generateBaseDockerCompose;
    private _fetchRemoteModules;
    private _fetchModules;
    private _fetchLocalModules;
    private _isLocalModule;
    private _fetchPathForDefaultModule;
    private tryResolveComposeFile;
}
export {};
