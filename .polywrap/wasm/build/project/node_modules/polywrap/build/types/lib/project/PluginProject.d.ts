import { ProjectConfig, Project } from ".";
import { PluginManifestLanguage } from "./manifests";
import { PluginManifest } from "@polywrap/polywrap-manifest-types-js";
import { BindOutput } from "@polywrap/schema-bind";
import { WrapAbi } from "@polywrap/schema-parse";
export interface PluginProjectConfig extends ProjectConfig {
    pluginManifestPath: string;
}
export declare class PluginProject extends Project<PluginManifest> {
    protected _config: PluginProjectConfig;
    private _pluginManifest;
    static cacheLayout: {
        root: string;
    };
    constructor(_config: PluginProjectConfig);
    reset(): void;
    validate(): Promise<void>;
    getName(): Promise<string>;
    getManifest(): Promise<PluginManifest>;
    getManifestDir(): string;
    getManifestPath(): string;
    getManifestLanguage(): Promise<PluginManifestLanguage>;
    getSchemaNamedPath(): Promise<string>;
    getImportAbis(): Promise<PluginManifest["source"]["import_abis"]>;
    generateSchemaBindings(abi: WrapAbi, generationSubPath?: string): Promise<BindOutput>;
    private _getGenerationDirectory;
}
