import { Project, ProjectConfig } from ".";
import { PolywrapManifestLanguage } from "./manifests";
import { Deployer } from "../deploy";
import { BuildManifest, DeployManifest, MetaManifest, PolywrapManifest } from "@polywrap/polywrap-manifest-types-js";
import { BindOutput } from "@polywrap/schema-bind";
import { WrapAbi } from "@polywrap/schema-parse";
import { Schema as JsonSchema } from "jsonschema";
export interface PolywrapProjectConfig extends ProjectConfig {
    polywrapManifestPath: string;
    buildManifestPath?: string;
    deployManifestPath?: string;
    metaManifestPath?: string;
}
export interface BuildManifestConfig {
    [k: string]: unknown;
    polywrap_module?: {
        name: string;
        dir: string;
    };
    polywrap_linked_packages?: {
        dir: string;
        name: string;
    }[];
    polywrap_manifests: string[];
    include?: string[];
}
export declare class PolywrapProject extends Project<PolywrapManifest> {
    protected _config: PolywrapProjectConfig;
    static cacheLayout: {
        root: string;
        buildStrategyUsed: string;
        buildDir: string;
        buildUuidFile: string;
        buildProjectDir: string;
        buildLinkedPackagesDir: string;
        deployDir: string;
        deployModulesDir: string;
    };
    private _polywrapManifest;
    private _buildManifest;
    private _deployManifest;
    private _metaManifest;
    private _defaultDeployModulesCached;
    constructor(_config: PolywrapProjectConfig);
    getCachePath(subpath: string): string;
    reset(): void;
    validate(): Promise<void>;
    getName(): Promise<string>;
    getManifest(): Promise<PolywrapManifest>;
    getManifestDir(): string;
    getManifestPath(): string;
    getManifestLanguage(): Promise<PolywrapManifestLanguage>;
    getSchemaNamedPath(): Promise<string>;
    getImportAbis(): Promise<PolywrapManifest["source"]["import_abis"]>;
    generateSchemaBindings(abi: WrapAbi, generationSubPath?: string): Promise<BindOutput>;
    getBuildManifestPath(): Promise<string | undefined>;
    getBuildManifest(): Promise<BuildManifest>;
    getBuildUuid(): Promise<string>;
    cacheBuildManifestLinkedPackages(): Promise<void>;
    getDeployManifestPath(): Promise<string | undefined>;
    getDeployManifestDir(): Promise<string | undefined>;
    getDeployManifest(): Promise<DeployManifest | undefined>;
    getDeployModule(moduleName: string): Promise<{
        deployer: Deployer;
        manifestExt: JsonSchema | undefined;
    }>;
    cacheDeployModules(modules: string[]): Promise<void>;
    getMetaManifestPath(): Promise<string | undefined>;
    getMetaManifestDir(): Promise<string | undefined>;
    getMetaManifest(): Promise<MetaManifest | undefined>;
    getManifestPaths(absolute?: boolean): Promise<string[]>;
    private _getModule;
    private _getGenerationDirectory;
}
