import { AnyProjectManifest, AnyProjectManifestLanguage, CacheDirectory, CacheDirectoryConfig } from "../";
import { Logger } from "../logging";
import { PolywrapManifest } from "@polywrap/polywrap-manifest-types-js";
import { BindOutput } from "@polywrap/schema-bind";
import { Abi } from "@polywrap/schema-parse";
export interface ProjectConfig {
    rootDir: string;
    logger: Logger;
}
export declare abstract class Project<TManifest extends AnyProjectManifest> {
    protected _config: ProjectConfig;
    protected _cache: CacheDirectory;
    constructor(_config: ProjectConfig, _cache: CacheDirectoryConfig);
    static validateManifestLanguage(language: string | undefined, manifestLanguages: Record<string, string>, isManifestLanguage: (language: string) => boolean): void;
    abstract reset(): void;
    abstract validate(): Promise<void>;
    abstract getName(): Promise<string>;
    abstract getManifest(): Promise<TManifest>;
    abstract getManifestDir(): string;
    abstract getManifestPath(): string;
    abstract getManifestLanguage(): Promise<AnyProjectManifestLanguage>;
    abstract getSchemaNamedPath(): Promise<string>;
    abstract getImportAbis(): Promise<PolywrapManifest["source"]["import_abis"]>;
    abstract generateSchemaBindings(abi: Abi, generationSubPath?: string): Promise<BindOutput>;
    get logger(): Logger;
}
